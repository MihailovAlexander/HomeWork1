{1,
{1,
{"Новый1",1,0,"",""},
{16,
{"!!! ЭНЦИКЛОПЕДИЯ РАЗРАБОТЧИКА",1,0,"",""},
{10,
{"Глава 3. Использование встроенного языка",1,0,"",""},
{0,
{"Листинг 3.1. Экспортная процедура в модуле справочника",0,0,"3.1","Процедура Печать() Экспорт
	
	// Алгоритм вывода на экран печатной формы анкеты
	// …
	
КонецПроцедуры
"}
},
{0,
{"Листинг 3.2. Пример вызова экспортной процедуры объекта справочника",0,0,"3.2","Анкета = Справочники.ТиповыеАнкеты.НайтиПоКоду(""00001"").ПолучитьОбъект();	
Анкета.Печать();"}
},
{0,
{"Листинг 3.3. Пример получения формы",0,0,"3.3","Форма = Справочники.Номенклатура.ПолучитьФормуСписка(); "}
},
{0,
{"Листинг 3.4. Использование инструкций условной компиляции",0,0,"3.4","#Если Сервер Тогда
	Сообщить(""Объект создан на сервере"");	
	
#ИначеЕсли Клиент Тогда
	Сообщить(""Объект создан на клиенте"");	
	
#КонецЕсли
"}
},
{0,
{"Листинг 3.5. Доступ к коллекции метаданных",0,0,"3.5","МетаданныеДокументов = Метаданные.Документы;"}
},
{0,
{"Листинг 3.6. Доступ к коллекции метаданных",0,0,"3.6","МетаданныеСправочников = Метаданные.Справочники;"}
},
{0,
{"Листинг 3.7. Получение описаний реквизитов объектов метаданных",0,0,"3.7","// Для объекта метаданных Документ.АккредитивПереданный можно получить:

// описание реквизита ВалютаДокумента
Объект = Метаданные.Документы.АккредитивПереданный.Реквизиты.ВалютаДокумента;

// описание табличной части РасшифровкаПлатежа
Объект = Метаданные.Документы.АккредитивПереданный.ТабличныеЧасти.РасшифровкаПлатежа;

// описание реквизита табличной части ДоговорКонтрагента
Объект = Метаданные.Документы.АккредитивПереданный.ТабличныеЧасти.РасшифровкаПлатежа.Реквизиты.ДоговорКонтрагента;
"}
},
{0,
{"Листинг 3.8. Пример использования метода Содержит()",0,0,"3.8","// В качестве примера выбирается первая запись из первого набора записей, 
// содежращегося в движениях документа
Движения = Документы.АвансовыйОтчет.НайтиПоНомеру(""ТК000009"", '20040101000000').ПолучитьОбъект().Движения[0];
Движения.Прочитать();

ОбъектМетаданных = Метаданные.НайтиПоТипу(ТипЗнч(Движения[0]));

Если Метаданные.РегистрыНакопления.Содержит(ОбъектМетаданных) Тогда
	Сообщить(""Это движения по регистру накопления"");

ИначеЕсли Метаданные.РегистрыСведений.Содержит(ОбъектМетаданных)  Тогда
	Сообщить(""Это движения по регистру сведений"");

ИначеЕсли Метаданные.РегистрыБухгалтерии.Содержит(ОбъектМетаданных) Тогда
	Сообщить(""Это движения по регистру бухгалтерии"");

ИначеЕсли Метаданные.РегистрыРасчета.Содержит(ОбъектМетаданных) Тогда
	Сообщить(""Это движения по регистру расчета"");
КонецЕсли;
"}
},
{0,
{"Листинг 3.9. Пример использования метода Родитель()",0,0,"3.9","// В качестве примера получается табличная часть Товары 
// документа АвансовыйОтчет
ТабличнаяЧасть = Документы.АвансовыйОтчет.НайтиПоНомеру(""ТК000009"", '20040101000000').ПолучитьОбъект().Товары;
ОбъектМетаданных = Метаданные.НайтиПоТипу(ТипЗнч(ТабличнаяЧасть)).Родитель();

Если Метаданные.Справочники.Содержит(ОбъектМетаданных) Тогда
	Сообщить(""Это табличная часть справочника"");

ИначеЕсли Метаданные.Документы.Содержит(ОбъектМетаданных)  Тогда
	Сообщить(""Это табличная часть документа"");
КонецЕсли;
"}
},
{0,
{"Листинг 3.10. Использование итератора Для Каждого",0,0,"3.10","Для Каждого Справочник из Метаданные.Справочники Цикл
	Сообщить(Символы.ПС + Справочник.ПолноеИмя());
	МенеджерСправочника = Справочники[Справочник.Имя];
	Выборка = МенеджерСправочника.Выбрать();
	Пока Выборка.Следующий() Цикл
		Сообщить(Выборка.Наименование);
	КонецЦикла;
КонецЦикла;
"}
}
},
{71,
{"Глава 4. Работа с данными",1,0,"",""},
{0,
{"Листинг 4.1. Сравнение объектов Ссылка",0,0,"4.1","Ссылка1 = Справочники.Валюты.НайтиПоКоду(""810"");	
	
ВыборкаВалют = Справочники.Валюты.Выбрать();
Пока ВыборкаВалют.Следующий() Цикл
	Если Ссылка1 = ВыборкаВалют.Ссылка Тогда
		Сообщить("""" + ВыборкаВалют.Код + "" "" + ВыборкаВалют.Наименование);
	КонецЕсли;
КонецЦикла;
"}
},
{0,
{"Листинг 4.2. Сравнение пустых ссылок",0,0,"4.2","ПустаяСсылкаНоменклатура = Справочники.Номенклатура.ПустаяСсылка();
ПустаяСсылкаКонтрагенты = Справочники.Контрагенты.ПустаяСсылка();

Если ПустаяСсылкаНоменклатура <> ПустаяСсылкаКонтрагенты Тогда
	Сообщить(""Ссылки не равны."");
КонецЕсли;
"}
},
{0,
{"Листинг 4.3. Сравнение объектов",0,0,"4.3","Объект1 = Справочники.Номенклатура.НайтиПоКоду(1).ПолучитьОбъект();
Объект2 = Объект1;
Сообщить(Объект1 = Объект2);
"}
},
{0,
{"Листинг 4.4. Сравнение объектов",0,0,"4.4","Объект1 = Справочники.Номенклатура.НайтиПоКоду(1).ПолучитьОбъект();
Объект2 = Справочники.Номенклатура.НайтиПоКоду(1).ПолучитьОбъект();
Сообщить(Объект1 = Объект2);
"}
},
{0,
{"Листинг 4.5. Последовательное обращение к реквизитам объекта",0,0,"4.5","А = Номенклатура.Наименование;
В = Номенклатура.ВидНоменклатуры;"}
},
{0,
{"Листинг 4.6. Пример проверки пессимистической блокировки",0,0,"4.6","ОбъектЭкземпляр1 = Справочники.Номенклатура.НайтиПоКоду(1).ПолучитьОбъект();	
ОбъектЭкземпляр2 = Справочники.Номенклатура.НайтиПоКоду(1).ПолучитьОбъект();	

ОбъектЭкземпляр1.Заблокировать();

Попытка
	ОбъектЭкземпляр2.Заблокировать();
Исключение
	Сообщить(""Данные объекта уже заблокированы"");
КонецПопытки;
"}
},
{0,
{"Листинг 4.7. Установка формата колонки табличного поля",0,0,"4.7","ЭлементыФормы.ТабличноеПоле1.Колонки.Значение.Формат = ""ЧН='- - -'"";"}
},
{0,
{"Листинг 4.8. Неявное преобразование значения типа Число",0,0,"4.8","Условие = 22;
// …
Если Условие Тогда
//	…
КонецЕсли;
"}
},
{0,
{"Листинг 4.9. Неявное преобразование значения типа Число к значению типа Строка",0,0,"4.9","Переменная = 156935.785;	
Сообщить(Переменная);
"}
},
{0,
{"Листинг 4.10. Неявное преобразование значения типа Число к значению типа Булево",0,0,"4.10","Условие = 22;
Если Условие Тогда
	Сообщить(""Условие истинно."");
иначе
	Сообщить(""Условие ложно."");
КонецЕсли;
"}
},
{0,
{"Листинг 4.11. Неявное преобразование значения типа Число к значению типа Булево",0,0,"4.11","Условие = 22;
Сообщить(НЕ Условие);
"}
},
{0,
{"Листинг 4.12. Неявное преобразование в операции сравнения",0,0,"4.11","Условие = 22;
Если Истина = Условие Тогда
	Сообщить(""Условие истинно."");
иначе
	Сообщить(""Условие ложно."");
КонецЕсли;
"}
},
{0,
{"Листинг 4.13. Явное преобразование к типу Булево",0,0,"4.13","Сообщить(Булево(34.456));"}
},
{0,
{"Листинг 4.14. Явное преобразование к типу Булево",0,0,"4.14","Сообщить(Булево(0));"}
},
{0,
{"Листинг 4.15. Явное преобразование к типу Строка",0,0,"4.15","Сообщить(Строка(26475834.456));"}
},
{0,
{"Листинг 4.16. Пример литерала типа Строка",0,0,"4.16","Сообщить(""Внимание! ""
				""В документе не могут присутствовать строки""
				""с нулевым количеством!"");
"}
},
{0,
{"Листинг 4.17. Пример литерала типа Строка",0,0,"4.17","Сообщить(""Внимание!
				|В документе не могут присутствовать строк
				|с нулевым количеством!"");
"}
},
{0,
{"Листинг 4.18. Сравнение строк",0,0,"4.18","Результат =  ""acb"" > ""ača"";"}
},
{0,
{"Листинг 4.19. Неявное преобразование значение типа строка",0,0,"4.19","Строка = ""25"";
Результат = 35 + Строка;
Сообщить(Результат);
"}
},
{0,
{"Листинг 4.20. Неявное преобразование к типу Булево",0,0,"4.20","Если ""истина"" тогда
	Сообщить(""Истина"");
Иначе
	Сообщить(""Ложь"");
КонецЕсли;
	
Если ""false"" тогда
	Сообщить(""Истина"");
Иначе
	Сообщить(""Ложь"");
КонецЕсли;
"}
},
{0,
{"Листинг 4.21. Неявное преобразование к типу Булево",0,0,"4.21","Если ""nepravda"" тогда
	Сообщить(""Истина"");
Иначе
	Сообщить(""Ложь"");
КонецЕсли;
"}
},
{0,
{"Листинг 4.22. Неявное преобразование к типу Булево",0,0,"4.22","Если ""მცდარი"" тогда
	Сообщить(""Истина"");
Иначе
	Сообщить(""Ложь"");
КонецЕсли;
"}
},
{0,
{"Листинг 4.23. Явное преобразование к типу Число",0,0,"4.23","Сообщить(Число(""1125.78""));"}
},
{0,
{"Листинг 4.24. Явное преобразование к типу Число",0,0,"4.24","Сообщить(Число(""1125,78""));"}
},
{0,
{"Листинг 4.25. Преобразование к типу Дата",0,0,"4.25","Сообщить(Дата(""20030415174534""));"}
},
{0,
{"Листинг 4.26. Установка формата в поле ввода",0,0,"4.26","ЭлементыФормы.ПолеВводаДатаИВремя.Формат = ""ДП='01.01.2003 00:00:00'"";
ЭлементыФормы.ПолеВводаДата.Формат = ""ДП='01.01.2003'"";
ЭлементыФормы.ПолеВводаВремя.Формат = ""ДП='00:00:00'"";
"}
},
{0,
{"Листинг 4.27. Установка формата колонки табличного поля",0,0,"4.27","ЭлементыФормы.ТабличноеПоле1.Колонки.Значение.Формат = ""ДП='01.01.2003 00:00:00'"";
"}
},
{0,
{"Листинг 4.28. Неявное преобразование значения типа Дата",0,0,"4.28","ПеременнаяДата = '20030514234512';
Сообщить(ПеременнаяДата); 
"}
},
{0,
{"Листинг 4.29. Явное преобразование типа Дата",0,0,"4.29","Сообщить(Строка('20030427123658'));"}
},
{0,
{"Листинг 4.30. Неявное преобразование значений типа Булево",0,0,"4.30","Число = 10;
Булево = Истина;
Сообщить(Число + Булево);
"}
},
{0,
{"Листинг 4.31. Неявное преобразование к типу Строка",0,0,"4.31","Булево = Истина;
Сообщить(Булево);
"}
},
{0,
{"Листинг 4.32. Преобразование к типу Число",0,0,"4.32","Результат = Число(Истина);
Сообщить(Результат);
"}
},
{0,
{"Листинг 4.33. Преобразование к типу Строка",0,0,"4.33","Результат = Строка(Истина);
Сообщить(Результат);
"}
},
{0,
{"Листинг 4.34. Сравнение со значением Неопределено",0,0,"4.34","Если РеквизитФормыСоставной = Неопределено Тогда
	Сообщить(""Истина"");
Иначе
	Сообщить(""Ложь"");
КонецЕсли;
"}
},
{0,
{"Листинг 4.35. Значение типа Null",0,0,"4.35","Выборка = Справочники.Номенклатура.Выбрать();
	
Пока Выборка.Следующий() Цикл
		
	Если Выборка.ЭтоГруппа Тогда
		Префикс = ""Группа: "";
	Иначе
		Префикс = ""Элемент: "";
	КонецЕсли;
		
	Сообщить(Префикс + СокрЛП(Выборка.Наименование) + "", тип артикула: "" + ТипЗнч(Выборка.Артикул));
		
КонецЦикла;
"}
},
{0,
{"Листинг 4.36. Сравнение со значением типа Null",0,0,"4.36","Выборка = Справочники.Номенклатура.Выбрать();
	
Пока Выборка.Следующий() Цикл

	Суффикс = ?(Выборка.Артикул = Null, ""не используется"", Выборка.Артикул);
	Сообщить(СокрЛП(Выборка.Наименование) + "", артикул: "" + Суффикс);

КонецЦикла;
"}
},
{0,
{"Листинг 4.37. Использование функции Тип()",0,0,"4.38","ТипСтрока = Тип(""Строка"");
ТипЧисло = Тип(""Число"");
ТипСсылкаНаСправочникНоменклатура = Тип(""СправочникСсылка.Номенклатура""); 
"}
},
{0,
{"Листинг 4.38. Использование функции ТипЗнч()",0,0,"4.38","ТипСтрока = ТипЗнч(""произвольная строка"");
ТипЧисло = ТипЗнч(387.67);
ТипСсылкаНаСправочникНоменклатура = ТипЗнч(Справочники.Номенклатура.НайтиПоКоду(""00001""));
"}
},
{0,
{"Листинг 4.39. Проверка принадлежности значения типу",0,0,"4.39","Если ТипЗнч(ПроверяемаяПеременная) = Тип(""Строка"") Тогда
	Сообщить(""Тип проверяемой переменой - строка"");
КонецЕсли; 
"}
},
{0,
{"Листинг 4.40. Сравнение экземпляров объектов менеджеров",0,0,"4.40","МенеджерСправочников1 = Справочники;
МенеджерСправочников2 = Справочники;
	
Если МенеджерСправочников1 = МенеджерСправочников2 Тогда
	Сообщить(""Объекты равны"");
КонецЕсли;
"}
},
{0,
{"Листинг 4.41. Использование менеджера для проверки принадлежности к типам ссылок",0,0,"4.41","СсылкиНаВсеСправочники = Справочники.ТипВсеСсылки();	

Если СсылкиНаВсеСправочники.СодержитТип(ТипЗнч(АнализируемоеЗначение)) Тогда
	Сообщить(""Это ссылка на справочник"");
Иначе
	Сообщить(""Значение не является ссылкой на справочник"");
КонецЕсли;
"}
},
{0,
{"Листинг 4.42. Обращение к менеджеру объекта конфигурации",0,0,"4.42","МенеджерСправочников = Справочники;
МенеджерСправочникаКонтрагенты = МенеджерСправочников.Контрагенты;
"}
},
{0,
{"Листинг 4.43. Обход коллекции менеджеров объектов",0,0,"4.43","МенеджерСправочников = Справочники;

Для Каждого МенеджерСправочника Из МенеджерСправочников Цикл
	Сообщить(ТипЗнч(МенеджерСправочника));
КонецЦикла;
"}
},
{0,
{"Листинг 4.44. Сравнение экземпляров объектов менеджеров объекта конфигурации",0,0,"4.44","МенеджерСправочникаКонтрагенты1 = Справочники.Контрагенты;
МенеджерСправочникаКонтрагенты2 = Справочники.Контрагенты;
	
Если МенеджерСправочникаКонтрагенты1 = МенеджерСправочникаКонтрагенты2 Тогда
	Сообщить(""Объекты равны"");
КонецЕсли;
"}
},
{0,
{"Листинг 4.45. Настройка отбора списка",0,0,"4.45","ОтборСписка = СписокСправочника.Отбор;

ОтборСписка.Наименование.ВидСравнения = ВидСравнения.Содержит;
ОтборСписка.Наименование.Значение = ""жен"";
ОтборСписка.Наименование.Использование = Истина;

ОтборСписка.ЭтоГруппа.Установить(Ложь, Истина);
"}
},
{0,
{"Листинг 4.46. Пример обхода выборки",0,0,"4.46","ВыборкаВалют = Справочники.Валюты.Выбрать();
Пока ВыборкаВалют.Следующий() Цикл
	Сообщить(ВыборкаВалют.Наименование);
КонецЦикла;
"}
},
{0,
{"Листинг 4.47. Пример использования отбора",0,0,"4.47","СтруктураОтбора = Новый Структура;
СтруктураОтбора.Вставить(""Артикул"", """");
	
ВыборкаНоменклатуры = Справочники.Номенклатура.Выбрать( , , СтруктураОтбора);
	
Пока ВыборкаНоменклатуры.Следующий() Цикл
	Сообщить(ВыборкаНоменклатуры.Наименование);		
КонецЦикла;
"}
},
{0,
{"Листинг 4.48. Пример использования порядка",0,0,"4.48","ВыборкаДоговоров = Справочники.ДоговорыКонтрагентов.Выбрать( , , , ""Дата Убыв"");
	
Пока ВыборкаДоговоров.Следующий() Цикл
	Сообщить(ВыборкаДоговоров);		
КонецЦикла;
"}
},
{0,
{"Листинг 4.49. Выборка подчиненных элементов",0,0,"4.49","Владелец = Справочники.Контрагенты.НайтиПоКоду(""Ю0004"");
	
ВыборкаДоговоров = Справочники.ДоговорыКонтрагентов.ВыбратьИерархически( ,Владелец);
	
Пока ВыборкаДоговоров.Следующий() Цикл
	Сообщить(ВыборкаДоговоров);		
КонецЦикла;
"}
},
{0,
{"Листинг 4.50. Использование квалификаторов числа",0,0,"4.50","КвалификаторЧисла = Новый КвалификаторыЧисла(5, 2, ДопустимыйЗнак.Неотрицательный);
ОписаниеТипа = Новый ОписаниеТипов(""Число"", КвалификаторЧисла);
	
ТаблицаСкидок.Колонки.Добавить(""Товар"", Новый ОписаниеТипов(""СправочникСсылка.Номенклатура""));
ТаблицаСкидок.Колонки.Добавить(""Скидка"", ОписаниеТипа);
	
ЭлементыФормы.ТабличноеПолеСкидки.СоздатьКолонки();
"}
},
{0,
{"Листинг 4.51. Использование строк ограниченной и неограниченной длины",0,0,"4.51","СтрокаОграниченная10 = ""новое значение"";
Сообщить(""Строка ограниченной длины (10): "" + """""""" + СтрокаПеременная10 + """""""");

СтрокаНеограниченная = ""новое значение"";
Сообщить(""Строка неограниченной длины: "" + """""""" + СтрокаНеограниченная + """""""");
"}
},
{0,
{"Листинг 4.52. Использование строк фиксированной и переменной длины",0,0,"4.52","СтрокаФиксированная10 = ""новое"";
Сообщить(""Строка фиксированной длины (10): "" + """""""" + СтрокаФиксированная10 + """""""");

СтрокаПеременная10 = ""новое"";
Сообщить(""Строка переменной длины (10): "" + """""""" + СтрокаПеременная10 + """""""");
"}
},
{0,
{"Листинг 4.53. Использование квалификаторов строки",0,0,"4.53","КвалификаторСтроки = Новый КвалификаторыСтроки(5, ДопустимаяДлина.Переменная);
ОписаниеТипа = Новый ОписаниеТипов(""Строка"", КвалификаторСтроки);
	
ТаблицаСкидок.Колонки.Добавить(""Товар"", Новый ОписаниеТипов(""СправочникСсылка.Номенклатура""));
ТаблицаСкидок.Колонки.Добавить(""Артикул"", ОписаниеТипа);
	
ЭлементыФормы.ТабличноеПолеСкидки.СоздатьКолонки();"}
},
{0,
{"Листинг 4.54. Использование квалификаторов даты",0,0,"4.54","КвалификаторДаты = Новый КвалификаторыДаты(ЧастиДаты.Дата);
ОписаниеТипаДата = Новый ОписаниеТипов(""Дата"", КвалификаторДаты);

КвалификаторЧисла = Новый КвалификаторыЧисла(15, 2);
ОписаниеТипаЧисло = Новый ОписаниеТипов(""Число"", КвалификаторЧисла);
	
ТаблицаКурсВалют.Колонки.Добавить(""Дата"", ОписаниеТипаДата);
ТаблицаКурсВалют.Колонки.Добавить(""Курс"", ОписаниеТипаЧисло);
	
ЭлементыФормы.ТабличноеПолеКурсВалют.СоздатьКолонки();
"}
},
{0,
{"Листинг 4.55. Описание составного типа",0,0,"4.55","МассивТипов = Новый Массив;
МассивТипов.Добавить(Тип(""Строка""));
МассивТипов.Добавить(Тип(""Число""));
МассивТипов.Добавить(Тип(""СправочникСсылка.Номенклатура""));
	
ОписаниеСоставногоТипа = Новый ОписаниеТипов(МассивТипов);
	
ЭлементыФормы.ПолеВводаСоставногоТипа.ТипЗначения = ОписаниеСоставногоТипа;
"}
},
{0,
{"Листинг 4.56. Присвоение нового значения реквизиту составного типа",0,0,"4.56","СоставнойРеквизит = ""новая строка"";"}
},
{0,
{"Листинг 4.57. Присвоение значения реквизиту составного типа",0,0,"4.57","СоставнойРеквизит = 10;"}
},
{0,
{"Листинг 4.58. Приведение значения",0,0,"4.58","МассивТипов = Новый Массив;
МассивТипов.Добавить(Тип(""Строка""));
МассивТипов.Добавить(Тип(""Число""));
МассивТипов.Добавить(Тип(""СправочникСсылка.Номенклатура""));
	
ОписаниеСоставногоТипа = Новый ОписаниеТипов(МассивТипов);
	
ПриводимоеЗначение = Справочники.Номенклатура.НайтиПоКоду(""00001"");
	
Результат = ОписаниеСоставногоТипа.ПривестиЗначение(ПриводимоеЗначение);
	
Сообщить("""" + ТипЗнч(Результат) + "": "" + Результат);
"}
},
{0,
{"Листинг 4.59. Пример использования транзакции",0,0,"4.59","НачатьТранзакцию();
 
// Последовательность выполняемых операторов
// …

// Проверка возможности выполнения операции
Если НЕ <условие> Тогда
	ОтменитьТранзакцию();
КонецЕсли;

// Последовательность выполняемых операторов
// …

ЗафиксироватьТранзакцию();
"}
},
{0,
{"Листинг 4.60. Обработка исключительных ситуаций",0,0,"4.60","НачатьТранзакцию();

// Последовательность операторов 
// …

Попытка

	// Последовательность выполняемых операторов
	// …

Исключение
	ОтменитьТранзакцию();
КонецПопытки;

// Последовательность выполняемых операторов
// …

ЗафиксироватьТранзакцию();
"}
},
{0,
{"Листинг 4.61. Обработка исключительных ситуаций",0,0,"4.61","// Признак окончания попыток выполнения записи
Записано = Ложь;

// Попытки записи выполняются в цикле
Пока Не Записано Цикл

	Попытка
		НачатьТранзакцию();
		Данные.Записать();
		ЗафиксироватьТранзакцию();

		// В случае фиксации транзакциии прекратить попытки записи
		Записано = Истина;

	Исключение
		// В случае неудачи отменить текущую транзакцию, и следующую 
		// попытку начать с новой транзакции
		ОтменитьТранзакцию();
	КонецПопытки;

КонецЦикла;
"}
},
{0,
{"Листинг 4.62. Вложенный вызов транзакций",0,0,"4.62","НачатьТранзакцию();
	// …

	// Вложенный вызов транзакции
	НачатьТранзакцию();
		// …
	ЗафиксироватьТранзакцию();
	// …

	// Вложенный вызов транзакции
	НачатьТранзакцию();
		// …
	ЗафиксироватьТранзакцию();
	// …
ЗафиксироватьТранзакцию();
"}
},
{0,
{"Листинг 4.63. Получение объекта справочника",0,0,"4.63","Товар = Справочники.Номенклатура.НайтиПоКоду(1).ПолучитьОбъект();"}
},
{0,
{"Листинг 4.64. Изменение наименования элемента справочника в транзакции",0,0,"4.64","Товар = Справочники.Номенклатура.НайтиПоКоду(1).ПолучитьОбъект();

НачатьТранзакцию();
	Товар.Наименование = ""Новое наименование"";
"}
},
{0,
{"Листинг 4.65. Запись объекта справочника",0,0,"4.65","Товар = Справочники.Номенклатура.НайтиПоКоду(1).ПолучитьОбъект();

НачатьТранзакцию();
	Товар.Наименование = ""Новое наименование"";
	Товар.Записать();
"}
},
{0,
{"Листинг 4.66. Отмена транзакции",0,0,"4.66","Товар = Справочники.Номенклатура.НайтиПоКоду(1).ПолучитьОбъект();

НачатьТранзакцию();
	Товар.Наименование = ""Новое наименование"";
	Товар.Записать();
ОтменитьТранзакцию();
"}
},
{0,
{"Листинг 4.67. Сравнение наименования элемента справочника в базе данных и программном объекте",0,0,"4.67","Товар = Справочники.Номенклатура.НайтиПоКоду(1).ПолучитьОбъект();

НачатьТранзакцию();
	Товар.Наименование = ""Новое наименование"";
	Товар.Записать();
ОтменитьТранзакцию();

Запрос = Новый Запрос(""ВЫБРАТЬ Справочник.Номенклатура.Наименование ГДЕ Справочник.Номенклатура.Код = 1"");
Выборка = Запрос.Выполнить().Выбрать();
Выборка.Следующий();

НаименованиеВБазе =Выборка.Наименование;
НаименованиеВПамяти = Товар.Наименование;

Сообщить(НаименованиеВПамяти);
Сообщить(НаименованиеВБазе);
"}
},
{0,
{"Листинг 4.68. Перечитывание данных объекта",0,0,"4.68","Товар = Справочники.Номенклатура.НайтиПоКоду(1).ПолучитьОбъект();

НачатьТранзакцию();
	Товар.Наименование = ""Новое наименование"";
	Товар.Записать();
ОтменитьТранзакцию();

Запрос = Новый Запрос(""ВЫБРАТЬ Справочник.Номенклатура.Наименование ГДЕ Справочник.Номенклатура.Код = 1"");
Выборка = Запрос.Выполнить().Выбрать();
Выборка.Следующий();

НаименованиеВБазе =Выборка.Наименование;
НаименованиеВПамяти = Товар.Наименование;

Сообщить(НаименованиеВПамяти);
Сообщить(НаименованиеВБазе);

Товар.Прочитать();
Сообщить(Товар.Наименование);
"}
},
{0,
{"Листинг 4.69. Восстановление признака проведенности документа",0,0,"4.69","НачатьТранзакцию();
	Накладная = Документы.ПриходнаяНакладная.СоздатьДокумент();
	Накладная.Дата = ТекущаяДата();
	Накладная.Записать(РежимЗаписиДокумента.Проведение);
	Проведен = Накладная.Проведен;
ОтменитьТранзакцию();

Сообщить(Накладная.Проведен); //ложь
Сообщить(Проведен); //истина
"}
},
{0,
{"Листинг 4.70. Очистка ссылки",0,0,"4.70","НачатьТранзакцию();
	Товар = Справочники.Номенклатура.СоздатьЭлемент();
	Товар.Записать();
	Ссылка = Товар.Ссылка;
ОтменитьТранзакцию();

Сообщить(Товар.Ссылка = Справочники.Номенклатура.ПустаяСсылка()); //истина
Сообщить(Ссылка); // <Объект не найден> (1:9e4b00055d4c7bcf11d934028f79e857)
"}
},
{0,
{"Листинг 4.71. Очистка кода",0,0,"4.71","Товар = Справочники.Номенклатура.СоздатьЭлемент();

НачатьТранзакцию();
	Товар.Записать();
	Код = Товар.Код;
ОтменитьТранзакцию();

Сообщить(Товар.Код);	//0
Сообщить(Код);	// 8
"}
}
},
{6,
{"Глава 5. Клиент-серверный вариант работы и база данных",1,0,"",""},
{0,
{"Листинг 5.1. Уничтожение COM-объекта внешнего соединения",0,0,"5.1","// Соединений нет

МодульВнешнихСоединений = Новый COMОбъект(""V8.COMConnector"");
Соединение1 = МодульВнешнихСоединений.Connect(""Srvr=ServerName;Ref=InfoBaseName"");

// Одно соединение

Соединение2 = МодульВнешнихСоединений.Connect(""Srvr=ServerName;Ref=InfoBaseName"");

// Два соединения

Соединение1 = Неопределено;

// Одно соединение

Соединение2 = Неопределено;

// Соединений нет
"}
},
{0,
{"Листинг 5.2. Завершение работы пользователей информационной базы",0,0,"5.2","Коннектор = Новый COMОбъект(""V8.COMConnector"");
Сервер = Коннектор.ConnectServer(""TestServer"");
	
// Аутентифицироваться с административными правами в нужной базе
Сервер.AddAuthentication(""Администратор"","""");
	
// Создать объект нужной информационной базы 
ИнформационнаяБаза = Сервер.CreateInfoBaseInfo();
ИнформационнаяБаза.Name = ""Test_Base"";
	
// Получить соединения базы
СоединенияБазы = Сервер.GetIBConnections(ИнформационнаяБаза);
	
// Разорвать соединения клиентских приложений
Для Каждого Соединение Из СоединенияБазы Цикл
	Сервер.Disconnect(Соединение);
КонецЦикла;
"}
},
{0,
{"Листинг 5.3. Завершение работы пользователей информационной базы",0,0,"5.3","// Пример для VBScript
Dim connector
Set connector = CreateObject(""v8.COMConnector"")

Dim server
Set server = connector.ConnectServer(""TestServer"")

server.AddAuthentication ""UserName"", ""UserPassword""

Dim ibDesc
Set ibDesc = server.CreateInfoBaseInfo()
ibDesc.Name = ""TestDB""

Dim connections
connections = server.GetIBConnections(ibDesc)

Dim i
Dim connection
For i = LBound(connections) To UBound(connections)
	set connection = connections(i)
	server.Disconnect connection
Next
"}
},
{0,
{"Листинг 5.4. Передача исполнения кода на сервер с использованием инструкций препроцессора",0,0,"5.4","Процедура ТекущийДолг() Экспорт
	// …
КонецПроцедуры

#Если Сервер Тогда
Процедура Пересчитать() Экспорт
	// …
КонецПроцедуры
#КонецЕсли

Процедура Проверить() Экспорт
	…
КонецПроцедуры
"}
},
{0,
{"Листинг 5.5. Условная компиляция модуля объекта",0,0,"5.5","Процедура ОбработкаПроведения(Отказ, Режим)
	// …
	#Если Клиент Тогда
	ВывестиФормуНакладной();
	#КонецЕсли
	// …
КонецПроцедуры
"}
},
{0,
{"Листинг 5.6. Процедура привилегированного модуля",0,0,"5.6","Процедура ЗаписатьПользователя(ПользовательИБ) Экспорт
	
	// Проверить наличие роли Администратор у добавляемого пользователя.
	РольАдминистратор = Метаданные.Роли.Администратор;
	Если ПользовательИБ.Роли.Содержит(РольАдминистратор) Тогда
		
		// Проверить у текущего пользователя наличие административных прав.
		Если РольДоступна(РольАдминистратор) Тогда
			
			// Выполнить запись нового пользователя.
			ПользовательИБ.Записать();
		Иначе
			Сообщить(""Отсутствуют административные права. 
							|Добавление нового пользователя не выполнено."");
		КонецЕсли;
		
	Иначе // у добавляемого пользователя нет роли Администратор
		
		// Проверить, что текущий пользователь обладает правами 
		// Менеджера или Администратора
		Если РольДоступна(РольАдминистратор) ИЛИ РольДоступна(Метаданные.Роли.Менеджер) Тогда
			
			// Выполнить запись нового пользователя.
			ПользовательИБ.Записать();
			
		Иначе
			Сообщить(""Недостаточно прав доступа для добавления 
							|пользователя."");
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры
"}
}
},
{38,
{"Глава 6. Хранение информации",1,0,"",""},
{0,
{"Листинг 6.1. Фрагмент модуля приложения",0,0,"6.1","Перем ЗавершитьРаботу;

Процедура ПриНачалеРаботыСистемы()
   
	КонтрольРежимаЗавершенияРаботыПользователей();
	ПодключитьОбработчикОжидания(""КонтрольРежимаЗавершенияРаботыПользователей"", 180);
   
КонецПроцедуры

Процедура КонтрольРежимаЗавершенияРаботыПользователей() Экспорт;
	
	// Определить текущее значение константы
	Завершение = Константы.ЗавершениеРаботыПользователей.Получить();   
	Если Завершение Тогда   
		Если  ЗавершитьРаботу Тогда

			// Завершить работу окончательно
			ЗавершитьРаботуСистемы();
         
		Иначе
		  
			// Предупредить пользователя и приготовиться завершить работу
			// в следующий раз 
			ТекстПредупреждения = ""Работа системы будет 
													|автоматически завершена через 3 минуты!"";
			Предупреждение(ТекстПредупреждения, 30, ""Завершение работы"");
			ЗавершитьРаботу = Истина;
		КонецЕсли;
	КонецЕсли;
   
КонецПроцедуры

//-----------------
// Выполнить начальную инициацию флага завершения работы
ЗавершитьРаботу = Ложь;
"}
},
{0,
{"Листинг 6.2. Пример получения значения перечисления",0,0,"6.2","ЗаполняемоеЗначениеВидаКонтрагента = Перечисления.ВидыКонтрагентов.ЧастноеЛицо;
"}
},
{0,
{"Листинг 6.3. Пример организации интерактивного выбора значения перечисления",0,0,"6.3","СписокЗначенийПеречисления = Новый СписокЗначений;

// Прочитать значения перечисления из базы данных
Запрос = Новый Запрос;
Запрос.Текст = ""
|ВЫБРАТЬ
|   ВидыКонтрагентов.Ссылка КАК Значение,
|   ПРЕДСТАВЛЕНИЕ(ВидыКонтрагентов.Ссылка) КАК ПредставлениеЗначения
|ИЗ
|   Перечисление.ВидыКонтрагентов КАК ВидыКонтрагентов"";
Результат = Запрос.Выполнить();
Выборка = Результат.Выбрать();
   
Пока Выборка.Следующий() Цикл

	// Заполнить значения списка
	СписокЗначенийПеречисления.Добавить(Выборка.Значение, Выборка.ПредставлениеЗначения);
	
КонецЦикла;
   
// Предложить пользователю выбрать значение
ВыбранноеЗначение = СписокЗначенийПеречисления.ВыбратьЭлемент(""Выберите вид контрагента"");
"}
},
{0,
{"Листинг 6.4. Пример использования предопределенного элемента справочника",0,0,"6.4","// Создать новый документ
НовоеСобытие = Документы.Событие.СоздатьДокумент();
   
// Заполнить поля
НовоеСобытие.Дата = РабочаяДата;
   
// Заполнить значением предопределенного элемента 
НовоеСобытие.ВидСобытия = Справочники.ВидыСобытий.Семинар;
// ...
   
// Записать документ
НовоеСобытие.Записать();
"}
},
{0,
{"Листинг 6.5. Пример получения объекта справочника из ссылки",0,0,"6.5","ОбъектДоговора = СсылкаНаДоговор.ПолучитьОбъект();"}
},
{0,
{"Листинг 6.6. Пример получения данных подчиненного справочника запросом",0,0,"6.6","Запрос = Новый Запрос;
Запрос.Текст = ""ВЫБРАТЬ
|   СпецификацииДоговоров.Код,
|   СпецификацииДоговоров.Наименование,
|   СпецификацииДоговоров.Номенклатура,
|   СпецификацииДоговоров.Количество,
|   СпецификацииДоговоров.Цена,
|   СпецификацииДоговоров.Сумма
|ИЗ
|   Справочник.СпецификацииДоговоров КАК СпецификацииДоговоров
|ГДЕ
|   СпецификацииДоговоров.Владелец = &Владелец"";
   
Запрос.УстановитьПараметр(""Владелец"", Договор);
   
Результат = Запрос.Выполнить();
Выборка = Результат.Выбрать();
   
Пока Выборка.Следующий() Цикл
   // Выполнить действия со информацией строки спецификации
   //...
      
КонецЦикла;
"}
},
{0,
{"Листинг 6.7. Получение данных подчиненного справочника с помощью объектной модели работы с данными",0,0,"6.7","Выборка = Справочники.СпецификацииДоговоров.Выбрать( ,СсылкаНаВладельца);
Пока Выборка.Следующий() Цикл
	// Выполнить действия со строкой спецификации
	//...
	   
КонецЦикла;
"}
},
{0,
{"Листинг 6.8. Обработчик события ПриСменеСтраницы",0,0,"6.8","Процедура Панель1ПриСменеСтраницы(Элемент, ТекущаяСтраница)

	// Проверить, активизирована ли закладка ""Дополнительные требования""   
	Если  ТекущаяСтраница = 1 Тогда

		// Заполнить список номенклатурных позиций, 
		// использованных в табличной части ""Состав""
		мНоменклатураСостава.ЗагрузитьЗначения(Состав.ВыгрузитьКолонку(""Номенклатура""));
	КонецЕсли;

КонецПроцедуры
"}
},
{0,
{"Листинг 6.9. Обработчик события НачалоВыбораИзСписка",0,0,"6.9","Процедура ДополнительныеТребованияНоменклатураНачалоВыбораИзСписка(Элемент, СтандартнаяОбработка)

	// Назначить список выбора полю ввода номенклатуры
	Элемент.СписокВыбора = мНоменклатураСостава;

КонецПроцедуры
"}
},
{0,
{"Листинг 6.10. Обработчик события нажатия на кнопку Выполнить",0,0,"6.10","Процедура НепосредственнаяЗаписьВРегистр()
	
	// Создать набор записей, соответствующий грануле ""Период - Покупатель""
	НаборЗаписей = РегистрыСведений.ПерсонифицированныйПрайс.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.Период.Установить(ДатаУстановки);
	НаборЗаписей.Отбор.Покупатель.Установить(ВыбранныйПокупатель);
   
	// Добавить записи в созданный набор записей
	Для Каждого СтрокаТовара Из Товары Цикл
		НоваяЗапись = НаборЗаписей.Добавить();
		НоваяЗапись.Период = ДатаУстановки;
		НоваяЗапись.Покупатель = ВыбранныйПокупатель;
		НоваяЗапись.Номенклатура = СтрокаТовара.Номенклатура;
		НоваяЗапись.Цена = СтрокаТовара.Цена;
	КонецЦикла;
   
	// Записать набор записей с замещением старого, 
	// соответствующего той же грануле
	НаборЗаписей.Записать();
   
КонецПроцедуры
"}
},
{0,
{"Листинг 6.11. Фрагмент кода",0,0,"6.11","// Записать набор записей с замещением старого, 
// соответствующего той же грануле
НаборЗаписей.Записать(Ложь);
"}
},
{0,
{"Листинг 6.12. Пример записи набора записей без установки отбора",0,0,"6.12","Процедура КнопкаВыполнитьНажатие(Кнопка)
	
	// Создать набор записей
	НаборЗаписей = РегистрыСведений.ПерсонифицированныйПрайс.СоздатьНаборЗаписей();

	// Добавить записи в созданный набор записей
	Для Каждого СтрокаТовара Из Товары Цикл
		НоваяЗапись = НаборЗаписей.Добавить();
		НоваяЗапись.Период = ДатаУстановки;
		НоваяЗапись.Покупатель = ВыбранныйПокупатель;
		НоваяЗапись.Номенклатура = СтрокаТовара.Номенклатура;
		НоваяЗапись.Цена = СтрокаТовара.Цена;
	КонецЦикла;

	// Записать набор записей с замещением старого, 
	// соответствующего той же грануле
	НаборЗаписей.Записать();

КонецПроцедуры
"}
},
{0,
{"Листинг 6.13. Пример очистки регистра сведений",0,0,"6.13","НаборЗаписей = РегистрыСведений.ПерсонифицированныйПрайс.СоздатьНаборЗаписей();
НаборЗаписей.Записать(); 
"}
},
{0,
{"Листинг 6.14. Процедура ПовыситьЦеныНажатие",0,0,"6.14","Процедура ПереопределитьЦеныНажатие(Элемент)
	
	// Подготовить менеджер записи
	Запись = РегистрыСведений.ПерсонифицированныйПрайс.СоздатьМенеджерЗаписи();

	// Получить данные записей, соответствующих условиям
	Запрос = Новый Запрос;
	Запрос.Текст = ""
	|ВЫБРАТЬ
	|	ПерсонифицированныйПрайс.Период,
	|	ПерсонифицированныйПрайс.Покупатель,
	|	ПерсонифицированныйПрайс.Номенклатура,
	|	ПерсонифицированныйПрайс.Цена
	|ИЗ
	|	РегистрСведений.ПерсонифицированныйПрайс КАК ПерсонифицированныйПрайс
	|ГДЕ
	|	ПерсонифицированныйПрайс.Номенклатура.Наименование ПОДОБНО """"%принтер%"""" И ПерсонифицированныйПрайс.Цена < 300"";
	
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	Пока Выборка.Следующий() Цикл
		
		// Установить ключевые поля менеджера записи
		Запись.Период = Выборка.Период;
		Запись.Покупатель = Выборка.Покупатель;
		Запись.Номенклатура = Выборка.Номенклатура;
		
		// Прочитать запись из базы данных
		Запись.Прочитать();
		
		// Убедиться, что запись все еще есть в базе данных
		Если Запись.Выбран() Тогда
			
			// Переопределить покупателя
			Запись.Покупатель = ВыделенныйПокупатель;		

			// Установить новую цену
			Запись.Цена = Выборка.Цена * 1.2;

			// Записать модифицированную запись в базу данных
			Запись.Записать();
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры
"}
},
{0,
{"Листинг 6.15. Процедура ОткрытьФормуНабораЗаписей",0,0,"6.15","Процедура ОткрытьФормуНабораЗаписей()
	
	// Создать набор записей, соответствующий грануле ""Период - Покупатель"" 
	НаборЗаписей = РегистрыСведений.ПерсонифицированныйПрайс.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.Период.Установить(ДатаУстановки);
	НаборЗаписей.Отбор.Покупатель.Установить(ВыбранныйПокупатель);

	// Прочитать его из базы данных
	НаборЗаписей.Прочитать();
	
	// Открыть форму набора записей
	ФормаНабораЗаписей = НаборЗаписей.
	ПолучитьФорму(""ФормаНабораЗаписей"", , Строка(ВыбранныйПокупатель) + Строка(ДатаУстановки));
	ФормаНабораЗаписей.Открыть();
	
КонецПроцедуры
"}
},
{0,
{"Листинг 6.16. Пример перебора всех записей регистра ",0,0,"6.16","ВыборкаЗаписей = РегистрыСведений.Сотрудники.Выбрать();
Пока ВыборкаЗаписей.Следующий() Цикл

	// Выполнить действие с очередной записью
	//...
		
КонецЦикла;
"}
},
{0,
{"Листинг 6.17. Пример получения должности физического лица",0,0,"6.17","// Подготовить структуру отбора по измерениям      
СтруктураОтбора = Новый Структура;
СтруктураОтбора.Вставить(""ФизическоеЛицо"", ПроверяемоеЛицо);
СтруктураОтбора.Вставить(""Подразделение"", ВыбранноеПодразделение); 
   
// Получить структуру с данными ресурсов записи
СтруктураРесурсов = РегистрыСведений.Сотрудники.Получить(СтруктураОтбора);
   
// Сообщить занимаемую должность
Должность = СтруктураРесурсов.Должность;
Если Должность.Пустая() Тогда
	Сообщить(""В этом подразделении не работает"");
Иначе
	Сообщить(Должность);
КонецЕсли;
"}
},
{0,
{"Листинг 6.18. Пример проверки наличия записи по физическому лицу в регистре сведений",0,0,"6.18","// Подготовить структуру отбора по измерению ""ФизическоеЛицо""	
СтруктураОтбора = Новый Структура(""ФизическоеЛицо"", ПроверяемоеЛицо);	
   
// Получить выборку с отбором
ВыборкаЗаписей = РегистрыСведений.Сотрудники.Выбрать(СтруктураОтбора);
   
// Выполнить действия 
Пока ВыборкаЗаписей.Следующий() Цикл

	// Выполнить действия с записью
	//...
	  
КонецЦикла;
"}
},
{0,
{"Листинг 6.19. Пример получения физических лиц, в наименовании должностей которых присутствует слово Руководитель",0,0,"6.19","Процедура СообщитьСписокРуководителейПредприятияНажатие(Элемент)
   	
	// Получить перечень нужных физических лиц   	
	Запрос = Новый Запрос;
	Запрос.Текст = ""ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Сотрудники.ФизическоеЛицо.Наименование КАК ФизЛицо
	|ИЗ
	|	РегистрСведений.Сотрудники КАК Сотрудники
	|ГДЕ
	|	Сотрудники.Должность.Наименование ПОДОБНО """"%Руководитель%"""""";
   	
	// Перебрать и сообщить полученный список
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
   	
	Пока Выборка.Следующий() Цикл
		Сообщить(Выборка.ФизЛицо);   	
	КонецЦикла;
	
КонецПроцедуры
"}
},
{0,
{"Листинг 6.20. Пример получения количества задействованных подразделений",0,0,"6.20","Процедура СообщитьСколькоПодразделенийВКомпанииНажатие(Элемент)
   
	// Установить исходно, что подразделений нет   
	КоличествоПодразделений = 0;
   
	// Посчитать количество ""непустых"" подразделений в записях регистра
	Запрос = Новый Запрос;
	Запрос.Текст = ""ВЫБРАТЬ
	|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ Сотрудники.Подразделение) КАК КоличествоПодразделений
	|ИЗ
	|	РегистрСведений.Сотрудники КАК Сотрудники
	|ГДЕ
	|	Сотрудники.Подразделение <> &ПустоеПодразделение"";
   
	Запрос.УстановитьПараметр(""ПустоеПодразделение"", Справочники.Подразделения.ПустаяСсылка());
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();   
	Если Выборка.Следующий() Тогда
		КоличествоПодразделений = Выборка.КоличествоПодразделений;   
	КонецЕсли;
   
	// Сообщить полученные результаты
	Сообщить(КоличествоПодразделений);
   
КонецПроцедуры
"}
},
{0,
{"Листинг 6.21. Пример получения списка внутренних совместителей",0,0,"6.21","""ВЫБРАТЬ
|	Сотрудники.ФизическоеЛицо КАК ФизическоеЛицо,
|	Сотрудники.Подразделение КАК Подразделение,
|	Сотрудники.Должность КАК Должность
|ИЗ
|	РегистрСведений.Сотрудники КАК Сотрудники
|ГДЕ
|	Сотрудники.ФизическоеЛицо В (ВЫБРАТЬ
|														Сотрудники.ФизическоеЛицо КАК ФизическоеЛицо
|													ИЗ
|														РегистрСведений.Сотрудники КАК Сотрудники
|													СГРУППИРОВАТЬ ПО
|														Сотрудники.ФизическоеЛицо
|													ИМЕЮЩИЕ
|														КОЛИЧЕСТВО(Сотрудники.ФизическоеЛицо) > 1)""
"}
},
{0,
{"Листинг 6.22. Пример получения записей регистра",0,0,"6.22","// Подготовить структуру отбора по измерению ""Номенклатура""
СтруктураОтбора = Новый Структура(""Номенклатура"", ВыбранныйТовар);
  
// Получить выборку записей 
ВыборкаЗаписей = РегистрыСведений.ПерсонифицированныйПрайс.Выбрать(НачалоИнтервала, КонецИнтервала, СтруктураОтбора);
Пока ВыборкаЗаписей.Следующий() Цикл

	// Выполнить действие с очередной записью
	//...
            
КонецЦикла;
"}
},
{0,
{"Листинг 6.23. Пример получения записей регистра сведений",0,0,"6.23","// Установить значения границ
ГраницаНачалаИнтервала = Новый Граница(НачалоИнтервала, ВидГраницы.Исключая);
ГраницаКонцаИнтервала  = Новый Граница(КонецИнтервала, ВидГраницы.Исключая);

// Подготовить структуру отбора по измерению ""Номенклатура""
СтруктураОтбора = Новый Структура(""Номенклатура"", ВыбранныйТовар);
  
// Получить выборку записей 
ВыборкаЗаписей = РегистрыСведений.ПерсонифицированныйПрайс.Выбрать(ГраницаНачалаИнтервала, ГраницаКонцаИнтервала, СтруктураОтбора);
Пока ВыборкаЗаписей.Следующий() Цикл

	// Выполнить действие с очередной записью
	//...
            
КонецЦикла;
"}
},
{0,
{"Листинг 6.24. Пример использования функции КонецДня()",0,0,"6.24","// Определить конец дня «правой» границы
КонецДняИнтервала = КонецДня(КонецИнтервала);
  
// Получить выборку записей 
ВыборкаЗаписей = РегистрыСведений.ЦеныНоменклатуры.Выбрать(НачалоИнтервала, КонецДняИнтервала);
Пока ВыборкаЗаписей.Следующий() Цикл

	// Выполнить действие с очередной записью
	//...
          
КонецЦикла;                                                             	
"}
},
{0,
{"Листинг 6.25. Пример запроса",0,0,"6.25","""ВЫБРАТЬ
|	ПерсонифицированныйПрайс.Период,
|	ПерсонифицированныйПрайс.Покупатель,
|	ПерсонифицированныйПрайс.Номенклатура,
|	ПерсонифицированныйПрайс.Цена
|ИЗ
|	РегистрСведений.ПерсонифицированныйПрайс КАК ПерсонифицированныйПрайс
|ГДЕ
|	ДЕНЬНЕДЕЛИ(ПерсонифицированныйПрайс.Период) > 5 ""
"}
},
{0,
{"Листинг 6.26. Пример получения цен по номенклатурной позиции",0,0,"6.26","// Подготовить структуру отбора по измерениям      
СтруктураОтбора = Новый Структура;
СтруктураОтбора.Вставить(""Покупатель"", Покупатель);
СтруктураОтбора.Вставить(""Номенклатура"", Товар); 
   
// Получить структуру с данными ресурсов записи
СтруктураРесурсов = РегистрыСведений.ПерсонифицированныйПрайс.Получить(ДатаУстановки, СтруктураОтбора);

// Сообщить цену
Сообщить(СтруктураРесурсов.Цена);
"}
},
{0,
{"Листинг 6.27. Пример использования метода ПолучитьПоследнее()",0,0,"6.27","// Подготовить структуру отбора по измерениям      
СтруктураОтбора = Новый Структура;
СтруктураОтбора.Вставить(""Покупатель"", Покупатель);
СтруктураОтбора.Вставить(""Номенклатура"", Товар); 
   
// Получить структуру с данными актуальных значений ресурсов 
СтруктураРесурсов = РегистрыСведений.ПерсонифицированныйПрайс.ПолучитьПоследнее(ДатаУстановки, СтруктураОтбора);

// Сообщить ""последнюю"" цену
Сообщить(СтруктураРесурсов.Цена);
"}
},
{0,
{"Листинг 6.28. Пример получения среза последних запросом",0,0,"6.28","""ВЫБРАТЬ
|	ПерсонифицированныйПрайс.Покупатель,
|	ПерсонифицированныйПрайс.Номенклатура,
|	ПерсонифицированныйПрайс.Цена
|ИЗ
|	(ВЫБРАТЬ
|		ПерсонифицированныйПрайс.Покупатель КАК Покупатель,
|		ПерсонифицированныйПрайс.Номенклатура КАК Номенклатура,
|		МАКСИМУМ(ПерсонифицированныйПрайс.Период) КАК Период
|	ИЗ
|		РегистрСведений.ПерсонифицированныйПрайс КАК ПерсонифицированныйПрайс
|	ГДЕ
|		ПерсонифицированныйПрайс.Период <= &КонецПериода
|   
|	СГРУППИРОВАТЬ ПО
|		ПерсонифицированныйПрайс.Покупатель,
|		ПерсонифицированныйПрайс.Номенклатура) КАК ВложенныйЗапрос
|		
|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ 
|		РегистрСведений.ПерсонифицированныйПрайс КАК ПерсонифицированныйПрайс
|	ПО ВложенныйЗапрос.Покупатель = ПерсонифицированныйПрайс.Покупатель И ВложенныйЗапрос.Номенклатура = ПерсонифицированныйПрайс.Номенклатура И ВложенныйЗапрос.Период = ПерсонифицированныйПрайс.Период""
"}
},
{0,
{"Листинг 6.29. Пример использования виртуальной таблицы Срез последних",0,0,"6.29","""ВЫБРАТЬ
|	СрезЦен.Покупатель,
|	СрезЦен.Номенклатура,
|	СрезЦен.Цена
|ИЗ
|	РегистрСведений.ПерсонифицированныйПрайс.СрезПоследних(&КонецПериода, ) КАК СрезЦен""
"}
},
{0,
{"Листинг 6.30. Пример получения данных из регистра сведений",0,0,"6.30","""ВЫБРАТЬ
|	ЦеныНоменклатурыСрезПоследних.Период,
|	ЦеныНоменклатурыСрезПоследних.Номенклатура,
|	ЦеныНоменклатурыСрезПоследних.ТипЦены,
|	ЦеныНоменклатурыСрезПоследних.Цена,
|	ЦеныНоменклатурыСрезПоследних.Ответственный
|ИЗ
|	РегистрСведений.ЦеныНоменклатуры.СрезПоследних КАК ЦеныНоменклатурыСрезПоследних
|ГДЕ
|	ЦеныНоменклатурыСрезПоследних.Цена < 100""
"}
},
{0,
{"Листинг 6.31. Пример получения данных из регистра сведений",0,0,"6.31"," ""ВЫБРАТЬ
|	ЦеныНоменклатурыСрезПоследних.Период,
|	ЦеныНоменклатурыСрезПоследних.Номенклатура,
|	ЦеныНоменклатурыСрезПоследних.ТипЦены,
|	ЦеныНоменклатурыСрезПоследних.Цена,
|	ЦеныНоменклатурыСрезПоследних.Ответственный
|ИЗ
|	РегистрСведений.ЦеныНоменклатуры.СрезПоследних( , Цена < 100) КАК ЦеныНоменклатурыСрезПоследних""
"}
},
{0,
{"Листинг 6.32. Пример получения данных из регистра сведений, подчиненного регистратору",0,0,"6.32","ВыборкаДвиженийДокумента = РегистрыСведений.ЦеныНоменклатуры.ВыбратьПоРегистратору(ДокументРегистратор);
	
Пока ВыборкаДвиженийДокумента.Следующий() Цикл

	// Выполнить действие с очередной  записью движения
	//...
   
КонецЦикла;
"}
},
{0,
{"Листинг 6.33. Пример получения данных регистра сведений запросом",0,0,"6.33","Запрос = Новый Запрос;
Запрос.Текст = ""
|ВЫБРАТЬ
|	*
|ИЗ
|	РегистрСведений.ЦеныНоменклатуры КАК ЦеныНоменклатуры
|ГДЕ
|	ЦеныНоменклатуры.Регистратор = &РегистраторОтбора"";
   
Запрос.УстановитьПараметр(""РегистраторОтбора"", ДокументРегистратор);
   
Результат = Запрос.Выполнить();
Выборка = Результат.Выбрать();
  
Пока Выборка.Следующий() Цикл

	// Выполнить действие с очередной  записью движения
	//...
     
КонецЦикла;
"}
},
{0,
{"Листинг 6.34. Пример получения данных из регистра сведений",0,0,"6.34","""ВЫБРАТЬ РАЗЛИЧНЫЕ
|	ЦеныНоменклатуры.Регистратор
|ИЗ
|	РегистрСведений.ЦеныНоменклатуры КАК ЦеныНоменклатуры
|ГДЕ
|	ЦеныНоменклатуры.НомерСтроки > 100""
"}
},
{0,
{"Листинг 6.35. Пример получения данных регистра сведений",0,0,"6.35","""ВЫБРАТЬ РАЗЛИЧНЫЕ
|	ЦеныНоменклатуры.Регистратор
|ИЗ
|	РегистрСведений.ЦеныНоменклатуры КАК ЦеныНоменклатуры
|ГДЕ
|	(НЕ ЦеныНоменклатуры.Активность)""
"}
},
{0,
{"Листинг 6.36. Пример запроса, используемого при формировании отчета",0,0,"6.36","""ВЫБРАТЬ
|	ПродажиОбороты.Номенклатура КАК Номенклатура,
|	ПродажиОбороты.Контрагент КАК Контрагент,
|	ПродажиОбороты.КоличествоОборот КАК КоличествоОборот,
|	ПродажиОбороты.СуммаОборот КАК СуммаОборот
|	
|ИЗ
|	(ВЫБРАТЬ РАЗЛИЧНЫЕ
|		КатегорииКонтрагентов.Контрагент КАК Контрагент
|		
|	ИЗ
|		РегистрСведений.КатегорииКонтрагентов КАК КатегорииКонтрагентов
|		
|	{ГДЕ КатегорииКонтрагентов.Категория.*}) КАК ВложенныйЗапрос
|	
|	ЛЕВОЕ СОЕДИНЕНИЕ 
|		РегистрНакопления.Продажи.Обороты(&НачалоПериода, &КонецПериода, , ) КАК ПродажиОбороты
|		
|	ПО ВложенныйЗапрос.Контрагент = ПродажиОбороты.Контрагент
|	
|ИТОГИ
|	СУММА(КоличествоОборот),
|	СУММА(СуммаОборот)
|	
|ПО
|	Номенклатура,
|	Контрагент""
"}
},
{0,
{"Листинг 6.37. Обработчик события ПриИзменении",0,0,"6.37","Процедура ВидХарактеристикиПриИзменении(Элемент)
	
	ЗначениеХарактеристики = ВидХарактеристики.ТипЗначения.ПривестиЗначение(ЗначениеХарактеристики);
	
КонецПроцедуры
"}
},
{0,
{"Листинг 6.38. Обработчик события ПриИзменении",0,0,"6..38","Процедура ДополнительнаяИнформацияДополнительноеСвойствоПриИзменении(Элемент)
	
	ТекущиеДанные = ЭлементыФормы.ДополнительнаяИнформация.ТекущиеДанные;
	ТекущиеДанные.ЗначениеСвойства = ТекущиеДанные.ДополнительноеСвойство.ТипЗначения.ПривестиЗначение(ТекущиеДанные.ЗначениеСвойства);
	
КонецПроцедуры
"}
}
},
{27,
{"Глава 7. Документы и последовательности",1,0,"",""},
{0,
{"Листинг 7.1. Обработчик события ПередЗаписью",0,0,"7.1","Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)

	// Ограничить действия: только для записанных документов 
	Если Не ЭтоНовый() Тогда 

		// Получить пометку удаления текущего документа из базы данных
		Запрос = Новый Запрос;
		Запрос.Текст = ""ВЫБРАТЬ
		|	ПоступлениеТоваров.ПометкаУдаления
		|ИЗ
		|	Документ.ПоступлениеТоваров КАК ПоступлениеТоваров
		|ГДЕ
		|	ПоступлениеТоваров.Ссылка = &ТекущийДокумент"";

		Запрос.УстановитьПараметр(""ТекущийДокумент"", Ссылка);
		Результат = Запрос.Выполнить();
		Выборка = Результат.Выбрать();
		Выборка.Следующий(); 

		// Сравнить текущее значение пометки удаления 
		// и взятое из базы данных
		Если ПометкаУдаления <> Выборка.ПометкаУдаления Тогда
			Если ПометкаУдаления Тогда

				// Выполнить действия при установке пометки удаления 
				// ...

			Иначе

			// Выполнить действия при снятии пометки удаления 
			// ...

			КонецЕсли;
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры
"}
},
{0,
{"Листинг 7.2. Обработчик события ПередУдалением",0,0,"7.2","Процедура ПередУдалением(Отказ)
	
	Для Каждого НаборЗаписейРегистра из Движения Цикл 

		// Прочитать движения по каждому регистру
		НаборЗаписейРегистра.Прочитать();

		// Проверить наличие записей в движениях по конкретному регистру.
		Если НаборЗаписейРегистра.Количество()>0 Тогда
			Сообщить(""Документ "" + Метаданные().Представление() + "" № "" + Номер + "" от "" + Дата + "" имеет движения!"");
			Отказ = Истина;
		КонецЕсли; 

	КонецЦикла; 

КонецПроцедуры
"}
},
{0,
{"Листинг 7.3. Установка нового номера в пределах префикса автонумерации",0,0,"7.3","Процедура ПриУстановкеНовогоНомера(СтандартнаяОбработка, Префикс)
	
	Префикс = Организация.Префикс;
	
КонецПроцедуры
"}
},
{0,
{"Листинг 7.4. Использование метода УстановитьНовыйНомер()",0,0,"7.4","Процедура ОрганизацияПриИзменении(Элемент)

	// Установить новый номер согласно префиксу организации 
	УстановитьНовыйНомер(Организация.Префикс);

КонецПроцедуры 
"}
},
{0,
{"Листинг 7.5. Получение оперативной отметки времени",0,0,"7.5","НоваяОперативнаяОтметкаВремени = ПолучитьОперативнуюОтметкуВремени();"}
},
{0,
{"Листинг 7.6. Указание режима проведения документа",0,0,"7.6","Записать(РежимЗаписиДокумента.Проведение, РежимПроведенияДокумента.Оперативный);
"}
},
{0,
{"Листинг 7.7. Пример процедуры ОбработкаПроведения",0,0,"7.7","Процедура ОбработкаПроведения(Отказ, Режим)

	Если Режим = РежимПроведенияДокумента.Оперативный Тогда	

		// Получить данные для выполнения контроля остатка	
		Запрос = Новый Запрос;
		Запрос.Текст = ""
		|ВЫБРАТЬ
		|	ТаблицаДокумента.Номенклатура,
		|	СУММА(ТаблицаДокумента.Количество) КАК Количество,
		|	ТоварыНаСкладахОстатки.КоличествоОстаток,
		|	СУММА(ТаблицаДокумента.Сумма) КАК Сумма
		|
		|ИЗ
		|	Документ.РеализацияТоваров.Состав КАК ТаблицаДокумента
		|
		|ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.ТоварыНаСкладах.Остатки( , Номенклатура В (ВЫБРАТЬ РАЗЛИЧНЫЕ
		|																																				РеализацияТоваровТовары.Номенклатура
		|																																			ИЗ
		|																																				Документ.РеализацияТоваров.Состав КАК РеализацияТоваровТовары
		|																																			ГДЕ
		|																																				РеализацияТоваровТовары.Ссылка = &ТекущийДокумент)
		|																												И Склад = &Склад) КАК ТоварыНаСкладахОстатки
		|
		|ПО ТаблицаДокумента.Номенклатура = ТоварыНаСкладахОстатки.Номенклатура
		|
		|ГДЕ
		|	ТаблицаДокумента.Ссылка = &ТекущийДокумент
		|
		|СГРУППИРОВАТЬ ПО
		|	ТаблицаДокумента.Номенклатура,
		|	ТоварыНаСкладахОстатки.КоличествоОстаток"";

		Запрос.УстановитьПараметр(""ТекущийДокумент"", Ссылка);
		Запрос.УстановитьПараметр(""Склад"", Склад);

		Результат = Запрос.Выполнить();
		Выборка = Результат.Выбрать();

		Пока Выборка.Следующий() Цикл

			Если НЕ Выборка.Номенклатура.Услуга Тогда

				// Выполнить контроль остатка
				Остаток = ?(Выборка.КоличествоОстаток = Null, 0, Выборка.КоличествоОстаток); 
				Нехватка =  Выборка.Количество - Остаток;
				Если  Нехватка > 0  Тогда
					Сообщить(""Нехватка товара "" + СокрЛП(Выборка.Номенклатура) + "": "" + Нехватка);
					Сообщить(""Реализация товаров "" + Номер + "" от "" + Дата + "" не проводится!"");

					// Отменить проведение документа
					Отказ = Истина;
				КонецЕсли;

				Если Не Отказ Тогда
					// Сформировать движения по регистру 
					// ТоварыНаСкладах (расход)
					Движение = Движения.ТоварыНаСкладах.Добавить();
					Движение.ВидДвижения = ВидДвиженияНакопления.Расход;
					Движение.Период = Дата;
					Движение.Номенклатура = Выборка.Номенклатура;
					Движение.Склад = Склад;
					Движение.Количество = Выборка.Количество;
				КонецЕсли;
			КонецЕсли;
             
			Если Не Отказ Тогда
				// Сформировать движения по регистру Продажи 
				Движение = Движения.Продажи.Добавить();
				Движение.Период = Дата;
				Движение.Номенклатура = Выборка.Номенклатура;
				Движение.Контрагент = Контрагент;
				Движение.Количество = Выборка.Количество;
				Движение.Сумма = ?(Выборка.Количество =  0, 0, Выборка.Сумма);
				Движение.Цена = ?(Выборка.Количество =  0, 0, Выборка.Сумма / Выборка.Количество);
			КонецЕсли;
		КонецЦикла;

	Иначе
		// При неоперативном проведении - просто отразить отгрузку 
		// в учетных механизмах
		Для Каждого ТекСтрокаСостав Из Состав Цикл

			// Сформировать движения по регистру ТоварыНаСкладах (расход)
			Если НЕ ТекСтрокаСостав.Номенклатура.Услуга Тогда
				Движение = Движения.ТоварыНаСкладах.Добавить();
				Движение.ВидДвижения = ВидДвиженияНакопления.Расход;
				Движение.Период = Дата;
				Движение.Номенклатура = ТекСтрокаСостав.Номенклатура;
				Движение.Склад = Склад;
				Движение.Количество = ТекСтрокаСостав.Количество;
			КонецЕсли;

			// Сформировать движения по регистру Продажи 
			Движение = Движения.Продажи.Добавить();
			Движение.Период = Дата;
			Движение.Номенклатура = ТекСтрокаСостав.Номенклатура;
			Движение.Контрагент = Контрагент;
			Движение.Количество = ТекСтрокаСостав.Количество;
			Движение.Сумма = ?(ТекСтрокаСостав.Количество = 0, 0, ТекСтрокаСостав.Сумма);
			Движение.Цена = ?(ТекСтрокаСостав.Количество = 0, 0, ТекСтрокаСостав.Цена);

		КонецЦикла;

	КонецЕсли;

КонецПроцедуры
"}
},
{0,
{"Листинг 7.8. Оперативное проведение документа",0,0,"7.8","Записать(РежимЗаписиДокумента.Проведение, РежимПроведенияДокумента.Оперативный);
"}
},
{0,
{"Листинг 7.9. Пример процедуры ОбработкаЗаполнения",0,0,"7.9","Процедура ОбработкаЗаполнения(Основание)

	Если ТипЗнч(Основание) = Тип(""ДокументСсылка.ЗаказПокупателя"") Тогда

		// Заполнить шапку
		Договор = Основание.Договор;
		Контрагент = Основание.Контрагент;
		ОснованиеРеализации = Основание.Ссылка;

		// Заполнить табличную часть данными табличной части основания
		Для Каждого ТекСтрокаСостав Из Основание.Состав Цикл
			НоваяСтрока = Состав.Добавить();
			НоваяСтрока.Количество = ТекСтрокаСостав.Количество;
			НоваяСтрока.Номенклатура = ТекСтрокаСостав.Номенклатура;
			НоваяСтрока.Сумма = ТекСтрокаСостав.Сумма;
			НоваяСтрока.Цена = ТекСтрокаСостав.Цена;
		КонецЦикла;

	ИначеЕсли ТипЗнч(Основание) = Тип(""СправочникСсылка.ДоговорыКонтрагентов"") Тогда

		// Заполнить шапку
		Контрагент = Основание.Владелец;
		ДатаПоставки = Основание.ДатаПоставки;
		Договор = Основание.Ссылка;
		ОснованиеРеализации = Основание.Ссылка;

		// Заполнить табличную часть данными табличной части основания
		Для Каждого ТекСтрокаСпецификация Из Основание.Спецификация Цикл
			НоваяСтрока = Состав.Добавить();
			 НоваяСтрока.Количество = ТекСтрокаСпецификация.Количество;
			НоваяСтрока.Цена = ТекСтрокаСпецификация.Количество;
			НоваяСтрока.Номенклатура = ТекСтрокаСпецификация.Номенклатура;
			НоваяСтрока.Сумма = ТекСтрокаСпецификация.Сумма;
		КонецЦикла;

	КонецЕсли;

КонецПроцедуры
"}
},
{0,
{"Листинг 7.10. Пример процедуры ПередОткрытием",0,0,"7.10","Процедура ПередОткрытием(Отказ, СтандартнаяОбработка)

	Если ТипЗнч(ПараметрОснование) = Тип(""ДокументСсылка.ЗаказПокупателя"") Тогда
		Если ПараметрОснование.Контрагент.Пустая() Тогда
			Предупреждение(""Не заполнено поле 'Контрагент'!"");
			Отказ = Истина;
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры
"}
},
{0,
{"Листинг 7.11. Пример создания нового документа на основании",0,0,"7.11","НовыйДокумент = Документы.РеализацияТоваров.СоздатьДокумент();
НовыйДокумент.Дата = ТекущаяДата();
НовыйДокумент.Заполнить(СсылкаНаИсходныйОбъект);
НовыйДокумент.Записать();
"}
},
{0,
{"Листинг 7.12. Пример использования критерия отбора",0,0,"7.12","ФормаОтбора = КритерииОтбора.ДокументыПоДоговору.ПолучитьФорму();
ФормаОтбора.ПараметрОтборПоЗначению = СсылкаНаЗначениеОтбора;
ФормаОтбора.Открыть();
"}
},
{0,
{"Листинг 7.13. Пример использования объектной техники",0,0,"7.13","МассивСсылокНаОбъекты = КритерииОтбора.ДокументыПоДоговору.Найти(СсылкаНаЗначениеОтбора);
"}
},
{0,
{"Листинг 7.14. Пример использования запроса",0,0,"7.14","""ВЫБРАТЬ
|	ДокументыПоДоговору.Ссылка
|ИЗ
|	КритерийОтбора.ДокументыПоДоговору(&Значение) КАК ДокументыПоДоговору""
"}
},
{0,
{"Листинг 7.15. Изменение активности записей",0,0,"7.15","Для Каждого ЗаписьНабораЗаписей Из Движения.ТоварыНаСкладах Цикл
	ЗаписьНабораЗаписей.Активность = Ложь;
КонецЦикла;
"}
},
{0,
{"Листинг 7.16. Использование обработчика события ПриКопировании",0,0,"7.16","Процедура ПриКопировании(ОбъектКопирования)

	// Перебрать движения  документа-источника
	ДвиженияОбъектаКопирования = РегистрыНакопления.ТоварыНаСкладах.ВыбратьПоРегистратору(ОбъектКопирования.Ссылка);
	Пока ДвиженияОбъектаКопирования.Следующий() Цикл

		// Создать новую запись в движениях текущего документа
		НовоеДвижение = Движения.ТоварыНаСкладах.Добавить();

		// Заполнить поля новой записи регистра
		НовоеДвижение.ВидДвижения = ДвиженияОбъектаКопирования.ВидДвижения;
		НовоеДвижение.Период = ДвиженияОбъектаКопирования.Период;
		НовоеДвижение.Номенклатура = ДвиженияОбъектаКопирования.Номенклатура;
		НовоеДвижение.Склад = ДвиженияОбъектаКопирования.Склад;
		НовоеДвижение.Количество = ДвиженияОбъектаКопирования.Количество;
	КонецЦикла;	

КонецПроцедуры	
"}
},
{0,
{"Листинг 7.17. Синхронизация даты движений с датой документа",0,0,"7.17","Для Каждого ЗаписьНабораЗаписей Из Движения.ТоварыНаСкладах Цикл
	ЗаписьНабораЗаписей.Период = Дата;
КонецЦикла; 
"}
},
{0,
{"Листинг 7.18. Пример процедуры ПередЗаписью модуля набора записей регистра",0,0,"7.18","Процедура ПередЗаписью(Отказ, Замещение)

	// Получить дату регистратора	
	ДатаРегистратора = ЭтотОбъект.Отбор.Регистратор.Значение.Дата;	

	// Принудительно установить значение поля ""Период"" каждой записи
	Для Каждого ЗаписьНабораЗаписей Из ЭтотОбъект Цикл
		ЗаписьНабораЗаписей.Период = ДатаРегистратора;
	КонецЦикла;

КонецПроцедуры
"}
},
{0,
{"Листинг 7.19. Пример процедуры ПередЗаписью",0,0,"7.19","Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)

	НаборЗаписейРегистрации =  ПринадлежностьПоследовательностям.ПартионныйУчет;

	// Очистить автоматически сформированный набора записей регистрации
	НаборЗаписейРегистрации.Очистить();

	// Получить выборку товаров из табличной части документа
	Запрос = Новый Запрос;
	Запрос.Текст = ""ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	РеализацияТоваровСостав.Номенклатура
	|ИЗ
	|	Документ.РеализацияТоваров.Состав КАК РеализацияТоваровСостав
	|ГДЕ
	|	РеализацияТоваровСостав.Ссылка = &Ссылка И (НЕ РеализацияТоваровСостав.Номенклатура.Услуга)"";

	Запрос.УстановитьПараметр(""Ссылка"", Ссылка );

	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();

	// Добавить новые записи регистрации и заполнить их
	Пока Выборка.Следующий() Цикл
		НоваяЗапись = НаборЗаписейРегистрации.Добавить();
		НоваяЗапись.Номенклатура = Выборка.Номенклатура;
		НоваяЗапись.Период = Дата;
	КонецЦикла;

КонецПроцедуры  
"}
},
{0,
{"Листинг 7.20. Пример очистки таблицы регистрации документов в последовательности",0,0,"7.20","Процедура ОчисткаТаблицыРегистрацииПоследовательностиПартионныйУчет()

	// Получить все документы, зарегистрированных в последовательности 
	Запрос = Новый Запрос;
	Запрос.Текст = ""ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ПартионныйУчет.Регистратор
	|ИЗ
	|	Последовательность.ПартионныйУчет КАК ПартионныйУчет"";

	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();

	// Создать набор записей таблицы регистрации последовательности
	// (при этом он пуст)
	НаборЗаписейРегистрации = Последовательности.ПартионныйУчет.СоздатьНаборЗаписей();

	// Перебрать выборку из результата запроса 
	Пока Выборка.Следующий() Цикл

		// Установить отбор по очередному зарегистрированному документу
		// в наборе записей
		НаборЗаписейРегистрации.Отбор.Регистратор.Установить(Выборка.Регистратор);

		// Записать пустой набор записей с замещением исходного
		НаборЗаписейРегистрации.Записать();

	КонецЦикла;

КонецПроцедуры 
"}
},
{0,
{"Листинг 7.21. Проверка принадлежности документа последовательности",0,0,"7.21","ФлагПринадлежности = Последовательности.ПартионныйУчет.Принадлежит(СсылкаНаПроверяемыйДокумент);
"}
},
{0,
{"Листинг 7.22. Проверка принадлежности последовательности",0,0,"7.22","// Подготовить структуры отбора по значениям измерений последовательности,
ОтборПоИзмерениям = Новый Структура;
ОтборПоИзмерениям.Вставить(""Номенклатура"", СсылкаНаТовар);

// Проверить принадлежность к последовательности 
// в отношении нужного значения измерения
ФлагПринадлежности = Последовательности.ПартионныйУчет.Принадлежит(СсылкаНаПроверяемыйДокумент, ОтборПоИзмерениям);
"}
},
{0,
{"Листинг 7.23. Перенос границы последовательности на произвольный момент времени",0,0,"7.23","// Подготовить параметры установки границы последовательности:
// Момент времени установки
МоментУстановки = Новый МоментВремени(ДатаУстановки, ДокументУстановки);

// Подготовить структуру отбора по значениям измерений последовательности,
ОтборПоИзмерениям = Новый Структура;
ОтборПоИзмерениям.Вставить(""Номенклатура"", НоменклатураУстановки);

// Установить границы последовательности ""Партионный учет""
Последовательности.ПартионныйУчет.УстановитьГраницу(МоментУстановки, ОтборПоИзмерениям);	
"}
},
{0,
{"Листинг 7.24. Пример получения границ последовательности",0,0,"7.24","ТаблицаГраницПоследовательности = Последовательности.ПартионныйУчет.ПолучитьГраницы(""Номенклатура"");
"}
},
{0,
{"Листинг 7.25. Получение минимальной границы последовательности",0,0,"7.25","ТекущаяГраницаПоследовательности = Последовательности.ПартионныйУчет.ПолучитьГраницу();
"}
},
{0,
{"Листинг 7.26. Пример использования метода Восстановить()",0,0,"7.26","Последовательности.ПартионныйУчет.Восстановить(); "}
},
{0,
{"Листинг 7.27. Пример восстановления границы последовательности",0,0,"7.27","// Сформировать момент времени, по который 
// будет восстанавливаться последовательность
МоментВосстановленияПо = Новый МоментВремени(СсылкаНаДокумент.Дата, СсылкаНаДокумент);

// Сформировать таблицу отбора
ТаблицаКомбинацийИзмерений = Новый ТаблицаЗначений;

// Добавить колонки с именами, соответствующими 
// именам измерений последовательности
ТаблицаКомбинацийИзмерений.Колонки.Добавить(""Номенклатура"");

// Добавить строку(и) со значением(ями) отбора
СтрокаТаблицы = ТаблицаКомбинацийИзмерений.Добавить();
СтрокаТаблицы.Номенклатура = ссылкаНаТовар;

// Восстановить последовательность
Последовательности.ПартионныйУчет.Восстановить(МоментВосстановленияПо, ТаблицаКомбинацийИзмерений);
"}
}
},
{92,
{"Глава 8. Реализация задач учета движения средств",1,0,"",""},
{0,
{"Листинг 8.1. Пример использования метода ПолучитьИспользованиеИтогов()",0,0,"8.1","ПризнакИспользованияИтогов = РегистрыНакопления.ПартииТоваров.ПолучитьИспользованиеИтогов();

Если ПризнакИспользованияИтогов Тогда
   Сообщить(""Итоги рассчитываются!"");
КонецЕсли;
"}
},
{0,
{"Листинг 8.2. Пример отключения использования итогов регистра накопления",0,0,"8.2","// Отключить использование итогов регистра
РегистрыНакопления.ПартииТоваров.УстановитьИспользованиеИтогов(Ложь);

Для Каждого Элемент из МассивИнформации Цикл

	// Выполнить действия по загрузке документов (регистраторов) 
	// и наборов записей регистра
	// ...

	// Записать загруженные наборы записей
	// ...

КонецЦикла;

// Включить использование итогов регистра 
// (одновременно выполнится пересчет итогов)
РегистрыНакопления.ПартииТоваров.УстановитьИспользованиеИтогов(Истина);	
"}
},
{0,
{"Листинг 8.3. Пример формирования движений документа",0,0,"8.3","// Перебрать коллекцию строк табличной части документа
Для Каждого ТекСтрокаСостав Из Состав Цикл
      
	// Добавить новую запись к набору записей регистра ТоварыНаСкладах 
	Движение = Движения.ТоварыНаСкладах.Добавить();
      
	// Заполнить поля добавленной записи
	Движение.ВидДвижения = ВидДвиженияНакопления.Приход;
	Движение.Период = Дата;
	Движение.Номенклатура = ТекСтрокаСостав.Номенклатура;
	Движение.Склад = Склад;
	Движение.Количество = ТекСтрокаСостав.Количество;
	Движение.ВидОперации = ВидОперации;
      
КонецЦикла;
   
// Запись заполненного набора записей движений в регистр
Движения.ТоварыНаСкладах.Записать();
"}
},
{0,
{"Листинг 8.4. Запись набора записей с добавлением",0,0,"8.4","Движения.ТоварыНаСкладах.Записать(Ложь);"}
},
{0,
{"Листинг 8.5. Запись набора записей с замещением",0,0,"8.5","Движения.ТоварыНаСкладах.Записать(Истина);"}
},
{0,
{"Листинг 8.6. Пример процедуры ОбработкаПроведения",0,0,"8.6","Процедура ОбработкаПроведения(Отказ, Режим)
   
	//{{__КОНСТРУКТОР_ДВИЖЕНИЙ_РЕГИСТРОВ
	// Данный фрагмент построен конструктором.
	// При повторном использовании конструктора, внесенные вручную
	// изменения будут утеряны!!!   

	// Перебрать коллекцию строк табличной части документа
	Для Каждого ТекСтрокаСостав Из Состав Цикл
      
		// Добавить новую запись к набору записей. Регистр ТоварыНаСкладах 
		Движение = Движения.ТоварыНаСкладах.Добавить();
      
		// Заполнить поля добавленной записи
		Движение.ВидДвижения = ВидДвиженияНакопления.Приход;
		Движение.Период = Дата;
		Движение.Номенклатура = ТекСтрокаСостав.Номенклатура;
		Движение.Склад = Склад;
		Движение.Количество = ТекСтрокаСостав.Количество;
		Движение.ВидОперации = ВидОперации;
      
	КонецЦикла;
   
	// Запись движений будет произведена неявно 
	//Движения.ТоварыНаСкладах.Записать();
	//}}__КОНСТРУКТОР_ДВИЖЕНИЙ_РЕГИСТРОВ

КонецПроцедуры
"}
},
{0,
{"Листинг 8.7. Пример программного вызова проведения документа",0,0,"8.7","Документ.Записать(РежимЗаписиДокумента.Проведение, РежимПроведенияДокумента.Оперативный);
"}
},
{0,
{"Листинг 8.8. Пример перепроведения документов РеализацияТоваров",0,0,"8.8","//Получить ссылки на проведенные документы в требуемом интервале	
Запрос = Новый Запрос;
Запрос.Текст = ""ВЫБРАТЬ
|	РеализацияТоваров.Ссылка
|ИЗ
|	Документ.РеализацияТоваров КАК РеализацияТоваров
|ГДЕ
|	РеализацияТоваров.Дата МЕЖДУ &ДатаНачала И &ДатаОкончания И РеализацияТоваров.Проведен"";
   
Запрос.УстановитьПараметр(""ДатаНачала"", ДатаНачала);
Запрос.УстановитьПараметр(""ДатаОкончания"", ДатаКонца);
   
Результат = Запрос.Выполнить();
   
// Перебрать ссылки полученных документов
Выборка = Результат.Выбрать();
Пока Выборка.Следующий() Цикл
	   
	// Перепровести каждый документ неоперативно
	Документ = Выборка.Ссылка.ПолучитьОбъект();
	Документ.Записать(РежимЗаписиДокумента.Проведение);

КонецЦикла;
"}
},
{0,
{"Листинг 8.9. Пример записи документа с проведением в форме",0,0,"8.9","Процедура ОсновныеДействияФормыПровестиНеоперативно(Кнопка)
	
	// Установить использование режима неоперативного проведения
	ИспользоватьРежимПроведения = ИспользованиеРежимаПроведения.Неоперативный;

	// Выполнить проведение в форме
	ЗаписатьВФорме(РежимЗаписиДокумента.Проведение);	

КонецПроцедуры
"}
},
{0,
{"Листинг 8.10. Пример формирования движений документа без проведения",0,0,"8.10","Процедура ФормированиеДвиженийБезПроведения() Экспорт
	
	// Проверить и записать документ, если ранее не записан
	Если ЭтоНовый() Тогда
		Записать();
	КонецЕсли;
	
	// Очистить старые движения документа
	Движения.ТоварыНаСкладах.Очистить();
	
	Для Каждого ТекСтрокаСостав Из Состав Цикл

		// Сформировать и заполнить запись движения
		Движение = Движения.ТоварыНаСкладах.Добавить();
		Движение.ВидДвижения = ВидДвиженияНакопления.Приход;
		Движение.Период = Дата;
		Движение.Номенклатура = ТекСтрокаСостав.Номенклатура;
		Движение.Склад = Склад;
		Движение.Количество = ТекСтрокаСостав.Количество;
		Движение.ВидОперации = ВидОперации;
	КонецЦикла;
	
	// Записать движения регистров с замещением старых наборов записей
	Движения.ТоварыНаСкладах.Записать();
	
КонецПроцедуры
"}
},
{0,
{"Листинг 8.11. Пример вызова процедуры из формы документа",0,0,"8.11","Процедура ОсновныеДействияФормыФормированиеДвижений(Кнопка)
	
	// Передать управление процедуре модуля объекта документа	
	ФормированиеДвиженийБезПроведения();
   
КонецПроцедуры
"}
},
{0,
{"Листинг 8.12. Пример вызова процедуры из модуля обработки",0,0,"8.12","// Получить объект документа
Документ = СсылкаНаДокумент.ПолучитьОбъект();
	
// Вызвать процедуру модуля объекта документа, формирующую движения
Документ.ФормированиеДвиженийБезПроведения();
"}
},
{0,
{"Листинг 8.13. Пример модификации движений документа",0,0,"8.13","//Получить значение основного поставщика
ОсновнойПоставщик = Константы.ОсновнойПоставщик.Получить();
   
// Прочитать набор записей движений по регистру ""ТоварыНаСкладах""
НаборЗаписей = Движения.ТоварыНаСкладах;
НаборЗаписей.Прочитать();
   
// Модифицировать каждую запись в прочитанных движениях 
Если НаборЗаписей.Количество()<> 0 Тогда
	Для Каждого Движение Из НаборЗаписей Цикл
		Движение.Поставщик = ОсновнойПоставщик;
	КонецЦикла;
      
	// Записать измененный набор записей   
	НаборЗаписей.Записать();
КонецЕсли;
"}
},
{0,
{"Листинг 8.14. Пример снятия активности записей",0,0,"8.14","// Перебрать наборы записей по регистрам
Для Каждого НаборЗаписей Из Движения Цикл
      
	// Прочитать движения по регистру
	НаборЗаписей.Прочитать();

	// Снять активность
	НаборЗаписей.УстановитьАктивность(Ложь);

	//Записать набор записей
	НаборЗаписей.Записать();
      
КонецЦикла;
"}
},
{0,
{"Листинг 8.15. Пример удаления движений документа",0,0,"8.15","// Перебрать наборы записей по регистрам
Для Каждого НаборЗаписей Из Движения Цикл
      
	// Очистить набор записей движений по регистру
	НаборЗаписей.Очистить();

	//Записать набор записей
	НаборЗаписей.Записать();
      
КонецЦикла;
"}
},
{0,
{"Листинг 8.16. Пример удаления движений документа",0,0,"8.16","// Перебрать наборы записей по регистрам
Для Каждого НаборЗаписей Из Движения Цикл
      
	//Записать набор записей
	НаборЗаписей.Записать();
      
КонецЦикла
"}
},
{0,
{"Листинг 8.17. Пример формирования движений документов",0,0,"8.17","Процедура 
	ФормированиеДвиженийПоПродажамДляВсехРеализацияТоваровНажатие(Элемент)
	
	// Обратиться к набору записей регистра
	НаборЗаписейРегистра = РегистрыНакопления.Продажи.СоздатьНаборЗаписей();
	
	// Прочитать из базы данных данные, 
	// необходимые для формирования движений
	Запрос = Новый Запрос;
	Запрос.Текст = ""ВЫБРАТЬ
	|	РеализацияТоваровСостав.Ссылка КАК Ссылка,
	|	РеализацияТоваровСостав.Ссылка.Дата,
	|	РеализацияТоваровСостав.Ссылка.Контрагент,
	|	РеализацияТоваровСостав.Номенклатура,
	|	РеализацияТоваровСостав.Количество,
	|	РеализацияТоваровСостав.Цена,
	|	РеализацияТоваровСостав.Сумма
	|ИЗ
	|	Документ.РеализацияТоваров.Состав КАК РеализацияТоваровСостав
	|ГДЕ
	|	РеализацияТоваровСостав.Ссылка.Проведен
	|ИТОГИ ПО
	|	Ссылка"";
	Результат = Запрос.Выполнить();
	
	// Перебрать все документы из результата запроса
	ВыборкаДокументов = Результат.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	Пока ВыборкаДокументов.Следующий() Цикл
		
		// Установить отбор набора записей по регистратору, 
		// к которому будут приписаны движения
		НаборЗаписейРегистра.Отбор.Регистратор.Установить(ВыборкаДокументов.Ссылка);
		
		// Перебрать  данные о составе документа, 
		// необходимые для заполнения формируемых движений 
		ВыборкаДетальныхЗаписей = ВыборкаДокументов.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		Пока ВыборкаДетальныхЗаписей.Следующий() Цикл
			
			// Сформировать движения по регистру Продажи 
			НоваяЗапись = НаборЗаписейРегистра.Добавить();
			НоваяЗапись.Период = ВыборкаДетальныхЗаписей.Дата;
			НоваяЗапись.Номенклатура = ВыборкаДетальныхЗаписей.Номенклатура;
			НоваяЗапись.Контрагент = ВыборкаДетальныхЗаписей.Контрагент;
			НоваяЗапись.Количество = ВыборкаДетальныхЗаписей.Количество;
			НоваяЗапись.Сумма =  ВыборкаДетальныхЗаписей.Сумма;
			НоваяЗапись.Цена = ВыборкаДетальныхЗаписей.Цена;
		КонецЦикла;
		
		// Записать сформированные  для очередного документа  движения
		НаборЗаписейРегистра.Записать();
		
		// Очистить набор записей регистра 
		// перед использованием для следующего документа
		НаборЗаписейРегистра.Очистить();
		
	КонецЦикла;
	
КонецПроцедуры
"}
},
{0,
{"Листинг 8.18. Пример удаления движений документа",0,0,"8.18","Процедура УдалитьДвиженияПоПродажамНажатие(Элемент)
	// Обратиться к набору записей регистра
	НаборЗаписейРегистра = РегистрыНакопления.Продажи.СоздатьНаборЗаписей();
	
	// Получить из базы данных ссылки на документы, 
	// у которых нужно удалить движения
	Запрос = Новый Запрос;
	Запрос.Текст = ""ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Продажи.Регистратор
	|ИЗ
	|	РегистрНакопления.Продажи КАК Продажи
	|ГДЕ
	|	Продажи.Период МЕЖДУ &ДатаНачала И &ДатаОкончания"";
				  
	Запрос.УстановитьПараметр(""ДатаНачала"", ДатаНачала);
	Запрос.УстановитьПараметр(""ДатаОкончания"", ДатаКонца);

	Результат = Запрос.Выполнить();
	
	// Перебрать все документы из результата запроса
	Выборка = Результат.Выбрать();
	Пока Выборка.Следующий() Цикл
		
		// Установить отбор набора записей по регистратору, 
		// к которому будут приписаны движения
		НаборЗаписейРегистра.Отбор.Регистратор.Установить(Выборка.Регистратор);
					
		// Записать пустой набор записей движений для очередного документа 
		НаборЗаписейРегистра.Записать();
		
	КонецЦикла;

КонецПроцедуры
"}
},
{0,
{"Листинг 8.19. Пример использования формы набора записей",0,0,"8.19","Процедура ДействияФормыВызовФормыНабораЗаписей(Кнопка)

	// Получить ссылку на текущий документ
	ТекущийДокумент = ЭлементыФормы.ДокументСписок.ТекущаяСтрока;
	
	// Прочитать набор записей по текущему документу
	НаборЗаписей = РегистрыНакопления.ТоварыНаСкладах.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.Регистратор.Установить(ТекущийДокумент);
	НаборЗаписей.Прочитать();
	
	// Открыть форму набора записей
	ФормаНабораЗаписей = НаборЗаписей.ПолучитьФорму(""ФормаНабораЗаписей"");
	ФормаНабораЗаписей.Открыть();
	
КонецПроцедуры
"}
},
{0,
{"Листинг 8.20. Программный расчет итогов регистра",0,0,"8.20","РегистрыНакопления.ТоварыНаСкладах.УстановитьПериодРассчитанныхИтогов(Дата(2005, 08, 31));
"}
},
{0,
{"Листинг 8.21. Пример получения движений регистра накопления",0,0,"8.21","Запрос = Новый Запрос;
Запрос.Текст = ""ВЫБРАТЬ
|	ТоварыНаСкладах.Период,
|	ТоварыНаСкладах.Регистратор КАК Регистратор,
|	ТоварыНаСкладах.НомерСтроки КАК НомерСтроки,
|	ТоварыНаСкладах.Активность,
|	ТоварыНаСкладах.ВидДвижения,
|	ТоварыНаСкладах.Номенклатура,
|	ТоварыНаСкладах.Склад,
|	ТоварыНаСкладах.Количество,
|	ТоварыНаСкладах.Поставщик
|ИЗ
|	РегистрНакопления.ТоварыНаСкладах КАК ТоварыНаСкладах
|ГДЕ
|	ТоварыНаСкладах.Склад = &Склад И ТоварыНаСкладах.Регистратор ССЫЛКА Документ.РеализацияТоваров
|ИТОГИ
|	КОЛИЧЕСТВО(НомерСтроки)
|ПО
|	Регистратор"";
	
Запрос.УстановитьПараметр(""Склад"", СкладОтбора);
Результат = Запрос.Выполнить();
		
ВыборкаРегистратор = Результат.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
Пока ВыборкаРегистратор.Следующий() Цикл
		
	// Выполнить действия в цикле перебора регистраторов
	//...
		
	ВыборкаДвижения = ВыборкаРегистратор.Выбрать();
	Пока ВыборкаДвижения.Следующий() Цикл
			
		// Выполнить действия в цикле перебора движений
	    //...
			
	КонецЦикла;
		
КонецЦикла;
"}
},
{0,
{"Листинг 8.22. Пример получения движений с использованием соединения с таблицей документа",0,0,"8.22","""ВЫБРАТЬ
|	ПоступлениеТоваров.Контрагент КАК Поставщик,
|	ТоварыНаСкладах.Номенклатура,
|	СУММА(ТоварыНаСкладах.Количество) КАК Количество
|ИЗ
|	РегистрНакопления.ТоварыНаСкладах КАК ТоварыНаСкладах
|	
|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ 
|		Документ.ПоступлениеТоваров КАК ПоступлениеТоваров
|	ПО ТоварыНаСкладах.Регистратор = ПоступлениеТоваров.Ссылка
|	
|ГДЕ
|	ТоварыНаСкладах.Период МЕЖДУ &ДатаНачала И &ДатаКонца
|
|СГРУППИРОВАТЬ ПО
|	ТоварыНаСкладах.Номенклатура,
|	ПоступлениеТоваров.Контрагент""
"}
},
{0,
{"Листинг 8.23. Пример получения движений регистра накопления",0,0,"8.23","""ВЫБРАТЬ
|	ТоварыНаСкладах.Поставщик,
|	ТоварыНаСкладах.Номенклатура,
|	СУММА(ТоварыНаСкладах.Количество) КАК Количество
|ИЗ
|	РегистрНакопления.ТоварыНаСкладах КАК ТоварыНаСкладах
|ГДЕ
|	ТоварыНаСкладах.Период МЕЖДУ &ДатаНачала И &ДатаКонца
|	И ТоварыНаСкладах.Поставщик <> &ПустойПоставщик
|
|СГРУППИРОВАТЬ ПО
|	ТоварыНаСкладах.Поставщик,
|	ТоварыНаСкладах.Номенклатура""
"}
},
{0,
{"Листинг 8.24. Установка значения параметра ПустойПоставщик",0,0,"8.24","Запрос.УстановитьПараметр(""ПустойПоставщик"", Справочники.Контрагенты.ПустаяСсылка());
"}
},
{0,
{"Листинг 8.25. Пример установки параметра ПустойПоставщик",0,0,"8.25","Запрос.УстановитьПараметр(""ПустойПоставщик"", Неопределено);"}
},
{0,
{"Листинг 8.26. Пример установки параметров запроса",0,0,"8.26","Запрос.УстановитьПараметр(""ПустойПоставщик"", Неопределено);
Запрос.УстановитьПараметр(""ПустойПоставщикКонтрагент"", Справочники.Контрагенты.ПустаяСсылка());
Запрос.УстановитьПараметр(""ПустойПоставщикФизЛицо"", Справочники.ФизическиеЛица.ПустаяСсылка());
"}
},
{0,
{"Листинг 8.27. Пример получения движений регистра накопления с помощью выборки",0,0,"8.27","ВыборкаДвижений = РегистрыНакопления.ТоварыНаСкладах.Выбрать();
Пока ВыборкаДвижений.Следующий() Цикл

   // Выполнить действие с очередным движением
   //...
		
КонецЦикла;
"}
},
{0,
{"Листинг 8.28. Получение движений регистра накопления с помощью выборки",0,0,"8.28","ОтборПоПоставщику = Новый Структура(""Поставщик"", ПоставщикОтбора);
ВыборкаДвижений = РегистрыНакопления.ТоварыНаСкладах.Выбрать(НачалоИнтервала, КонецИнтервала, ОтборПоПоставщику);
Если ВыборкаДвижений.Следующий() Тогда
	Сообщить(""В указанном интервале были поставки от "" + ПоставщикОтбора.Наименование);
Иначе
	Сообщить(""В указанном интервале поставок от "" + ПоставщикОтбора.Наименование + "" не было"");
КонецЕсли;
"}
},
{0,
{"Листинг 8.29. Пример получения записей исключая границы интервала",0,0,"8.29","ГраницаНачалаИнтервала = Новый Граница(НачалоИнтервала, ВидГраницы.Исключая);
ГраницаКонцаИнтервала = Новый Граница(КонецИнтервала, ВидГраницы.Исключая);
ВыборкаДвижений = РегистрыНакопления.ТоварыНаСкладах.Выбрать(ГраницаНачалаИнтервала, ГраницаКонцаИнтервала);
Пока ВыборкаДвижений.Следующий() Цикл

	// Выполнить действие с очередным движением
	//...
		
КонецЦикла;
"}
},
{0,
{"Листинг 8.30. Пример получения движений по регистратору",0,0,"8.30","ВыборкаДвижений = РегистрыНакопления.ТоварыНаСкладах.ВыбратьПоРегистратору(РегистраторОтбора);
Пока ВыборкаДвижений.Следующий() Цикл

	// Выполнить действие с очередным движением
	//...
		
КонецЦикла; 
"}
},
{0,
{"Листинг 8.31. Пример получения движений регистратора с помощью запроса",0,0,"8.31","Запрос = Новый Запрос;
Запрос.Текст = ""ВЫБРАТЬ
|	ТоварыНаСкладах.Период,
|	ТоварыНаСкладах.Регистратор,
|	ТоварыНаСкладах.НомерСтроки,
|	ТоварыНаСкладах.Активность,
|	ТоварыНаСкладах.ВидДвижения,
|	ТоварыНаСкладах.Номенклатура,
|	ТоварыНаСкладах.Склад,
|	ТоварыНаСкладах.Количество,
|	ТоварыНаСкладах.Поставщик
|ИЗ
|	РегистрНакопления.ТоварыНаСкладах КАК ТоварыНаСкладах
|ГДЕ
|	ТоварыНаСкладах.Регистратор = &РегистраторОтбора"";

Запрос.УстановитьПараметр(""РегистраторОтбора"", РегистраторОтбора);
	
Результат = Запрос.Выполнить();
Выборка = Результат.Выбрать();
	
Пока Выборка.Следующий() Цикл

	// Выполнить действие с очередным движением
	//...
		
КонецЦикла;
"}
},
{0,
{"Листинг 8.32. Пример получения движений регистра накопления с помощью запроса",0,0,"8.32","Запрос = Новый Запрос;
Запрос.Текст = ""ВЫБРАТЬ
|	Продажи.Регистратор,
|	 Продажи.Номенклатура
|ИЗ
|	 РегистрНакопления.Продажи КАК Продажи
|ГДЕ
|	Продажи.Период МЕЖДУ &ДатаНачала И &ДатаКонца
|	И Продажи.ВидОперации = &РозничнаяПродажа
|	И Продажи.Сумма / Продажи.Количество < Продажи.Номенклатура.ЗакупочнаяЦена"";

Запрос.УстановитьПараметр(""ДатаНачала"", ДатаНачала);
Запрос.УстановитьПараметр(""ДатаКонца"", ДатаКонца);
Запрос.УстановитьПараметр(""РозничнаяПродажа"", Перечисления.ВидыОпераций.РеализацияВРозницу);
Результат = Запрос.Выполнить();
Выборка = Результат.Выбрать();

Пока Выборка.Следующий() Цикл
   
	// Выполнить действия по факту продажи дешевле закупочной цены
	// ...

КонецЦикла;
"}
},
{0,
{"Листинг 8.33. Пример получения движений регистра накопления с помощью выборки",0,0,"8.33","Выборка = РегистрыНакопления.Продажи.Выбрать(ДатаНачала, ДатаКонца);
Пока Выборка.Следующий() Цикл
	Если Выборка.ВидОперации = Перечисления.ВидыОпераций.РеализацияВРозницу И Выборка.Сумма / Выборка.Количество < Выборка.Номенклатура.ЗакупочнаяЦена Тогда
         
		// Выполнить действия по факту продажи дешевле закупочной цены
		// ...
         
	КонецЕсли;
КонецЦикла;
"}
},
{0,
{"Листинг 8.34. Пример получения итогов регистра накопления",0,0,"8.34","""ВЫБРАТЬ
|	ТоварыНаСкладахОстатки.Номенклатура КАК Номенклатура,
|	ТоварыНаСкладахОстатки.Склад КАК Склад,
|	ТоварыНаСкладахОстатки.КоличествоОстаток КАК Количество
|ИЗ
|	РегистрНакопления.ТоварыНаСкладах.Остатки(&Период) КАК ТоварыНаСкладахОстатки""
"}
},
{0,
{"Листинг 8.35. Установка параметра запроса значением Неопределено",0,0,"8.35","Запрос.УстановитьПараметр(""Период"", Неопределено);"}
},
{0,
{"Листинг 8.36. Установка параметра запроса значением даты по умолчанию",0,0,"8.36","Запрос.УстановитьПараметр(""Период"", Дата(1, 1, 1));"}
},
{0,
{"Листинг 8.37. Установка параметра запроса значением даты",0,0,"8.37","Запрос.УстановитьПараметр(""Период"", Дата(2005, 9, 1));"}
},
{0,
{"Листинг 8.38. Установка параметра запроса значением даты",0,0,"8.38","Запрос.УстановитьПараметр(""Период"", Дата(2005, 8, 20));"}
},
{0,
{"Листинг 8.39. Установка параметра запроса значением даты",0,0,"8.39","Запрос.УстановитьПараметр(""Период"", Дата(2005, 8, 31));"}
},
{0,
{"Листинг 8.40. Установка параметра запроса значением даты",0,0,"8.40","Запрос.УстановитьПараметр(""Период"", КонецДня(Дата(2005, 8, 31)));"}
},
{0,
{"Листинг 8.41. Установка параметра запроса значением даты",0,0,"8.41","ПериодВключая  = Новый Граница(Дата(2005, 9, 1), ВидГраницы.Включая)
Запрос.УстановитьПараметр(""Период"", ПериодВключая);
"}
},
{0,
{"Листинг 8.42. Пример получения остатков регистра накопления с использованием объектной модели",0,0,"8.42","Отбор = Новый Структура(""Номенклатура"", ТоварОтбора);
ТаблицаОстатков = РегистрыНакопления.ТоварыНаСкладах.Остатки(МоментВремени, Отбор, ""Склад"", ""Количество"");

Для Каждого СтрокаТаблицы Из ТаблицаОстатков Цикл
	Сообщить(""Склад "" + СтрокаТаблицы.Склад + "": "" + СтрокаТаблицы.Количество);
КонецЦикла;
"}
},
{0,
{"Листинг 8.43. Пример получения остатков регистра накопления",0,0,"8.43","Отбор = Новый Структура(""Номенклатура, Склад"", ТоварОтбора, СкладОтбора);"}
},
{0,
{"Листинг 8.44. Пример получения остатков на «Период» запросом",0,0,"8.44","""ВЫБРАТЬ
|	ТоварыНаСкладахОстатки.Номенклатура КАК Номенклатура,
|	ТоварыНаСкладахОстатки.Склад КАК Склад,
|	ТоварыНаСкладахОстатки.КоличествоОстаток КАК КоличествоОстаток
|ИЗ
|	РегистрНакопления.ТоварыНаСкладах.Остатки(&Период) КАК ТоварыНаСкладахОстатки""
"}
},
{0,
{"Листинг 8.45. Пример получения остатков на «Период» методом Остатки()",0,0,"8.45","ТаблицаОстатков = РегистрыНакопления.ТоварыНаСкладах.Остатки(Период);"}
},
{0,
{"Листинг 8.46. Получение момента времени документа",0,0,"8.46","МоментВремениДокумента = СсылкаНаДокумент.МоментВремени();"}
},
{0,
{"Листинг 8.47. Получение момента времени с помощью конструктора",0,0,"8.47","МоментВремениДокумента = Новый МоментВремени(СсылкаНаДокумент.Дата, Документ);
"}
},
{0,
{"Листинг 8.48. Создание границы с помощью конструктора",0,0,"8.48","ГраницаПоДату = Новый Граница(КонецДня(ДатаОтчета), ВидГраницы.Включая);"}
},
{0,
{"Листинг 8.49. Создание границы с помощью конструктора",0,0,"8.49","ГраницаПоДокумент = Новый Граница(СсылкаНаДокумент.МоментВремени(), ВидГраницы.Включая);
"}
},
{0,
{"Листинг 8.50. Пример получения оборотов регистра накопления",0,0,"8.50","""ВЫБРАТЬ
|	ТоварыНаСкладахОбороты.Период,
|	ТоварыНаСкладахОбороты.Номенклатура,
|	ТоварыНаСкладахОбороты.Склад,
|	ТоварыНаСкладахОбороты.КоличествоОборот,
|	ТоварыНаСкладахОбороты.КоличествоПриход,
|	ТоварыНаСкладахОбороты.КоличествоРасход
|ИЗ
|	РегистрНакопления.ТоварыНаСкладах.Обороты( , , Месяц, ) КАК ТоварыНаСкладахОбороты""
"}
},
{0,
{"Листинг 8.51. Пример получения оборотов регистра накопления",0,0,"8.51","""ВЫБРАТЬ
|	ТоварыНаСкладахОбороты.Период,
|	ТоварыНаСкладахОбороты.Регистратор,
|	ТоварыНаСкладахОбороты.Номенклатура,
|	ТоварыНаСкладахОбороты.Склад,
|	ТоварыНаСкладахОбороты.КоличествоОборот,
|	ТоварыНаСкладахОбороты.КоличествоПриход,
|	ТоварыНаСкладахОбороты.КоличествоРасход
|ИЗ
|	РегистрНакопления.ТоварыНаСкладах.Обороты( , , Регистратор, ) КАК ТоварыНаСкладахОбороты""
"}
},
{0,
{"Листинг 8.52. Пример получения оборотов регистра накопления",0,0,"8.52","""ВЫБРАТЬ
|	ТоварыНаСкладахОбороты.Регистратор,
|	ТоварыНаСкладахОбороты.Номенклатура,
|	ТоварыНаСкладахОбороты.Склад,
|	ТоварыНаСкладахОбороты.КоличествоОборот,
|	ТоварыНаСкладахОбороты.КоличествоПриход,
|	ТоварыНаСкладахОбороты.КоличествоРасход
|ИЗ
|	РегистрНакопления.ТоварыНаСкладах.Обороты( , , Регистратор, ) КАК ТоварыНаСкладахОбороты""
"}
},
{0,
{"Листинг 8.53. Пример получения оборотов регистра накопления",0,0,"8.53","""ВЫБРАТЬ
|	ПродажиОбороты.Номенклатура,
|	ПродажиОбороты.КоличествоОборот КАК Количество,
|	ПродажиОбороты.СуммаОборот КАК Сумма
|ИЗ
|	 РегистрНакопления.Продажи.Обороты(&НачалоПериода, &КонецПериода, , ) КАК ПродажиОбороты""
"}
},
{0,
{"Листинг 8.54. Пример установки параметров запроса",0,0,"8.54","Запрос.УстановитьПараметр(""НачалоПериода"", Неопределено);
Запрос.УстановитьПараметр(""КонецПериода"",  Неопределено);
"}
},
{0,
{"Листинг 8.55. Пример установки параметров запроса",0,0,"8.55","Запрос.УстановитьПараметр(""НачалоПериода"", Дата(2005, 8, 01));
Запрос.УстановитьПараметр(""КонецПериода"",  Дата(2005, 9, 30, 23, 59, 59));
"}
},
{0,
{"Листинг 8.56. Пример установки параметров запроса",0,0,"8.56","Запрос.УстановитьПараметр(""НачалоПериода"", Дата(2005, 8, 20));
Запрос.УстановитьПараметр(""КонецПериода"",  Дата(2005, 9, 30, 23, 59, 59));
"}
},
{0,
{"Листинг 8.57. Пример установки параметров запроса",0,0,"8.57","Запрос.УстановитьПараметр(""НачалоПериода"", Дата(2005, 8, 20));
Запрос.УстановитьПараметр(""КонецПериода"",  Дата(2005, 9, 23, 23, 59, 59));
"}
},
{0,
{"Листинг 8.58. Пример установки параметров запроса",0,0,"8.58","""ВЫБРАТЬ
|	ПродажиОбороты.Номенклатура,
|	ПродажиОбороты.КоличествоОборот КАК Количество,
|	ПродажиОбороты.СуммаОборот КАК Сумма
|ИЗ
|	РегистрНакопления.Продажи.Обороты(&НачалоПериода, &КонецПериода, Неделя, ) КАК ПродажиОбороты""
"}
},
{0,
{"Листинг 8.59. Пример получения оборотов регистра накопления",0,0,"8.59","ТаблицаОборотов = РегистрыНакопления.ТоварыНаСкладах.Обороты();"}
},
{0,
{"Листинг 8.60. Пример получения оборотов регистра накопления",0,0,"8.60","Отбор = Новый Структура(""Номенклатура"",ТоварОтбора);
ТаблицаОборотов = РегистрыНакопления.ТоварыНаСкладах.Обороты(НачалоПериода, КонецПериода, Отбор, ""Номенклатура"", );  	

Для Каждого СтрокаТаблицы Из ТаблицаОборотов Цикл
	Сообщить(""Номенклатура "" + СтрокаТаблицы.Склад + "": Приход "" + СтрокаТаблицы.КоличествоПриход + ""; Расход "" + СтрокаТаблицы.КоличествоРасход);
КонецЦикла;
"}
},
{0,
{"Листинг 8.61. Пример установки отбора при получении оборотов регистра накопления",0,0,"8.61","Отбор = Новый Структура(""Номенклатура, Склад"", ТоварОтбора, СкладОтбора);"}
},
{0,
{"Листинг 8.62. Пример получения оборотов оборотного регистра накопления",0,0,"8.62","Отбор = Новый Структура(""Номенклатура"", ТоварОтбора);
ТаблицаОборотов = РегистрыНакопления.Продажи.Обороты(НачалоПериода, КонецПериода, Отбор, ""Контрагент"", );  	

Для каждого СтрокаТаблицы Из ТаблицаОборотов Цикл
	Сообщить(""Покупатель "" + СтрокаТаблицы.Контрагент + "": Количество "" + СтрокаТаблицы.Количество + ""; Сумма "" + СтрокаТаблицы.Сумма);
КонецЦикла;
"}
},
{0,
{"Листинг 8.63. Пример получения оборотов регистра накопления на конец дня ",0,0,"8.63","Запрос = Новый Запрос;
Запрос.Текст = ""ВЫБРАТЬ
|	ТоварыНаСкладахОбороты.Номенклатура,
|	ТоварыНаСкладахОбороты.Склад,
|	ТоварыНаСкладахОбороты.КоличествоОборот,
|	ТоварыНаСкладахОбороты.КоличествоПриход,
|	ТоварыНаСкладахОбороты.КоличествоРасход
|ИЗ
|	 РегистрНакопления.ТоварыНаСкладах.Обороты(&НачалоПериода, &КонецПериода) КАК ТоварыНаСкладахОбороты"";

Запрос.УстановитьПараметр(""НачалоПериода"", НачалоПериода);
Запрос.УстановитьПараметр(""КонецПериода"", КонецДня(КонецПериода));
"}
},
{0,
{"Листинг 8.64. Пример получения оборотов регистра накопления на конец дня",0,0,"8.64","ТаблицаОборотов = РегистрыНакопления.ТоварыНаСкладах.Обороты(НачалоПериода1, КонецДня(КонецПериода1));
"}
},
{0,
{"Листинг 8.65. Пример указания границ периода с использованием момента времени",0,0,"8.65","НачалоПериода = НачалоМесяца(СсылкаНаДокумент.Дата);
КонецПериода = Новый МоментВремени(СсылкаНаДокумент.Дата, СсылкаНаДокумент);
"}
},
{0,
{"Листинг 8.66. Пример задания границ интервала с использованием объекта Граница",0,0,"8.66","ГраницаСДатыИсключая = Новый Граница(НачалоПериода, ВидГраницы.Исключая);
ГраницаНаДатуИсключая = Новый Граница(КонецДня(КонецПериода), ВидГраницы.Исключая);
"}
},
{0,
{"Листинг 8.67. Пример задания границ интервала",0,0,"8.67","ГраницаСНачалаМесяца = НачалоМесяца(СсылкаНаДокумент.Дата);
ГраницаНаДокумент = Новый Граница(СсылкаНаДокумент.МоментВремени(), ВидГраницы.Исключая);
"}
},
{0,
{"Листинг 8.68. Пример получения остатков и оборотов регистра накопления",0,0,"8.68","""ВЫБРАТЬ
|	ТоварыНаСкладахОстаткиИОбороты.Номенклатура,
|	ТоварыНаСкладахОстаткиИОбороты.Склад,
|	ТоварыНаСкладахОстаткиИОбороты.КоличествоНачальныйОстаток,
|	ТоварыНаСкладахОстаткиИОбороты.КоличествоКонечныйОстаток,
|	ТоварыНаСкладахОстаткиИОбороты.КоличествоОборот,
|	ТоварыНаСкладахОстаткиИОбороты.КоличествоПриход,
|	ТоварыНаСкладахОстаткиИОбороты.КоличествоРасход
|ИЗ
|	РегистрНакопления.ТоварыНаСкладах.ОстаткиИОбороты КАК ТоварыНаСкладахОстаткиИОбороты
|АВТОУПОРЯДОЧИВАНИЕ""
"}
},
{0,
{"Листинг 8.69. Пример получения остатков и оборотов регистра накопления",0,0,"8.69","""ВЫБРАТЬ
|	ТоварыНаСкладахОстаткиИОбороты.Период,
|	ТоварыНаСкладахОстаткиИОбороты.Номенклатура,
|	ТоварыНаСкладахОстаткиИОбороты.Склад,
|	ТоварыНаСкладахОстаткиИОбороты.КоличествоНачальныйОстаток,
|	ТоварыНаСкладахОстаткиИОбороты.КоличествоКонечныйОстаток,
|	ТоварыНаСкладахОстаткиИОбороты.КоличествоОборот,
|	ТоварыНаСкладахОстаткиИОбороты.КоличествоПриход,
|	ТоварыНаСкладахОстаткиИОбороты.КоличествоРасход
|ИЗ
|	РегистрНакопления.ТоварыНаСкладах.ОстаткиИОбороты(&НачалоПериода, &КонецПериода, День, Движения, ) КАК ТоварыНаСкладахОстаткиИОбороты
|АВТОУПОРЯДОЧИВАНИЕ""
"}
},
{0,
{"Листинг 8.70. Пример установки параметров запроса",0,0,"8.70","Запрос.УстановитьПараметр(""НачалоПериода"", '20050801');
Запрос.УстановитьПараметр(""КонецПериода"", КонецДня('20050831'));
"}
},
{0,
{"Листинг 8.71. Пример получения остатков и оборотов регистра накопления",0,0,"8.71","""ВЫБРАТЬ
|	ТоварыНаСкладахОстаткиИОбороты.Период,
|	ТоварыНаСкладахОстаткиИОбороты.Номенклатура,
|	ТоварыНаСкладахОстаткиИОбороты.Склад,
|	ТоварыНаСкладахОстаткиИОбороты.КоличествоНачальныйОстаток,
|	ТоварыНаСкладахОстаткиИОбороты.КоличествоКонечныйОстаток,
|	ТоварыНаСкладахОстаткиИОбороты.КоличествоОборот,
|	ТоварыНаСкладахОстаткиИОбороты.КоличествоПриход,
|	ТоварыНаСкладахОстаткиИОбороты.КоличествоРасход
|ИЗ
|	РегистрНакопления.ТоварыНаСкладах.ОстаткиИОбороты(&НачалоПериода, &КонецПериода, День, , ) КАК ТоварыНаСкладахОстаткиИОбороты
|АВТОУПОРЯДОЧИВАНИЕ""
"}
},
{0,
{"Листинг 8.72. Пример получения остатков и оборотов регистра накопления",0,0,"8.72","""ВЫБРАТЬ
|	ТоварыНаСкладахОстаткиИОбороты.Номенклатура КАК Номенклатура,
|	ТоварыНаСкладахОстаткиИОбороты.Склад,
|	ТоварыНаСкладахОстаткиИОбороты.КоличествоНачальныйОстаток КАК КоличествоНачальныйОстаток,
|	ТоварыНаСкладахОстаткиИОбороты.КоличествоКонечныйОстаток КАК КоличествоКонечныйОстаток,
|	ТоварыНаСкладахОстаткиИОбороты.КоличествоОборот КАК КоличествоОборот,
|	ТоварыНаСкладахОстаткиИОбороты.КоличествоПриход КАК КоличествоПриход,
|	ТоварыНаСкладахОстаткиИОбороты.КоличествоРасход КАК КоличествоРасход
|ИЗ
|	РегистрНакопления.ТоварыНаСкладах.ОстаткиИОбороты(&НачалоПериода, &КонецПериода, , Движения, ) КАК ТоварыНаСкладахОстаткиИОбороты
|ИТОГИ
|	СУММА(КоличествоНачальныйОстаток),
|	СУММА(КоличествоКонечныйОстаток),
|	СУММА(КоличествоОборот),
|	СУММА(КоличествоПриход),
|	СУММА(КоличествоРасход)
|ПО
|	Номенклатура
|АВТОУПОРЯДОЧИВАНИЕ""
"}
},
{0,
{"Листинг 8.73. Пример установки параметров запроса",0,0,"8.73","Запрос.УстановитьПараметр(""НачалоПериода"", '20050801');
Запрос.УстановитьПараметр(""КонецПериода"", КонецДня('20050831'));
"}
},
{0,
{"Листинг 8.74. Пример получения остатков и оборотов регистра накопления",0,0,"8.74","""ВЫБРАТЬ
|	ТоварыНаСкладахОстаткиИОбороты.Номенклатура КАК Номенклатура,
|	ТоварыНаСкладахОстаткиИОбороты.Период КАК Период,
|	ТоварыНаСкладахОстаткиИОбороты.Склад,
|	ТоварыНаСкладахОстаткиИОбороты.КоличествоНачальныйОстаток КАК КоличествоНачальныйОстаток,
|	ТоварыНаСкладахОстаткиИОбороты.КоличествоКонечныйОстаток КАК КоличествоКонечныйОстаток,
|	ТоварыНаСкладахОстаткиИОбороты.КоличествоОборот КАК КоличествоОборот,
|	ТоварыНаСкладахОстаткиИОбороты.КоличествоПриход КАК КоличествоПриход,
|	ТоварыНаСкладахОстаткиИОбороты.КоличествоРасход КАК КоличествоРасход
|ИЗ
|	РегистрНакопления.ТоварыНаСкладах.ОстаткиИОбороты(&НачалоПериода, &КонецПериода, День, ДвиженияИГраницыПериода, ) КАК ТоварыНаСкладахОстаткиИОбороты
|ИТОГИ
|	СУММА(КоличествоНачальныйОстаток),
|	СУММА(КоличествоКонечныйОстаток),
|	СУММА(КоличествоОборот),
|	СУММА(КоличествоПриход),
|	СУММА(КоличествоРасход)
|ПО
|	Номенклатура
|АВТОУПОРЯДОЧИВАНИЕ""
"}
},
{0,
{"Листинг 8.75. Пример получения остатков и оборотов регистра накопления",0,0,"8.75","""ВЫБРАТЬ
|	ТоварыНаСкладахОстаткиИОбороты.Номенклатура КАК Номенклатура,
|	ТоварыНаСкладахОстаткиИОбороты.Период КАК Период,
|	ТоварыНаСкладахОстаткиИОбороты.Склад,
|	ТоварыНаСкладахОстаткиИОбороты.КоличествоНачальныйОстаток КАК КоличествоНачальныйОстаток,
|	ТоварыНаСкладахОстаткиИОбороты.КоличествоКонечныйОстаток КАК КоличествоКонечныйОстаток,
|	ТоварыНаСкладахОстаткиИОбороты.КоличествоОборот КАК КоличествоОборот,
|	ТоварыНаСкладахОстаткиИОбороты.КоличествоПриход КАК КоличествоПриход,
|	ТоварыНаСкладахОстаткиИОбороты.КоличествоРасход КАК КоличествоРасход
|ИЗ
|	РегистрНакопления.ТоварыНаСкладах.ОстаткиИОбороты(&НачалоПериода, &КонецПериода, День, ДвиженияИГраницыПериода, ) КАК ТоварыНаСкладахОстаткиИОбороты
|ИТОГИ
|	СУММА(КоличествоНачальныйОстаток),
|	СУММА(КоличествоКонечныйОстаток),
|	СУММА(КоличествоОборот),
|	СУММА(КоличествоПриход),
|	СУММА(КоличествоРасход)
|ПО
|	Номенклатура,
|	Период
|АВТОУПОРЯДОЧИВАНИЕ""
"}
},
{0,
{"Листинг 8.76. Пример получения остатков и оборотов регистра накопления",0,0,"8.76","""ВЫБРАТЬ
|	ТоварыНаСкладахОстаткиИОбороты.Номенклатура КАК Номенклатура,
|	ТоварыНаСкладахОстаткиИОбороты.Период КАК Период,
|	ТоварыНаСкладахОстаткиИОбороты.Склад,
|	ТоварыНаСкладахОстаткиИОбороты.КоличествоНачальныйОстаток КАК КоличествоНачальныйОстаток,
|	ТоварыНаСкладахОстаткиИОбороты.КоличествоОборот КАК КоличествоОборот,
|	ТоварыНаСкладахОстаткиИОбороты.КоличествоПриход КАК КоличествоПриход,
|	ТоварыНаСкладахОстаткиИОбороты.КоличествоРасход КАК КоличествоРасход
|ИЗ
|	РегистрНакопления.ТоварыНаСкладах.ОстаткиИОбороты(&НачалоПериода, &КонецПериода, День, ДвиженияИГраницыПериода, ) КАК ТоварыНаСкладахОстаткиИОбороты
|ИТОГИ
|	СУММА(КоличествоНачальныйОстаток),
|	СУММА(КоличествоОборот),
|	СУММА(КоличествоПриход),
|	СУММА(КоличествоРасход)
|ПО
|	Номенклатура,
|	Период
|АВТОУПОРЯДОЧИВАНИЕ""
"}
},
{0,
{"Листинг 8.77. Пример получения остатков и оборотов регистра накопления",0,0,"8.77","""ВЫБРАТЬ
|	ТоварыНаСкладахОстаткиИОбороты.Номенклатура КАК Номенклатура,
|	ТоварыНаСкладахОстаткиИОбороты.Период КАК Период,
|	ТоварыНаСкладахОстаткиИОбороты.Склад,
|	ТоварыНаСкладахОстаткиИОбороты.КоличествоКонечныйОстаток * ТоварыНаСкладахОстаткиИОбороты.Номенклатура.ЗакупочнаяЦена КАК СуммаКонечныйОстаток,
|	ТоварыНаСкладахОстаткиИОбороты.КоличествоОборот * ТоварыНаСкладахОстаткиИОбороты.Номенклатура.ЗакупочнаяЦена КАК СуммаОборот,
|	ТоварыНаСкладахОстаткиИОбороты.КоличествоПриход * ТоварыНаСкладахОстаткиИОбороты.Номенклатура.ЗакупочнаяЦена КАК СуммаПриход,
|	ТоварыНаСкладахОстаткиИОбороты.КоличествоРасход * ТоварыНаСкладахОстаткиИОбороты.Номенклатура.ЗакупочнаяЦена КАК СуммаРасход
|ИЗ
|	РегистрНакопления.ТоварыНаСкладах.ОстаткиИОбороты(&НачалоПериода, &КонецПериода, День, ДвиженияИГраницыПериода, ) КАК ТоварыНаСкладахОстаткиИОбороты
|ИТОГИ
|	СУММА(СуммаКонечныйОстаток),
|	СУММА(СуммаОборот),
|	СУММА(СуммаПриход),
|	СУММА(СуммаРасход)
|ПО
|	Номенклатура,
|	Период
|АВТОУПОРЯДОЧИВАНИЕ""
"}
},
{0,
{"Листинг 8.78. Поле выборки запроса",0,0,"8.78","ТоварыНаСкладахОстаткиИОбороты.КоличествоКонечныйОстаток * ТоварыНаСкладахОстаткиИОбороты.Номенклатура.ЗакупочнаяЦена КАК СуммаКонечныйОстаток,
"}
},
{0,
{"Листинг 8.79. Пример получения остатков и оборотов регистра накопления",0,0,"8.79","""ВЫБРАТЬ
|	ТоварыНаСкладахОстаткиИОбороты.Номенклатура КАК Номенклатура,
|	ТоварыНаСкладахОстаткиИОбороты.Период КАК Период,
|	ТоварыНаСкладахОстаткиИОбороты.Склад,
|	ТоварыНаСкладахОстаткиИОбороты.КоличествоНачальныйОстаток КАК КоличествоНачальныйОстаток,
|	ТоварыНаСкладахОстаткиИОбороты.КоличествоКонечныйОстаток КАК КоличествоКонечныйОстаток,
|	ТоварыНаСкладахОстаткиИОбороты.КоличествоКонечныйОстаток – ТоварыНаСкладахОстаткиИОбороты.КоличествоНачальныйОстаток КАК Разница
|	ТоварыНаСкладахОстаткиИОбороты.КоличествоКонечныйОстаток * ТоварыНаСкладахОстаткиИОбороты.КоличествоНачальныйОстаток КАК Произведение
|
|ИЗ
|	РегистрНакопления.ТоварыНаСкладах.ОстаткиИОбороты(&НачалоПериода, &КонецПериода, День, ДвиженияИГраницыПериода, ) КАК ТоварыНаСкладахОстаткиИОбороты
|ИТОГИ
|	СУММА(КоличествоНачальныйОстаток),
|	СУММА(КоличествоКонечныйОстаток),
|	СУММА(Разница),
|	 СУММА(Произведение)
|ПО
|	Номенклатура,
|	Период
|АВТОУПОРЯДОЧИВАНИЕ""
"}
},
{0,
{"Листинг 8.80 Установка параметров запроса",0,0,"8.80","Запрос.УстановитьПараметр(""НачалоПериода"", '20050801');
Запрос.УстановитьПараметр(""КонецПериода"", КонецДня('20050831'));
"}
},
{0,
{"Листинг 8.81. Пример получения остатков и оборотов регистра накопления",0,0,"8.81","""ВЫБРАТЬ
|	ТоварыНаСкладахОстаткиИОбороты.Номенклатура КАК Номенклатура,
|	ТоварыНаСкладахОстаткиИОбороты.КоличествоНачальныйОстаток КАК КоличествоНачальныйОстаток,
|	ТоварыНаСкладахОстаткиИОбороты.КоличествоПриход КАК КоличествоПриход,
|	ТоварыНаСкладахОстаткиИОбороты.КоличествоРасход КАК КоличествоРасход,
|	ТоварыНаСкладахОстаткиИОбороты.КоличествоКонечныйОстаток КАК КоличествоКонечныйОстаток,
|	ТоварыНаСкладах.ВидОперации КАК ВидОперации
|ИЗ
|	РегистрНакопления.ТоварыНаСкладах.ОстаткиИОбороты КАК ТоварыНаСкладахОстаткиИОбороты
|	ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.ТоварыНаСкладах КАК ТоварыНаСкладах
|	ПО ТоварыНаСкладахОстаткиИОбороты.Номенклатура = ТоварыНаСкладах.Номенклатура
|ИТОГИ
|	СУММА(КоличествоНачальныйОстаток),
|	СУММА(КоличествоПриход),
|	СУММА(КоличествоРасход),
|	СУММА(КоличествоКонечныйОстаток)
|ПО
|	Номенклатура,
|	ВидОперации""
"}
},
{0,
{"Листинг 8.82. Пример использования отбора в виртуальной таблице",0,0,"8.82","""ВЫБРАТЬ
|	ТоварыНаСкладахОстатки.Номенклатура КАК Номенклатура,
|	ТоварыНаСкладахОстатки.Склад КАК Склад,
|	ТоварыНаСкладахОстатки.КоличествоОстаток КАК КоличествоОстаток
|ИЗ
|	РегистрНакопления.ТоварыНаСкладах.Остатки(&Период, Номенклатура = &НоменклатураОтбора) КАК ТоварыНаСкладахОстатки""
"}
},
{0,
{"Листинг 8.83. Пример неэффективного запроса, использующего виртуальную таблицу остатков",0,0,"8.83","""ВЫБРАТЬ
|	ТоварыНаСкладахОстатки.Номенклатура КАК Номенклатура,
|	ТоварыНаСкладахОстатки.Склад КАК Склад,
|	ТоварыНаСкладахОстатки.КоличествоОстаток КАК КоличествоОстаток
|ИЗ
|	 РегистрНакопления.ТоварыНаСкладах.Остатки(	&Период, ) КАК ТоварыНаСкладахОстатки
|ГДЕ
|	ТоварыНаСкладахОстатки.Номенклатура = &НоменклатураОтбора""
"}
},
{0,
{"Листинг 8.84. Пример получения остатков регистра накопления",0,0,"8.84","""ВЫБРАТЬ
|	ТоварыНаСкладахОстатки.Номенклатура КАК Номенклатура,
|	ТоварыНаСкладахОстатки.Склад КАК Склад,
|	ТоварыНаСкладахОстатки.КоличествоОстаток КАК КоличествоОстаток
|ИЗ
|	РегистрНакопления.ТоварыНаСкладах.Остатки(&Период, Номенклатура В (&МассивНоменклатурныхПозиций)) КАК ТоварыНаСкладахОстатки""
"}
},
{0,
{"Листинг 8.85. Пример получения остатков регистра накопления",0,0,"8.85","""ВЫБРАТЬ
|	ТаблицаДокумента.Номенклатура,
|	СУММА(ТаблицаДокумента.Количество) КАК Количество,
|	ТоварыНаСкладахОстатки.КоличествоОстаток,
|	СУММА(ТаблицаДокумента.Сумма) КАК Сумма
|ИЗ
|	Документ.РеализацияТоваров.Состав КАК ТаблицаДокумента
|	
|	ЛЕВОЕ СОЕДИНЕНИЕ 
|		РегистрНакопления.ТоварыНаСкладах.Остатки(&Момент, Номенклатура В (ВЫБРАТЬ РАЗЛИЧНЫЕ 
|																																РеализацияТоваровТовары.Номенклатура
|																															ИЗ
|																																Документ.РеализацияТоваров.Состав КАК РеализацияТоваровТовары
|																															ГДЕ
|																																РеализацияТоваровТовары.Ссылка = &ТекущийДокумент И Склад = &Склад)) КАК ТоварыНаСкладахОстатки
|	ПО 
|		ТаблицаДокумента.Номенклатура = ТоварыНаСкладахОстатки.Номенклатура
|ГДЕ
|	ТаблицаДокумента.Ссылка = &ТекущийДокумент
|
|СГРУППИРОВАТЬ ПО
|	ТаблицаДокумента.Номенклатура,
|	ТоварыНаСкладахОстатки.КоличествоОстаток""
"}
},
{0,
{"Листинг 8.86. Пример получения остатков регистра накопления",0,0,"8.86","""ВЫБРАТЬ
|	ТоварыНаСкладахОстатки.Номенклатура КАК Номенклатура,
|	ТоварыНаСкладахОстатки.Склад КАК Склад,
|	ТоварыНаСкладахОстатки.КоличествоОстаток КАК КоличествоОстаток
|ИЗ
|	РегистрНакопления.ТоварыНаСкладах.Остатки(&Период, Номенклатура.ЗакупочнаяЦена > &ПороговаяЦена) КАК ТоварыНаСкладахОстатки""
"}
},
{0,
{"Листинг 8.87. Пример получения остатков регистра накопления",0,0,"8.87","""ВЫБРАТЬ
|	ТоварыНаСкладахОстатки.Номенклатура КАК Номенклатура,
|	ТоварыНаСкладахОстатки.Склад КАК Склад,
|	ТоварыНаСкладахОстатки.КоличествоОстаток КАК КоличествоОстаток
|ИЗ
|	РегистрНакопления.ТоварыНаСкладах.Остатки(&Период, Склад = &СкладОтбора) КАК ТоварыНаСкладахОстатки""
"}
},
{0,
{"Листинг 8.88. Пример получения остатков регистра накопления с помощью запроса",0,0,"8.88","""ВЫБРАТЬ
|	ТаблицаДокумента.Номенклатура,
|	СУММА(ТаблицаДокумента.Количество) КАК КоличествоВДокументе,
|	ТоварыНаСкладахОстатки.КоличествоОстаток КАК КоличествоВОстаткеРегистра
|ИЗ
|	Документ.РеализацияТоваров.Состав КАК ТаблицаДокумента
|	
|	ЛЕВОЕ СОЕДИНЕНИЕ 
|			РегистрНакопления.ТоварыНаСкладах.Остатки( , Номенклатура В (ВЫБРАТЬ РАЗЛИЧНЫЕ
|																														РеализацияТоваровТовары.Номенклатура
|																													ИЗ
|																														Документ.РеализацияТоваров.Состав КАК РеализацияТоваровТовары
|																													ГДЕ
|																														РеализацияТоваровТовары.Ссылка = &ТекущийДокумент И Склад = &Склад)) КАК ТоварыНаСкладахОстатки
|	ПО 
|		ТаблицаДокумента.Номенклатура = ТоварыНаСкладахОстатки.Номенклатура
|ГДЕ
|	ТаблицаДокумента.Ссылка = &ТекущийДокумент
|СГРУППИРОВАТЬ ПО
|	ТаблицаДокумента.Номенклатура,
|	ТоварыНаСкладахОстатки.КоличествоОстаток""
"}
},
{0,
{"Листинг 8.89. Обработчик события ПриОткрытии",0,0,"8.89","Процедура ПриОткрытии()
	
	Если РегистрНакопленияСписок.Колонки.Найти(""ВидОперациии"") = Неопределено Тогда
		РегистрНакопленияСписок.Колонки.Добавить(""ВидОперации"", Ложь);
	КонецЕсли;	
	
КонецПроцедуры
"}
},
{0,
{"Листинг 8.90. Обработчик события ПриПолученииДанных",0,0,"8.90","Процедура СправочникСписокПриПолученииДанных(Элемент, ОформленияСтрок)

	ОформлениеСтрокиПоНоменклатуре = Новый Соответствие;
	ОтображаемыеТовары = Новый Массив;

	Для каждого ОформлениеСтроки из ОформленияСтрок Цикл
		Товар = ОформлениеСтроки.ДанныеСтроки.Ссылка;
		
		// Заполнить  массив отображаемых номенклатурных позиций
		ОтображаемыеТовары.Добавить(Товар);
		
		// Заполнить соответствие товара и оформления строки
		ОформлениеСтрокиПоНоменклатуре.Вставить(Товар, ОформлениеСтроки);
	КонецЦикла;
		
	// Сформировать запрос для получения остатков
	ЗапросОстатка = Новый Запрос;
	ЗапросОстатка.Текст = ""ВЫБРАТЬ
	|ТоварыНаСкладахОстатки.Номенклатура,
	|ТоварыНаСкладахОстатки.КоличествоОстаток
	|ИЗ
	|РегистрНакопления.ТоварыНаСкладах.Остатки( , Номенклатура В (&Номенклатура)) КАК ТоварыНаСкладахОстатки"";
				   
	ЗапросОстатка.УстановитьПараметр(""Номенклатура"", ОтображаемыеТовары);
	Выборка = ЗапросОстатка.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		
		// Вывести остаток в строку, найденную в соответствии 
		// по номенклатуре из запроса
		ОформлениеСтрокиПоНоменклатуре.Получить(Выборка.Номенклатура).Ячейки.Остаток.Значение = Выборка.КоличествоОстаток;
		
	КонецЦикла;	
	
КонецПроцедуры	
"}
},
{0,
{"Листинг 8.91. Обработчик события Выбор",0,0,"8.91","Процедура ДеревоНоменклатураВыбор(Элемент, ВыбраннаяСтрока, Колонка, СтандартнаяОбработка)
	
	// Выбрать товары группы с остатками
	Запрос = Новый Запрос;
	Запрос.Текст = ""
	|ВЫБРАТЬ
	|	Товары.Код,
	|	Товары.Ссылка КАК Номенклатура,
	|	ТоварыНаСкладахОстатки.КоличествоОстаток КАК Остаток
	|ИЗ
	|	Справочник.Номенклатура КАК Товары
	|		ЛЕВОЕ СОЕДИНЕНИЕ 
	|			РегистрНакопления.ТоварыНаСкладах.Остатки( , Номенклатура В (ВЫБРАТЬ
	|																														Номенклатура.Ссылка
	|																													ИЗ
	|																														Справочник.Номенклатура КАК Номенклатура
	|																													ГДЕ
	|																														Номенклатура.Родитель = &Родитель И Склад = &Склад)) КАК ТоварыНаСкладахОстатки
	|		ПО Товары.Ссылка = ТоварыНаСкладахОстатки.Номенклатура
	|ГДЕ
	|	Товары.Родитель = &Родитель И (НЕ Товары.ЭтоГруппа)"";
	
	// Установить в качестве параметра выбранную группу
	Запрос.УстановитьПараметр(""Родитель"", ВыбраннаяСтрока);
	Запрос.УстановитьПараметр(""Склад"", Склад);

	Результат = Запрос.Выполнить();

	// Очистить таблицу подбора
	НоменклатураДляПодбора.Очистить();

	// Заполнить таблицу подбора
	Выборка = Результат.Выбрать();
	Пока Выборка.Следующий() Цикл

		НоваяСтрока = НоменклатураДляПодбора.Добавить();
		НоваяСтрока.Код = Выборка.Код;
		НоваяСтрока.Номенклатура = Выборка.Номенклатура;
		НоваяСтрока.Остаток = Выборка.Остаток;
   
	КонецЦикла;

КонецПроцедуры
"}
},
{0,
{"Листинг 8.92. Обработчик события ОбработкаПроведения",0,0,"8.92","Процедура ОбработкаПроведения(Отказ, Режим)
   
	Запрос = Новый Запрос;
	Запрос.Текст = ""ВЫБРАТЬ
	|	ЗаказПокупателяСостав.Номенклатура,
	|	СУММА(ЗаказПокупателяСостав.Количество) КАК Количество,
	|	ЕСТЬNULL(ТоварыНаСкладахОстатки.КоличествоОстаток, 0) КАК Остаток,
	|	ЕСТЬNULL(РезервыНоменклатурыОстатки.КоличествоОстаток, 0) КАК Резерв
	|ИЗ
	|	Документ.ЗаказПокупателя.Состав КАК ЗаказПокупателяСостав
	|
	|	ЛЕВОЕ СОЕДИНЕНИЕ 
	|		РегистрНакопления.ТоварыНаСкладах.Остатки( &Момент, Номенклатура В (ВЫБРАТЬ РАЗЛИЧНЫЕ
	|																																ЗаказПокупателяСостав.Номенклатура
	|																															ИЗ
	|																																Документ.ЗаказПокупателя.Состав КАК ЗаказПокупателяСостав
	|																															ГДЕ
	|																																ЗаказПокупателяСостав.Ссылка = &Ссылка)) КАК ТоварыНаСкладахОстатки  
	|	ПО ЗаказПокупателяСостав.Номенклатура = ТоварыНаСкладахОстатки.Номенклатура
	|
	|	ЛЕВОЕ СОЕДИНЕНИЕ 
	|		РегистрНакопления.РезервыНоменклатуры.Остатки(&Момент, Номенклатура В (ВЫБРАТЬ РАЗЛИЧНЫЕ
	|																																		ЗаказПокупателяСостав.Номенклатура
	|																																	ИЗ
	|																																		Документ.ЗаказПокупателя.Состав КАК ЗаказПокупателяСостав 
	|																																	ГДЕ
	|																																		ЗаказПокупателяСостав.Ссылка = &Ссылка)) КАК РезервыНоменклатурыОстатки 
	|		ПО ЗаказПокупателяСостав.Номенклатура = РезервыНоменклатурыОстатки.Номенклатура
	|ГДЕ
	|	ЗаказПокупателяСостав.Ссылка = &Ссылка
	|
	|СГРУППИРОВАТЬ ПО
	|	ЗаказПокупателяСостав.Номенклатура,
	|	РезервыНоменклатурыОстатки.КоличествоОстаток,
	|	ТоварыНаСкладахОстатки.КоличествоОстаток
	|
	|ДЛЯ ИЗМЕНЕНИЯ
	|	РегистрНакопления.РезервыНоменклатуры.Остатки;
   
	Запрос.УстановитьПараметр(""Ссылка"", Ссылка);
	Запрос.УстановитьПараметр(""Момент"", МоментВремени());
   
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
   
	Пока Выборка.Следующий() Цикл
      
		// Выполнить контроль остатка
		Нехватка =  Выборка.Количество - (Выборка.Остаток - Выборка.Резерв);
		Если  Нехватка > 0  Тогда
			Сообщить(""Нехватка товара "" + СокрЛП(Выборка.Номенклатура) + "": "" + Нехватка);
			Сообщить(""Заказ покупателя "" + Номер + "" от "" + Дата + "" не проводится!"");
			Отказ = Истина;
		КонецЕсли;
      
		Если Не Отказ Тогда

			// Сформировать движения
			Движение = Движения.РезервыНоменклатуры.Добавить();
			Движение.ВидДвижения = ВидДвиженияНакопления.Приход;
			Движение.Период = Дата;
			Движение.Номенклатура = Выборка.Номенклатура;
			Движение.Количество = Выборка.Количество;
		КонецЕсли;
	КонецЦикла;
   
КонецПроцедуры
"}
}
},
{60,
{"Глава 9. Реализация задач бухгалтерского учета",1,0,"",""},
{0,
{"Листинг 9.1. Пример автоматического формирования порядка счета",0,0,"9.1","Процедура ПередЗаписью(Отказ)

	Порядок = ПолучитьПорядокКода();

КонецПроцедуры
"}
},
{0,
{"Листинг 9.2. Сортировка по полю Код в тексте запроса",0,0,"9.2","УПОРЯДОЧИТЬ ПО Код"}
},
{0,
{"Листинг 9.3. Условие для получения данных по счету",0,0,"9.3","Счет = &Счет"}
},
{0,
{"Листинг 9.4. Условие для получения данных по счету и всем субсчетам",0,0,"9.4","Счет В ИЕРАРХИИ(&Счет)"}
},
{0,
{"Листинг 9.5. Фрагмент отчета Карточка",0,0,"9.5","Запрос = Новый Запрос;
Запрос.Текст = 
""ВЫБРАТЬ
|	ДвиженияССубконто.Период КАК Период,
|	ДвиженияССубконто.Регистратор,
|	ПРЕДСТАВЛЕНИЕ(ДвиженияССубконто.Регистратор),
|	ДвиженияССубконто.СчетДт,
|	ДвиженияССубконто.СчетКт,
|	ДвиженияССубконто.Сумма
|ИЗ
|	РегистрБухгалтерии.ОсновнойРегистрБухгалтерии.ДвиженияССубконто(&НачПериода, &КонПериода, Счет В ИЕРАРХИИ (&Счет)) КАК ДвиженияССубконто
|
|УПОРЯДОЧИТЬ ПО
|	Период"";

Запрос.УстановитьПараметр(""КонПериода"", КонПериода);
Запрос.УстановитьПараметр(""НачПериода"", НачПериода);
Запрос.УстановитьПараметр(""Счет"", Счет);

Результат = Запрос.Выполнить();

КодКоррСчета = Счет.Код; 
ОборотДт = 0;
ОборотКт = 0;
	
ВыборкаДетали = Результат.Выбрать();
Пока ВыборкаДетали.Следующий() Цикл
		
	Если Найти(ВыборкаДетали.СчетДт.Код, КодКоррСчета) > 0 Тогда
		ОбластьДетальныхЗаписей.Параметры.СуммаДт = ВыборкаДетали.Сумма;
		ОборотДт = ОборотДт + ВыборкаДетали.Сумма;
	КонецЕсли;
	
	Если Найти(ВыборкаДетали.СчетКт.Код, КодКоррСчета) > 0 Тогда
		ОбластьДетальныхЗаписей.Параметры.СуммаКт = ВыборкаДетали.Сумма;
		ОборотКт = ОборотКт + ВыборкаДетали.Сумма;
	КонецЕсли;
	
КонецЦикла;
"}
},
{0,
{"Листинг 9.6. Фрагмент отчета Карточка",0,0,"9.6","Запрос = Новый Запрос;
Запрос.Текст = 
""ВЫБРАТЬ
|	ДвиженияССубконто.Период КАК Период,
|	ДвиженияССубконто.Регистратор,
|	ПРЕДСТАВЛЕНИЕ(ДвиженияССубконто.Регистратор),
|	ВЫБОР
|		КОГДА ДвиженияССубконто.СчетДт В ИЕРАРХИИ (&Счет) ТОГДА ДвиженияССубконто.Сумма
|		ИНАЧЕ 0
|	КОНЕЦ КАК СуммаДт,
|	ВЫБОР
|		КОГДА ДвиженияССубконто.СчетКт В ИЕРАРХИИ (&Счет) ТОГДА ДвиженияССубконто.Сумма
|		ИНАЧЕ 0
|	КОНЕЦ КАК СуммаКт
|ИЗ
|	РегистрБухгалтерии.ОсновнойРегистрБухгалтерии.ДвиженияССубконто(&НачПериода, &КонПериода, Счет В ИЕРАРХИИ (&Счет)) КАК ДвиженияССубконто
|
|УПОРЯДОЧИТЬ ПО
|	Период
|ИТОГИ
|	СУММА(СуммаДт),
|	СУММА(СуммаКт)
|ПО
|	ОБЩИЕ"";

Запрос.УстановитьПараметр(""КонПериода"", КонПериода);
Запрос.УстановитьПараметр(""НачПериода"", НачПериода);
Запрос.УстановитьПараметр(""Счет"", Счет);

Результат = Запрос.Выполнить();

ВыборкаОбщийИтог = Результат.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);

ВыборкаОбщийИтог.Следующий();		// Общий итог
ВыборкаДетали = ВыборкаОбщийИтог.Выбрать();
Пока ВыборкаДетали.Следующий() Цикл
	//…
КонецЦикла;
"}
},
{0,
{"Листинг 9.7. Пример получения остатка по счету",0,0,"9.7","Процедура ПолучитьОстаток(Кнопка)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	""ВЫБРАТЬ
	|	Остатки.СуммаОстаток
	|ИЗ
	|	РегистрБухгалтерии.ОсновнойРегистрБухгалтерии.Остатки( , Счет.Код = """"1.1"""", , ) КАК Остатки"";
	
	Остатки = Запрос.Выполнить().Выбрать();
	Остатки.Следующий();
	Остаток = Остатки.СуммаОстаток;	

КонецПроцедуры
"}
},
{0,
{"Листинг 9.8. Пример получения остатка по счету",0,0,"9.8","Процедура ПолучитьОстаток(Кнопка)

	Запрос = Новый Запрос;
	Запрос.Текст = 
	""ВЫБРАТЬ
	|	Остатки.СуммаОстаток
	|ИЗ
	|	РегистрБухгалтерии.ОсновнойРегистрБухгалтерии.Остатки( , Счет = &Счет, , ) КАК Остатки"";
	
	Запрос.УстановитьПараметр(""Счет"", ПланыСчетов.ОсновнойПланСчетов.Касса);
	Остатки = Запрос.Выполнить().Выбрать();
	Остатки.Следующий();
	Остаток = Остатки.СуммаОстаток;	

КонецПроцедуры
"}
},
{0,
{"Листинг 9.9. Пример использования свойства ВидСубконто",0,0,"9.9","Для Каждого ВидСубконто Из Счет.ВидыСубконто Цикл
	Вид = ВидСубконто.ВидСубконто;
	
	ТипЗначения = Вид.ТипЗначения;
	Наименование = Вид.Наименование; 
			
	ВведенВКонфигураторе = ВидСубконто.Предопределенное;
	Оборотный = ВидСубконто.ТолькоОбороты;
	Количественный = ВидСубконто.Количественный;
КонецЦикла;
"}
},
{0,
{"Листинг 9.10. Обработчик события ПриИзменении поля ввода ВидСубконто",0,0,"9.10","Процедура ВидСубконтоПриИзменении(Элемент)
		
	ТипСубконто = ВидСубконто.ТипЗначения;
	
	ЭлементыФормы.Субконто.ВыбиратьТип = (ТипСубконто.Типы().Количество() > 1);
	
	Субконто = ТипСубконто.ПривестиЗначение(Субконто);
			
КонецПроцедуры
"}
},
{0,
{"Листинг 9.11. Обработчик события ПриИзменении поля ввода Счет",0,0,"9.11","Процедура СчетПриИзменении(Элемент)

	ЧислоСубконто = Счет.ВидыСубконто.Количество();
	
	Для Сч = 1 По ЧислоСубконто Цикл
		ТипСубконто = Счет.ВидыСубконто[Сч - 1].ВидСубконто.ТипЗначения;
		ЭлементыФормы[""Субконто"" + Сч].ТолькоПросмотр = Ложь;
		ЭлементыФормы[""Субконто"" + Сч].ВыбиратьТип = (ТипСубконто.Типы().Количество() > 1);
		
		Если ТипСубконто.ПривестиЗначение(ДокументОбъект[""Субконто"" + Сч]) <> ДокументОбъект[""Субконто"" + Сч] Тогда
			ДокументОбъект[""Субконто"" + Сч] = ТипСубконто.ПривестиЗначение(ДокументОбъект[""Субконто"" + Сч]);
		КонецЕсли;
	КонецЦикла; 
	
	МаксКоличествоСубконто = Метаданные.ПланыСчетов.ОсновнойПланСчетов.МаксКоличествоСубконто;
	
	Для Сч = (ЧислоСубконто + 1) По МаксКоличествоСубконто Цикл
			
		Если Не ДокументОбъект[""Субконто"" + Сч] = Неопределено Тогда
			ДокументОбъект[""Субконто"" + Сч] = Неопределено;
		КонецЕсли;
		ЭлементыФормы[""Субконто"" + Сч].ТолькоПросмотр = Истина;
	КонецЦикла;
	
КонецПроцедуры
"}
},
{0,
{"Листинг 9.12. Процедура УстановитьВидимостьСубконто",0,0,"9.12","Процедура УстановитьВидимостьСубконто()
	
	Для Ном = 1 по 2 Цикл
		Если (Ном <= Счет.ВидыСубконто.Количество()) И (НЕ Счет.Пустая()) Тогда
			ЭлементыФормы[""НадписьСубконто""+Ном].Заголовок = Строка(Счет.ВидыСубконто[Ном-1].ВидСубконто);
			ЭлементыФормы[""НадписьСубконто""+Ном].Видимость = Истина;
			ЭлементыФормы[""Субконто""+Ном].Видимость = Истина;
		Иначе
			ЭлементыФормы[""НадписьСубконто""+Ном].Видимость = Ложь;
			ЭлементыФормы[""Субконто""+Ном].Видимость = Ложь;
		КонецЕсли;

	КонецЦикла;

КонецПроцедуры
"}
},
{0,
{"Листинг 9.13. Пример программного заполнения субконто и их свойств",0,0,"9.13","СчетТовары = ПланыСчетов.ОсновнойПланСчетов.Товары;
ВидСубконтоСклады = ПланыВидовХарактеристик.ВидыСубконто.Склады;
Если СчетТовары.ВидыСубконто.Найти(ВидСубконтоСклады,""ВидСубконто"") = Неопределено Тогда
	СчетТоварыОбъект = СчетТовары.ПолучитьОбъект();
	
	НовыйВид = СчетТоварыОбъект.ВидыСубконто.Добавить();
	НовыйВид.ВидСубконто = ВидСубконтоСклады;
	НовыйВид.Суммовой = Истина;
	НовыйВид.Количественный = Истина;
		
	СчетТоварыОбъект.Записать();
КонецЕсли;
"}
},
{0,
{"Листинг 9.14. Обработчик события ПередЗаписью",0,0,"9.14","Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	
	Для каждого Проводка Из Движения.ОсновнойРегистрБухгалтерии Цикл
		Проводка.Период = Дата;
		Проводка.Организация = Организация
	КонецЦикла; 
	
КонецПроцедуры
"}
},
{0,
{"Листинг 9.15. Пример процедуры, переключающей активность записей",0,0,"9.15","Процедура ВключитьВыключитьПроводки(Кнопка)
	
	Проводки = Движения.ОсновнойРегистрБухгалтерии;
	КоличествоПроводок = Проводки.Количество();
	Если КоличествоПроводок > 0 Тогда
		Проводки.УстановитьАктивность(НЕ Проводки[0].Активность);	
	КонецЕсли; 
		
КонецПроцедуры
"}
},
{0,
{"Листинг 9.16. Управление активностью записей при установке/снятии пометки удаления документа",0,0,"9.16","Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	
	Проводки = Движения.ОсновнойРегистрБухгалтерии;
	НужноСчитатьНабор = (НЕ Ссылка.Пустая() И НЕ Проводки.Модифицированность() И НЕ Проводки.Выбран());
	
	Если НужноСчитатьНабор Тогда  
		Проводки.Прочитать();
	КонецЕсли; 
	
	КоличествоПроводок = Проводки.Количество();

	Если КоличествоПроводок > 0 Тогда
		ТекущаяАктивностьПроводок = Проводки[0].Активность;
		НужнаяАктивностьПроводок  = НЕ ПометкаУдаления;
		
		Если ТекущаяАктивностьПроводок <> НужнаяАктивностьПроводок Тогда
			Проводки.УстановитьАктивность(НужнаяАктивностьПроводок);
		КонецЕсли;
	КонецЕсли;
		
КонецПроцедуры
"}
},
{0,
{"Листинг 9.17. Процедура ОбработкаПроведения",0,0,"9.17","Процедура ОбработкаПроведения(Отказ, Режим)

	Для Каждого ТекСтрокаТовары Из Товары Цикл

		// регистр ОсновнойРегистрБухгалтерии 
		Движение = Движения.ОсновнойРегистрБухгалтерии.Добавить();
		Движение.СчетДт = ПланыСчетов.ОсновнойПланСчетов.Товары;
		Движение.СчетКт = ПланыСчетов.ОсновнойПланСчетов.Поставщики;
		Движение.Период = Дата;
		Движение.Организация = Организация;
		Движение.Сумма = ТекСтрокаТовары.Сумма;
		Движение.КоличествоДт = ТекСтрокаТовары.Количество;
		Движение.Содержание = ""Покупка товара"";
		Движение.СубконтоДт[ПланыВидовХарактеристик.ВидыСубконто.Номенклатура] = ТекСтрокаТовары.Номенклатура;
		Движение.СубконтоДт[ПланыВидовХарактеристик.ВидыСубконто.Склады] = Склад;
		Движение.СубконтоКт[ПланыВидовХарактеристик.ВидыСубконто.Контрагенты] = Поставщик;
	КонецЦикла;

	// записываем движения регистров
	Движения.ОсновнойРегистрБухгалтерии.Записать();

КонецПроцедуры
"}
},
{0,
{"Листинг 9.18. Пример установки значения субконто",0,0,"9.18","Движение.СубконтоКт[ПланыВидовХарактеристик.ВидыСубконто.Контрагенты] = Поставщик;
"}
},
{0,
{"Листинг 9.19. Пример установки значения субконто",0,0,"9.19","Движение.СубконтоКт.Контрагенты = Поставщик;"}
},
{0,
{"Листинг 9.20. Пример записи движений документа",0,0,"9.20","Приходные = Документы.ПриходнаяНакладная.Выбрать();
	
Пока Приходные.Следующий() Цикл
	ПриходнаяОбъект = Приходные.ПолучитьОбъект();
	Проводки = ПриходнаяОбъект.Движения.ОсновнойРегистрБухгалтерии;

	НоваяПроводка = Проводки.Добавить();
	НоваяПроводка.Период = ПриходнаяОбъект.Дата;
	НоваяПроводка.Организация = ПриходнаяОбъект.Организация;
	НоваяПроводка.СчетДт = ПланыСчетов.ОсновнойПланСчетов.Товары;
	НоваяПроводка.СчетКт = ПланыСчетов.ОсновнойПланСчетов.Поставщики;
	НоваяПроводка.Сумма = ПриходнаяОбъект.Всего;

	Проводки.Записать(Ложь);
КонецЦикла;
"}
},
{0,
{"Листинг 9.21. Пример записи движений документа",0,0,"9.21","Приходные = Документы.ПриходнаяНакладная.Выбрать();
	
Проводки = РегистрыБухгалтерии.ОсновнойРегистрБухгалтерии.СоздатьНаборЗаписей();
	
Пока Приходные.Следующий() Цикл
	ПриходнаяСсылка = Приходные.Ссылка;
	Проводки.Отбор.Регистратор.Установить(ПриходнаяСсылка);

	НоваяПроводка = Проводки.Добавить();
	НоваяПроводка.Период = ПриходнаяСсылка.Дата;
	НоваяПроводка.Организация = ПриходнаяСсылка.Организация;
	НоваяПроводка.СчетДт = ПланыСчетов.ОсновнойПланСчетов.Товары;
	НоваяПроводка.СчетКт = ПланыСчетов.ОсновнойПланСчетов.Поставщики;
	НоваяПроводка.Сумма  = ПриходнаяСсылка.Всего;

	Проводки.Записать(Ложь);
КонецЦикла;
"}
},
{0,
{"Листинг 9.22. Обращение к таблице записей регистра бухгалтерии",0,0,"9.22","ИЗ
	РегистрБухгалтерии.ОсновнойРегистрБухгалтерии
"}
},
{0,
{"Листинг 9.23. Обращение к таблице значений субконто",0,0,"9.23","ИЗ
	РегистрБухгалтерии.ОсновнойРегистрБухгалтерии.Субконто
"}
},
{0,
{"Листинг 9.24. Обращение к таблице Остатки",0,0,"9.24","ИЗ
	РегистрБухгалтерии.ОсновнойРегистрБухгалтерии.Остатки
"}
},
{0,
{"Листинг 9.25. Пример получения остатка товара",0,0,"9.25","""ВЫБРАТЬ
|	Остатки.КоличествоОстаток
|ИЗ
|	РегистрБухгалтерии.ОсновнойРегистрБухгалтерии.Остатки(&Момент, Счет = &СчетТоваров, , Организация = &Организация И Субконто1 = &Номенклатура) КАК Остатки""
"}
},
{0,
{"Листинг 9.26. Пример получения остатков регистра бухгалтерии",0,0,"9.26","""ВЫБРАТЬ
|	Остатки.Счет,
|	Остатки.Валюта,
|	Остатки.ВалютнаяСуммаОстаток,
|	Остатки.СуммаОстаток
|ИЗ
|	РегистрБухгалтерии.ОсновнойРегистрБухгалтерии.Остатки( , Счет.Валютный = ИСТИНА, , ) КАК Остатки""
"}
},
{0,
{"Листинг 9.27. Обращение к таблице Обороты",0,0,"9.27","ИЗ
	РегистрБухгалтерии.ОсновнойРегистрБухгалтерии.Обороты
"}
},
{0,
{"Листинг 9.28. Пример использования таблицы Обороты",0,0,"9.28","""ВЫБРАТЬ
|	Обороты.Субконто1,
|	Обороты.КоличествоОборотДт,
|	Обороты.КоличествоОборотКт
|ИЗ
|	РегистрБухгалтерии.ОсновнойРегистрБухгалтерии.Обороты( , , , Счет = &СчетТоваров, , , , ) КАК Обороты""
"}
},
{0,
{"Листинг 9.29. Пример использования таблицы Обороты",0,0,"9.29","""ВЫБРАТЬ
|	Обороты.Субконто1,
|	Обороты.КорСчет,
|	Обороты.КорСубконто1,
|	Обороты.КоличествоОборотДт
|ИЗ
|	РегистрБухгалтерии.ОсновнойРегистрБухгалтерии.Обороты( , , , Счет = &СчетТоваров, , , , ) КАК Обороты""
"}
},
{0,
{"Листинг 9.30. Пример использования таблицы Обороты",0,0,"9.30","""ВЫБРАТЬ
|	Обороты.Субконто1,
|	Обороты.КоличествоОборотДт,
|	Обороты.КорСубконто1,
|	Обороты.КоличествоКорОборотДт
|ИЗ
|	РегистрБухгалтерии.ОсновнойРегистрБухгалтерии.Обороты( , , , Счет = &СчетТоваров, , , КорСчет = &СчетТоваров, ) КАК Обороты""
"}
},
{0,
{"Листинг 9.31. Обращение к таблице остатков и оборотов",0,0,"9.31","ИЗ
	РегистрБухгалтерии.ОсновнойРегистрБухгалтерии.ОстаткиИОбороты
"}
},
{0,
{"Листинг 9.32. Пример отчета Оборотно-сальдовая ведомость",0,0,"9.32","""ВЫБРАТЬ
|	ОстаткиИОбороты.Счет КАК Счет,
|	ПРЕДСТАВЛЕНИЕ(ОстаткиИОбороты.Счет),
|	ОстаткиИОбороты.СуммаНачальныйОстатокДт КАК НачОстДт,
|	ОстаткиИОбороты.СуммаНачальныйОстатокКт КАК НачОстКт,
|	ОстаткиИОбороты.СуммаОборотДт КАК ОборотДт,
|	ОстаткиИОбороты.СуммаОборотКт КАК ОборотКт,
|	ОстаткиИОбороты.СуммаКонечныйОстатокДт КАК КонОстДт,
|	ОстаткиИОбороты.СуммаКонечныйОстатокКт КАК КонОстКт
|ИЗ
|	РегистрБухгалтерии.ОсновнойРегистрБухгалтерии.ОстаткиИОбороты(&НачПериода, &КонПериода, , , , , ) КАК ОстаткиИОбороты
|
|УПОРЯДОЧИТЬ ПО
|	ОстаткиИОбороты.Счет.Код
|ИТОГИ
|	СУММА(НачОстДт),
|	СУММА(НачОстКт),
|	СУММА(ОборотДт),
|	СУММА(ОборотКт),
|	СУММА(КонОстатокДт),
|	СУММА(КонОстКт)
|ПО
|	Счет ИЕРАРХИЯ""
"}
},
{0,
{"Листинг 9.33. Пример отчета оборотно-сальдовая ведомость по счету товаров",0,0,"9.33","""ВЫБРАТЬ
|	ОстаткиИОбороты.Субконто1 КАК Товар,
|	ОстаткиИОбороты.КоличествоНачальныйОстаток КАК НачОст,
|	ОстаткиИОбороты.КоличествоОборотДт КАК Приход,
|	ОстаткиИОбороты.КоличествоОборотКт КАК Расход,
|	ОстаткиИОбороты.КоличествоКонечныйОстаток КАК КонОст
|ИЗ
|	РегистрБухгалтерии.ОсновнойРегистрБухгалтерии.ОстаткиИОбороты(&НачПериода, &КонПериода, , , Счет = &СчетТоваров, , ) КАК ОстаткиИОбороты""
"}
},
{0,
{"Листинг 9.34. Пример отчета Сводные проводки",0,0,"9.34","""ВЫБРАТЬ
|	ОборотыДтКт.СчетДт,
|	ОборотыДтКт.СчетКт,
|	ОборотыДтКт.СуммаОборот
|ИЗ
|	РегистрБухгалтерии.ОсновнойРегистрБухгалтерии.ОборотыДтКт КАК ОборотыДтКт""
"}
},
{0,
{"Листинг 9.35. Пример запроса, использующего таблицу оборотов Дт Кт",0,0,"9.35","""ВЫБРАТЬ
|	ОборотыДтКт.СубконтоКт1 КАК Покупатель,
|	ОборотыДтКт.СуммаОборот КАК Выручка
|ИЗ
|	РегистрБухгалтерии.ОсновнойРегистрБухгалтерии.ОборотыДтКт(&НачПериода, &КонПериода, , СчетДт = &СчетКассы, , СчетКт = &СчетПокупателей, , ) КАК ОборотыДтКт
|ИТОГИ
|	СУММА(Выручка)
|ПО
|	ОБЩИЕ""
"}
},
{0,
{"Листинг 9.36. Пример запроса, использующего таблицу оборотов",0,0,"9.36","""ВЫБРАТЬ
|	Обороты.КорСубконто1 КАК Покупатель,
|	Обороты.СуммаОборотДт КАК Выручка
|ИЗ
|	РегистрБухгалтерии.ОсновнойРегистрБухгалтерии.Обороты(&НачПериода, &КонПериода, , Счет = &СчетКассы, , , КорСчет = &СчетПокупателей, ) КАК Обороты
|ИТОГИ
|	СУММА(Выручка)
|ПО
|	ОБЩИЕ""
"}
},
{0,
{"Листинг 9.37. Пример запроса, использующего таблицу оборотов",0,0,"9.37","""ВЫБРАТЬ
|	Обороты.КорСубконто1 КАК Покупатель,
|	Обороты.СуммаОборотДт КАК Выручка,
|	Обороты.СуммаОборотКт КАК Возвраты,
|	Обороты.СуммаОборотДт - Обороты.СуммаОборотКт КАК Результат
|ИЗ
|	РегистрБухгалтерии.ОсновнойРегистрБухгалтерии.Обороты(&НачПериода, &КонПериода, , Счет = &СчетКассы, , , КорСчет = &СчетПокупателей, ) КАК Обороты
|ИТОГИ
|	СУММА(Выручка),
|	СУММА(Возвраты),
|	СУММА(Результат)
|ПО
|	ОБЩИЕ""
"}
},
{0,
{"Листинг 9.38. Пример получения остатков регистра бухгалтерии",0,0,"9.38","Запрос = Новый Запрос;
Запрос.Текст = 
""ВЫБРАТЬ
|	Остатки.Субконто1 КАК Товар,
|	Остатки.СуммаОстаток КАК Остаток
|ИЗ
|	РегистрБухгалтерии.ОсновнойРегистрБухгалтерии.Остатки(&Дата, 	, &ВидСубконто) КАК Остатки
|ИТОГИ
|	СУММА(Остаток)
|ПО
|	ОБЩИЕ"";

Запрос.УстановитьПараметр(""ВидСубконто"", ПланыВидовХарактеристик.ВидыСубконто.Номенклатура);
Запрос.УстановитьПараметр(""Дата"", Дата);
"}
},
{0,
{"Листинг 9.39. Пример получения остатков регистра бухгалтерии",0,0,"9.39","Запрос = Новый Запрос;
Запрос.Текст = 
""ВЫБРАТЬ
|	Остатки.Субконто1 КАК Товар,
|	Остатки.Счет,
|	Остатки.СуммаОстаток КАК Остаток
|ИЗ
|	РегистрБухгалтерии.ОсновнойРегистрБухгалтерии.Остатки(&Дата, 	, &ВидСубконто) КАК Остатки
|ИТОГИ
|	СУММА(Остаток)
|ПО
|	ОБЩИЕ,
|	Товар"";

Запрос.УстановитьПараметр(""ВидСубконто"", ПланыВидовХарактеристик.ВидыСубконто.Номенклатура);
Запрос.УстановитьПараметр(""Дата"", Дата);
"}
},
{0,
{"Листинг 9.40. Пример получения остатков регистра бухгалтерии",0,0,"9.40","Запрос = Новый Запрос;
Запрос.Текст = 
""ВЫБРАТЬ
|	Остатки.Субконто1 КАК Товар,
|	Остатки.СуммаОстаток КАК Остаток
|ИЗ
|	РегистрБухгалтерии.ОсновнойРегистрБухгалтерии.Остатки(&Дата, Счет В (&СчетТоваров, &СчетМатериалов)) 
|			КАК Остатки
|ИТОГИ
|	СУММА(Остаток)
|ПО
|	ОБЩИЕ"";

Запрос.УстановитьПараметр(""Дата"", Дата);
Запрос.УстановитьПараметр(""СчетТоваров"", ПланыСчетов.ОсновнойПланСчетов.Товары);
Запрос.УстановитьПараметр(""СчетМатериалов"", ПланыСчетов.ОсновнойПланСчетов.Материалы);

"}
},
{0,
{"Листинг 9.41. Пример получения остатков регистра бухгалтерии",0,0,"9.41","Запрос = Новый Запрос;
Запрос.Текст = 
""ВЫБРАТЬ
|	Остатки.Субконто1 КАК Товар,
|	Остатки.СуммаОстаток КАК Остаток
|ИЗ
|	РегистрБухгалтерии.ОсновнойРегистрБухгалтерии.Остатки(&Дата, Счет В (&СчетТоваров, &СчетМатериалов), &ВидыСубконто) КАК Остатки
|ИТОГИ
|	СУММА(Остаток)
|ПО
|	ОБЩИЕ"";

Запрос.УстановитьПараметр(""Дата"", Дата);
Запрос.УстановитьПараметр(""СчетТоваров"", ПланыСчетов.ОсновнойПланСчетов.Товары);
Запрос.УстановитьПараметр(""СчетМатериалов"", ПланыСчетов.ОсновнойПланСчетов.Материалы);
Запрос.УстановитьПараметр(""ВидыСубконто"", ПланыВидовХарактеристик.ВидыСубконто.Номенклатура);
"}
},
{0,
{"Листинг 9.42. Пример получения остатков регистра бухгалтерии",0,0,"9.42","Запрос = Новый Запрос;
Запрос.Текст = 
""ВЫБРАТЬ
|	ОсновнойРегистрБухгалтерииОстатки.Субконто1 КАК Товар,
|	ОсновнойРегистрБухгалтерииОстатки.Субконто2 КАК Склад,
|	ОсновнойРегистрБухгалтерииОстатки.СуммаОстаток КАК СуммаОстаток
|ИЗ
|	РегистрБухгалтерии.ОсновнойРегистрБухгалтерии.Остатки(&Дата, Счет В (&СчетТоваров, &СчетМатериалов), &ВидыСубконто, ) КАК ОсновнойРегистрБухгалтерииОстатки
|ИТОГИ
|	СУММА(СуммаОстаток)
|ПО
|	ОБЩИЕ,
|	Товар,
|	Склад"";

Запрос.УстановитьПараметр(""Дата"", Дата);
Запрос.УстановитьПараметр(""СчетТоваров"", ПланыСчетов.ОсновнойПланСчетов.Товары);
Запрос.УстановитьПараметр(""СчетМатериалов"", ПланыСчетов.ОсновнойПланСчетов.Материалы);
мВидыСубконто = Новый Массив;
мВидыСубконто.Добавить(ПланыВидовХарактеристик.ВидыСубконто.Номенклатура);
мВидыСубконто.Добавить(ПланыВидовХарактеристик.ВидыСубконто.Склады);
Запрос.УстановитьПараметр(""ВидыСубконто"", мВидыСубконто);
"}
},
{0,
{"Листинг 9.43. Пример получения остатков регистра бухгалтерии",0,0,"9.43","Запрос = Новый Запрос;
Запрос.Текст = 
""ВЫБРАТЬ
|	Остатки.СуммаОстаток
|ИЗ
|	РегистрБухгалтерии.ОсновнойРегистрБухгалтерии.Остатки(&Момент, Счет = &Счет, , ) КАК Остатки"";

Запрос.УстановитьПараметр(""Момент"", Момент);
Запрос.УстановитьПараметр(""Счет"", ПланыСчетов.ОсновнойПланСчетов.Касса);
Результат = Запрос.Выполнить();
Остатки = Результат.Выбрать();
Остатки.Следующий();
Остаток = Остатки.СуммаОстаток; 
"}
},
{0,
{"Листинг 9.44. Первый вариант установки параметра запроса",0,0,"9.44","Момент =  Дата(2006, 1, 1);"}
},
{0,
{"Листинг 9.45. Второй вариант установки параметра запроса",0,0,"9.45","Дата = Дата(2006, 1, 1); 
Момент = КонецДня(Дата);
"}
},
{0,
{"Листинг 9.46. Третий вариант установки параметра запроса",0,0,"9.46","Дата = Дата(2006, 1, 1); 
ОдинДень = 60 * 60 * 24;
Момент = НачалоДня(Дата + ОдинДень);
"}
},
{0,
{"Листинг 9.47. Четвертый вариант установки параметра запроса",0,0,"9.47","Дата = Дата(2006, 1, 1); 
КонДня = КонецДня(Дата); 
Момент = Новый Граница(КонДня, ВидГраницы.Включая);
"}
},
{0,
{"Листинг 9.48. Пример получения оборотов регистра бухгалтерии",0,0,"9.48","Запрос = Новый Запрос;
Запрос.Текст = 
""ВЫБРАТЬ
|	Обороты.СуммаОборот
|ИЗ
|	РегистрБухгалтерии.ОсновнойРегистрБухгалтерии.Обороты(&НачПериода, &КонПериода, , Счет = &Счет, 	, , , ) КАК Обороты"";

Запрос.УстановитьПараметр(""НачПериода"", НачПериода);
Запрос.УстановитьПараметр(""КонПериода"", КонПериода);
Запрос.УстановитьПараметр(""Счет"", ПланыСчетов.ОсновнойПланСчетов.Касса);
Результат = Запрос.Выполнить();
Если Результат.Пустой() Тогда
	Возврат 0;
КонецЕсли; 
Обороты = Результат.Выбрать();
Обороты.Следующий();
Оборот = Обороты.СуммаОборот;
"}
},
{0,
{"Листинг 9.49. Пример установки начала и конца периода при получении оборотов",0,0,"9.49","Дата = Дата(2006, 1, 1);
НачПериода = НачалоДня(Дата);
КонПериода = КонецДня(Дата);
"}
},
{0,
{"Листинг 9.50. Пример отчета Сводные проводки",0,0,"9.50","Запрос = Новый Запрос;
Запрос.Текст = 
""ВЫБРАТЬ
|	ОборотыДтКт.Период КАК Период,
|	ОборотыДтКт.СчетДт,
|	ОборотыДтКт.СчетКт,
|	ОборотыДтКт.СуммаОборот
|ИЗ
|	РегистрБухгалтерии.ОсновнойРегистрБухгалтерии.ОборотыДтКт(&НачПериода, &КонПериода, "" + Периодичность + "", СчетДт В ИЕРАРХИИ (&СчетДт), , СчетКт В ИЕРАРХИИ (&СчетКт), , ) КАК ОборотыДтКт
|
|УПОРЯДОЧИТЬ ПО
|	Период"";

Запрос.УстановитьПараметр(""КонПериода"", КонПериода);
Запрос.УстановитьПараметр(""НачПериода"", НачПериода);
Запрос.УстановитьПараметр(""СчетДт"", СчетДт);
Запрос.УстановитьПараметр(""СчетКт"", СчетКт);
"}
},
{0,
{"Листинг 9.51. Пример получения остатков и оборотов регистра бухгалтерии",0,0,"9.51","Запрос = Новый Запрос;
Запрос.Текст = 
""ВЫБРАТЬ
|	ОстаткиИОбороты.Период КАК Период,
|	ОстаткиИОбороты.СуммаНачальныйОстаток КАК НачОст,
|	ОстаткиИОбороты.СуммаОборотДт КАК ОборотДт,
|	ОстаткиИОбороты.СуммаОборотКт КАК ОборотКт,
|	ОстаткиИОбороты.СуммаКонечныйОстаток КАК КонОст
|ИЗ
|	РегистрБухгалтерии.ОсновнойРегистрБухгалтерии.ОстаткиИОбороты(&НачПериода, &КонПериода, "" + Периодичность + "", "" + Метод + "", Счет В ИЕРАРХИИ(&Счет)) КАК ОстаткиИОбороты
|
|УПОРЯДОЧИТЬ ПО
|	Период"";

Запрос.УстановитьПараметр(""КонПериода"", КонПериода);
Запрос.УстановитьПараметр(""НачПериода"", НачПериода);
Запрос.УстановитьПараметр(""Счет"", Счет);
"}
},
{0,
{"Листинг 9.52. Пример получения остатков регистра бухгалтерии",0,0,"9.52","""ВЫБРАТЬ
|	Остатки.Счет,
|	Остатки.СуммаОстатокДт КАК СвернутыйДт,
|	Остатки.СуммаОстатокКт КАК СвернутыйКт,
|	Остатки.СуммаРазвернутыйОстатокДт КАК РазвернутыйДт,
|	Остатки.СуммаРазвернутыйОстатокКт КАК РазвернутыйКт
|ИЗ
|	РегистрБухгалтерии.ОсновнойРегистрБухгалтерии.Остатки( , Счет = &Счет, , ) КАК Остатки""
"}
},
{0,
{"Листинг 9.53. Пример получения остатков регистра бухгалтерии",0,0,"9.53","""ВЫБРАТЬ
|	Остатки.Счет,
|	Остатки.Субконто1 КАК Контрагент,
|	Остатки.СуммаОстатокДт КАК СвернутыйДт,
|	Остатки.СуммаОстатокКт КАК СвернутыйКт,
|	Остатки.СуммаРазвернутыйОстатокДт КАК РазвернутыйДт,
|	Остатки.СуммаРазвернутыйОстатокКт КАК РазвернутыйКт
|ИЗ
|	РегистрБухгалтерии.ОсновнойРегистрБухгалтерии.Остатки( , Счет = &Счет, , ) КАК Остатки""
"}
},
{0,
{"Листинг 9.54. Пример получения остатков регистра бухгалтерии",0,0,"9.54","""ВЫБРАТЬ
|	Остатки.Счет КАК Счет,
|	Остатки.Субконто1 КАК Контрагент,
|	Остатки.СуммаОстатокДт КАК СвернутыйДт,
|	Остатки.СуммаОстатокКт КАК СвернутыйКт,
|	Остатки.СуммаРазвернутыйОстатокДт КАК РазвернутыйДт,
|	Остатки.СуммаРазвернутыйОстатокКт КАК РазвернутыйКт
|ИЗ
|	РегистрБухгалтерии.ОсновнойРегистрБухгалтерии.Остатки( , Счет = &Счет, , ) КАК Остатки
|ИТОГИ
|	СУММА(СвернутыйДт),
|	СУММА(СвернутыйКт),
|	СУММА(РазвернутыйДт),
|	СУММА(РазвернутыйКт)
|ПО
|	Счет""
"}
},
{0,
{"Листинг 9.55. Выполнение запроса и выгрузка результата запроса в таблицу значений",0,0,"9.55","Таблица = Запрос.Выполнить().Выгрузить();"}
},
{0,
{"Листинг 9.56. Получение остатков с помощью запроса",0,0,"9.56","Момент = Новый Граница(КонецДня(Дата), ВидГраницы.Включая);
СчетТоваров = ПланыСчетов.ОсновнойПланСчетов.Товары;

Запрос = Новый Запрос;
Запрос.Текст = 
""ВЫБРАТЬ
|	Остатки.КоличествоОстатокДт
|ИЗ
|	РегистрБухгалтерии.ОсновнойРегистрБухгалтерии.Остатки(&Момент, Счет = &Счет, , Субконто1 = &Субконто1 И Организация = &Организация) КАК Остатки"";

Запрос.УстановитьПараметр(""Момент"", Момент);
Запрос.УстановитьПараметр(""Счет"", СчетТоваров);
Запрос.УстановитьПараметр(""Субконто1"", Товар);
Запрос.УстановитьПараметр(""Организация"", Организация);
Результат = Запрос.Выполнить();
Остатки = Результат.Выбрать();
Остатки.Следующий();
ОстатокТовара = Остатки.КоличествоОстатокДт;
"}
},
{0,
{"Листинг 9.57. Получение остатков с помощью метода Остатки()",0,0,"9.57","Момент = Новый Граница(КонецДня(Дата), ВидГраницы.Включая);
СчетТоваров = ПланыСчетов.ОсновнойПланСчетов.Товары;
	
Регистр = РегистрыБухгалтерии.ОсновнойРегистрБухгалтерии;
Отбор = Новый Структура(""Счет, Субконто1, Организация"", СчетТоваров, Товар, Организация);

ТаблицаРезультат = Регистр.Остатки(Момент, ,Отбор, """" , ""Количество"");
ОстатокТовара = ТаблицаРезультат.Итог(""КоличествоОстатокДт"");
"}
},
{0,
{"Листинг 9.58. Пример получения остатков регистра бухгалтерии",0,0,"9.58","Момент = Новый Граница(КонецДня(Дата), ВидГраницы.Включая);
СчетТоваров = ПланыСчетов.ОсновнойПланСчетов.Товары;
Регистр = РегистрыБухгалтерии.ОсновнойРегистрБухгалтерии;
Отбор = Новый Структура(""Счет, Организация"", СчетТоваров, Организация);
ТаблицаРезультат = Регистр.Остатки(Момент, , Отбор, ""Субконто1, Субконто2"", ""Количество, Сумма"");
"}
},
{0,
{"Листинг 9.59. Пример получения остатков регистра бухгалтерии",0,0,"9.59","Момент = Новый Граница(КонецДня(Дата), ВидГраницы.Включая);
СчетТоваров = ПланыСчетов.ОсновнойПланСчетов.Товары;
Запрос = Новый Запрос;
Запрос.Текст = 
""ВЫБРАТЬ
|	Остатки.Субконто1,
|	Остатки.Субконто2,
|	Остатки.КоличествоОстатокДт,
|	Остатки.КоличествоОстатокКт,
|	Остатки.СуммаОстатокДт,
|	Остатки.СуммаОстатокКт
|ИЗ
|	РегистрБухгалтерии.ОсновнойРегистрБухгалтерии.Остатки(&Момент, Счет = &Счет, , Организация = &Организация) КАК Остатки"";

Запрос.УстановитьПараметр(""Момент"", Момент);
Запрос.УстановитьПараметр(""Счет"", СчетТоваров);
Запрос.УстановитьПараметр(""Организация"", Организация);
Результат = Запрос.Выполнить();
ТаблицаРезультат = Результат.Выгрузить();
"}
},
{0,
{"Листинг 9.60. Пример использования метода УстановитьПериодРассчитанныхИтогов()",0,0,"9.60","РегистрыБухгалтерии.ОсновнойРегистрБухгалтерии.УстановитьПериодРассчитанныхИтогов(Дата);
"}
}
},
{22,
{"Глава 10. Реализация сложных периодических расчетов",1,0,"",""},
{0,
{"Листинг 10.1. Вычисление количества календарных дней фактического периода действия",0,0,"10.1","мДлинаСуток = 24 * 60 * 60;

Выборка = РегистрыРасчета.ОсновныеНачисленияРегл.ВыбратьПоРегистратору(Ссылка);

Пока Выборка.Следующий() Цикл
	Запись = Выборка.ПолучитьЗапись();
	ФактическийПериод = Запись.ФактическийПериодДействия;
	КоличествоДней = 0;

	Для Каждого Интервал из ФактическийПериод Цикл
		КоличествоДней = КоличествоДней + Окр((КонецДня(Интервал.ДатаОкончания) - Интервал.ДатаНачала + 1) / мДлинаСуток, 0, РежимОкругления.Окр15как20);
	КонецЦикла;

	Сообщить(""Количество дней фактического периода для строки № "" + Запись.НомерСтроки + "" : "" + КоличествоДней);
КонецЦикла;
"}
},
{0,
{"Листинг 10.2. Получение количества календарных дней фактического периода действия запросом",0,0,"10.2","Запрос = Новый Запрос;
Запрос.Текст = ""
|ВЫБРАТЬ
|	ФактическийПериод.НомерСтроки,
|	СУММА(РАЗНОСТЬДАТ(ФактическийПериод.ПериодДействияНачало, КОНЕЦПЕРИОДА(ФактическийПериод.ПериодДействияКонец, ДЕНЬ), ДЕНЬ)) + 1  КАК КоличествоДней
|ИЗ
|	РегистрРасчета.ОсновныеНачисленияРегл.ФактическийПериодДействия(Регистратор = &Регистратор) КАК ФактическийПериод
|
|СГРУППИРОВАТЬ ПО
|	ФактическийПериод.НомерСтроки"";

Запрос.УстановитьПараметр(""Регистратор"", Ссылка);
Выборка = Запрос.Выполнить().Выбрать();

Пока Выборка.Следующий() Цикл
	Сообщить(""Количество дней фактического периода для строки № "" + Выборка.НомерСтроки + "" : "" + Выборка.КоличествоДней);
КонецЦикла;
"}
},
{0,
{"Листинг 10.3. Получение данных графика",0,0,"10.3","Менеджер = РегистрыРасчета.ОсновныеНачисленияРегл;
Отбор = Новый Структура(""Регистратор"", Ссылка);
ДанныеГрафика = Менеджер.ПолучитьДанныеГрафика(Отбор, ВидПериодаРегистраРасчета.ФактическийПериодДействия);

Для Каждого Строка из ДанныеГрафика Цикл
	Сообщить(""Данные графика по фактическому периоду для строки № "" + Строка.LineNumber + "" : "" + Строка.Значение);	
КонецЦикла;	
"}
},
{0,
{"Листинг 10.4. Получение данных графика запросом",0,0,"10.4","Запрос=Новый Запрос;
Запрос.Текст=""
|ВЫБРАТЬ
|	ДанныеГрафика.НомерСтроки,
|	ДанныеГрафика.ЗначениеФактическийПериодДействия КАК Данные
|ИЗ
|	РегистрРасчета.ОсновныеНачисленияРегл.ДанныеГрафика(Регистратор = &Регистратор) КАК ДанныеГрафика"";
Запрос.УстановитьПараметр(""Регистратор"", Ссылка);
Выборка=Запрос.Выполнить().Выбрать();

Пока Выборка.Следующий() Цикл
	Сообщить(""Данные графика по фактическому периоду для строки № "" + Выборка.НомерСтроки + "" : "" + Выборка.Данные);	
КонецЦикла;
"}
},
{0,
{"Листинг 10.5. Получение дополнения",0,0,"10.5","// Получить набор записей текущего документа
НаборЗаписей=РегистрыРасчета.ОсновныеНачисленияРегл.СоздатьНаборЗаписей();
НаборЗаписей.Отбор.Регистратор.Установить(Ссылка, Истина);
НаборЗаписей.Прочитать();

// Получить таблицу сторно-записей для набора записей текущего документа
ТаблицаСторно = НаборЗаписей.ПолучитьДополнение();

// Сформировать сторно-записи в регистре расчета
Для Каждого СтрокаСторно из ТаблицаСторно Цикл
	Запись = Движения.ОсновныеНачисленияРегл.Добавить();
	Запись.ВидРасчета = СтрокаСторно.ВидРасчета;
	Запись.ПериодРегистрации = СтрокаСторно.ПериодРегистрацииСторно;
	Запись.ПериодДействияНачало = СтрокаСторно.ПериодДействияНачалоСторно;
	Запись.ПериодДействияКонец = СтрокаСторно.ПериодДействияКонецСторно;
		
	// Заполнить измерения и реквизиты записи
	//...
		
	Запись.Сторно = Истина;

КонецЦикла;
"}
},
{0,
{"Листинг 10.6. Получение таблицы базы",0,0,"10.6","// Получитье менеджер регистра расчета
Менеджер = РегистрыРасчета.ДополнительныеНачисленияРегл;

// Сформировать отбор по регистратору
Отбор = Новый Структура(""Регистратор"", Ссылка);

// Сформировать массив ресурсов
Ресурсы = Новый Массив(2);
Ресурсы[0] = ""ОсновныеНачисленияРегл.Результат, ДополнительныеНачисленияРегл.Результат"";

// Сформировать структуру измерений
Измерения = Новый Структура(""ФизЛицо, Организация"");
Измерения.ФизЛицо = ""ОсновныеНачисленияРегл.ФизЛицо, ДополнительныеНачисленияРегл.ФизЛицо"";
Измерения.Организация = ""ОсновныеНачисленияРегл.Организация, ДополнительныеНачисленияРегл.Организация"";

// Сформировать массив разрезов
Разрезы = Новый Массив(2);
Разрезы[0] = ""ОсновныеНачисленияРегл.Подразделение, ДополнительныеНачисленияРегл.Подразделение"";
Разрезы[1] = ""ОсновныеНачисленияРегл.СтатьяЗатрат, ДополнительныеНачисленияРегл.СтатьяЗатрат"";

// Получить таблицу базы
ТаблицаБазы = Менеджер.ПолучитьБазу(Отбор, Ресурсы, Измерения, Разрезы);	
"}
},
{0,
{"Листинг 10.7. Отчет по базовым начислениям",0,0,"10.7","Запрос = Новый Запрос;
Запрос.Текст = ""
|ВЫБРАТЬ
|	База.ПериодРегистрацииРазрез КАК ПериодРегистрацииРазрез,
|	База.ВидРасчетаРазрез,
|	СУММА(База.РезультатБаза) КАК РезультатБаза
|ИЗ
|	РегистрРасчета.ДополнительныеНачисленияРегл.БазаОсновныеНачисленияРегл(&Измерения, &Измерения, &Разрезы, Регистратор = &Регистратор И НомерСтроки = &НомерСтроки) КАК База
|
|СГРУППИРОВАТЬ ПО
|	База.ПериодРегистрацииРазрез,
|	База.ВидРасчетаРазрез
|ИТОГИ
|	СУММА(РезультатБаза)
|	ПО
|		ОБЩИЕ,
|		ПериодРегистрацииРазрез"";

// Сформировать массив измерений основного и базового регистров
// (названия измерений совпадают, поэтому используется один массив)
Измерения = Новый Массив(2);
Измерения[0] = ""ФизЛицо"";
Измерения[1] = ""Организация"";

// Сформировать массив разрезов
Разрезы = Новый Массив(2);
Разрезы[0] = ""ПериодРегистрации"";
Разрезы[1] = ""ВидРасчета"";

// Передать параметры в запрос
Запрос.УстановитьПараметр(""Измерения"", Измерения);
Запрос.УстановитьПараметр(""Разрезы"", Разрезы);

// Запрос строится по конкретной записи документа
// с номером ТекущийНомерСтроки
Запрос.УстановитьПараметр(""Регистратор"", Ссылка);
Запрос.УстановитьПараметр(""НомерСтроки"", ВыбранныйНомерСтроки);

Результат = Запрос.Выполнить();		
"}
},
{0,
{"Листинг 10.8. Формирование записей регистра расчета",0,0,"10.8","// Процедура добавляет запись в регистр основных начислений
Процедура ДобавитьСтрокуОсновныхНачислений(ДанныеСтроки, НаборЗаписей)

	Движение = НаборЗаписей.Добавить();

	// Предопределенные поля
	Движение.ПериодРегистрации = ПериодРегистрации;
	Движение.ПериодДействияНачало = ДанныеСтроки.ДатаНачало;
	Движение.ПериодДействияКонец = ДанныеСтроки.ДатаКонец;
	Движение.ВидРасчета = ДанныеСтроки.ВидРасчета;
	Движение.Сторно= ДанныеСтроки.Сторно;

	// Измерения
	Движение.ФизЛицо = ДанныеСтроки.ФизЛицо;
	Движение.Организация= Организация;

	// Ресурсы
	Движение.Результат= ДанныеСтроки.Результат;

	// Реквизиты
	Движение.ГрафикРаботы= ДанныеСтроки.ФизЛицо.ГрафикРаботы;
	Движение.Размер = ДанныеСтроки.Размер;
	Движение.ВидУчетаВремени = ДанныеСтроки.ВидРасчета.ВидУчетаВремени;
	Движение.Подразделение= ДанныеСтроки.Подразделение;
	Движение.СтатьяЗатрат= ДанныеСтроки.ВидРасчета.СтатьяЗатрат;

КонецПроцедуры  //ДобавитьСтрокуОсновныхНачислений

// Обработка проведения
Процедура ОбработкаПроведения(Отказ)

	// Сформировать запрос по табличной части при помощи 
	// функции общего модуля
	ВыборкаОсновныеНачисления = СформироватьЗапросПоТабличнойЧасти(ЭтотОбъект, ""ОсновныеНачисления"").Выбрать();

	// По каждой строке табличной части сформировать запись в регистр
	Пока ВыборкаОсновныеНачисления.Следующий() Цикл
		ДобавитьСтрокуОсновныхНачислений(ВыборкаОсновныеНачисления, Движения.ОсновныеНачисленияРегл);
	КонецЦикла;

КонецПроцедуры  // ОбработкаПроведения
"}
},
{0,
{"Листинг 10.9. Формирование набора записей регистра расчета",0,0,"10.9","Процедура РассчитатьОсновныеНачисления() Экспорт

	// Расчет записей выполняется в транзакции
	НачатьТранзакцию();

	// Создать набор записей регистра расчета
	НаборОсновныеНачисления = РегистрыРасчета.ОсновныеНачисленияРегл.СоздатьНаборЗаписей();
	НаборОсновныеНачисления.Отбор.Регистратор.Значение = Ссылка;
	ВыборкаОсновныеНачисления = СформироватьЗапросПоТабличнойЧасти(ЭтотОбъект, ""ОсновныеНачисления"").Выбрать();
	Пока ВыборкаОсновныеНачисления.Следующий() Цикл
		ДобавитьСтрокуОсновныхНачислений(ВыборкаОсновныеНачисления, НаборОсновныеНачисления);
	КонецЦикла;

	// Расчет записей набора
	//.....
	ЗафиксироватьТранзакцию();
	
КонецПроцедуры // РассчитатьОсновныеНачисления	
"}
},
{0,
{"Листинг 10.10. Добавление сторно-записей",0,0,"10.10","// Добавить сторно-записи в набор и в табличную часть
Процедура ДобавитьСтрокуСторноОсновныхНачислений(ДанныеСтроки, НаборЗаписей, ТабличнаяЧасть = Неопределено)

	Движение = НаборЗаписей.Добавить();

	// Предопределенные поля
	Движение.ПериодРегистрации = ДанныеСтроки.ПериодРегистрацииСторно;
	Движение.ПериодДействияНачало = ДанныеСтроки.ПериодДействияНачалоСторно;
	Движение.ПериодДействияКонец = ДанныеСтроки.ПериодДействияКонецСторно;
	Движение.ВидРасчета = ДанныеСтроки.ВидРасчета;
	Движение.Сторно= Истина;

	// Измерения
	Движение.ФизЛицо = ДанныеСтроки.ФизЛицо;
	Движение.Организация= ДанныеСтроки.Организация;

	// Реквизиты
	Движение.ГрафикРаботы= ДанныеСтроки.ГрафикРаботы;
	Движение.Размер = ДанныеСтроки.Размер;
	Движение.ВидУчетаВремени = ДанныеСтроки.ВидУчетаВремени;
	Движение.Подразделение= ДанныеСтроки.Подразделение;
	Движение.СтатьяЗатрат= ДанныеСтроки.СтатьяЗатрат;

	Если Не ТабличнаяЧасть = Неопределено Тогда

		НоваяСтрока = ТабличнаяЧасть.Добавить();
		НоваяСтрока.ФизЛицо = ДанныеСтроки.ФизЛицо;
		НоваяСтрока.ВидРасчета = ДанныеСтроки.ВидРасчета;
		НоваяСтрока.ДатаНачало = ДанныеСтроки.ПериодДействияНачалоСторно;
		НоваяСтрока.ДатаКонец = ДанныеСтроки.ПериодДействияКонецСторно;
		НоваяСтрока.Размер = ДанныеСтроки.Размер;
		НоваяСтрока.Подразделение = ДанныеСтроки.Подразделение;
		НоваяСтрока.Сторно = Истина;
	КонецЕсли;

КонецПроцедуры  // ДобавитьСтрокуСторноОсновныхНачислений

//Процедура расчета основных начислений
Процедура РассчитатьОсновныеНачисления() Экспорт

	НачатьТранзакцию();

	// Сформировать набор записей
	//………

	// Сформировать таблицу сторно-записей
	ТаблицаСторно = НаборОсновныеНачисления.ПолучитьДополнение();

	// Добавить сторно-записи в набор
	Для Каждого СтрокаСторно из ТаблицаСторно Цикл
		ДобавитьСтрокуСторноОсновныхНачислений(СтрокаСторно, НаборОсновныеНачисления, ОсновныеНачисления);
	КонецЦикла;
	
	ЗафиксироватьТранзакцию();

КонецПроцедуры // РассчитатьОсновныеНачисления
"}
},
{0,
{"Листинг 10.11. Пример процедуры РассчитатьОсновныеНачисления",0,0,"10.11","Процедура РассчитатьОсновныеНачисления() Экспорт
	
	// Расчет записей выполняется в транзакции
	НачатьТранзакцию();


	// Сформировать набор и добавить сторно-записи
	//… … … … …
	
	// Передать набор записей в процедуру общего модуля для расчета
	РассчитатьЗаписиРегистраРасчета(""ОсновныеНачисленияРегл"", НаборОсновныеНачисления, ОсновныеНачисления);

	// Удалить движения по регистру
	НаборОсновныеНачисления.Очистить();
	НаборОсновныеНачисления.Записать();

	ЗафиксироватьТранзакцию();

КонецПроцедуры // РассчитатьОсновныеНачисления
"}
},
{0,
{"Листинг 10.12. Пример расчета записей регистра",0,0,"10.12","Процедура РассчитатьЗаписиРегистраРасчета(ИмяРегистра, НаборЗаписей, ТабличнаяЧасть = Неопределено) Экспорт

	// Первоначальная запись набора с формированием фактического
	// периода действия
	НаборЗаписей.Записать(Истина, Ложь);

	// Расчет записей
	//...................

КонецПроцедуры
"}
},
{0,
{"Листинг 10.13. Расчет записей по приоритету видов расчета",0,0,"10.13","Процедура РассчитатьЗаписиРегистраРасчета(ИмяРегистра, НаборЗаписей, ТабличнаяЧасть = Неопределено) Экспорт

	НаборЗаписей.Записать(Истина, Ложь);

// Определить название плана видов расчета для запроса
	ИмяПланаВидовРасчета = Метаданные.РегистрыРасчета[ИмяРегистра].ПланВидовРасчета.Имя;

	// Получить массив видов расчета из набора записей
	ТаблицаВидовРасчета = НаборЗаписей.Выгрузить();
	ТаблицаВидовРасчета.Свернуть(""ВидРасчета"");
	МассивВидовРасчета = ТаблицаВидовРасчета.ВыгрузитьКолонку(""ВидРасчета"");

	// Запрос по приоритетам видов расчета
	Запрос = Новый Запрос;

	Запрос.Текст = ""
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Приоритет 
	|ИЗ
	|	ПланВидовРасчета."" + ИмяПланаВидовРасчета + "" КАК "" + ИмяПланаВидовРасчета + ""
	|ГДЕ 
	|	Ссылка В (&МассивВидовРасчета)
	|УПОРЯДОЧИТЬ ПО
	|	"" + ИмяПланаВидовРасчета + "".Приоритет
	|ИТОГИ ПО 
	|	Приоритет"";

	Запрос.УстановитьПараметр(""МассивВидовРасчета"", МассивВидовРасчета);
	ВыборкаПриоритетов = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);

	// Для каждого значения приоритета выполнить расчет записей
	Пока ВыборкаПриоритетов.Следующий() Цикл
		РассчитатьНаборЗаписей(НаборЗаписей, ВыборкаПриоритетов.Приоритет, ТабличнаяЧасть);

		// Записать набор в регистр для расчета записей следующего 
		// приоритета, фактический период действия не пересчитывается
		НаборЗаписей.Записать(Истина, Истина);
	КонецЦикла;
	
КонецПроцедуры
"}
},
{0,
{"Листинг 10.14. Расчет набора записей одного приоритета",0,0,"10.14","Процедура РассчитатьНаборЗаписей(НаборЗаписей, Приоритет, ТабличнаяЧасть = Неопределено)

	Для каждого Запись из НаборЗаписей Цикл
		Если Запись.ВидРасчета.Приоритет = Приоритет Тогда

			// Получить данные для расчета записи
			ДанныеДляРасчета = ПолучитьДанныеДляРасчета(Запись);

			// Вызвать процедуру расчета записи
			РассчитатьЗапись(Запись, ДанныеДляРасчета);

			// Возвратить результат расчета в табличную часть документа
			Если Не ТабличнаяЧасть = Неопределено Тогда
				СтрокаТабличнойЧасти = ТабличнаяЧасть.Получить(Запись.НомерСтроки-1);
				СтрокаТабличнойЧасти.Результат = Запись.Результат;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;

КонецПроцедуры
"}
},
{0,
{"Листинг 10.15. Получение данных для 3-х видов расчета",0,0,"10.15","Функция ПолучитьДанныеДляРасчета(Запись)

	СпособРасчета = Запись.ВидРасчета.СпособРасчета;
	СтруктураДанных = Новый Структура;
	Если СпособРасчета = Перечисления.СпособыРасчета.ПоМесячнойСтавке Тогда

		// Получить данные графика
		Запрос = Новый Запрос(""
		|ВЫБРАТЬ
		|	ДанныеГрафика.ЗначениеФактическийПериодДействия КАК ГрафикФакт,
		|	ДанныеГрафика.ЗначениеПериодДействия КАК ГрафикНорма
		|ИЗ
		|	РегистрРасчета.ОсновныеНачисленияРегл.ДанныеГрафика(Регистратор = &Регистратор И НомерСтроки = &НомерСтроки) КАК ДанныеГрафика"");

		Запрос.УстановитьПараметр(""Регистратор"", Запись.Регистратор);
		Запрос.УстановитьПараметр(""НомерСтроки"", Запись.НомерСтроки);

		Выборка = Запрос.Выполнить().Выбрать();

		Если Выборка.Следующий() Тогда
			СтруктураДанных.Вставить(""ОтработаноВремени"", Выборка.ГрафикФакт);
			СтруктураДанных.Вставить(""НормаВремени"", Выборка.ГрафикНорма);
		Иначе
			СтруктураДанных.Вставить(""ОтработаноВремени"", 0);
			СтруктураДанных.Вставить(""НормаВремени"", 0);
		КонецЕсли;

	ИначеЕсли 
		СпособРасчета = Перечисления.СпособыРасчета.ПроцентомОтБазы 	Тогда

		Запрос = Новый Запрос(""
		|ВЫБРАТЬ
		|	База.РезультатБаза
		|ИЗ
		|	РегистрРасчета.ОсновныеНачисленияРегл.БазаОсновныеНачисленияРегл(&Измерения, &Измерения, , Регистратор = &Регистратор И НомерСтроки = &НомерСтроки) КАК База"");

		Измерения = Новый Массив(2);
		Измерения[0] = ""ФизЛицо"";
		Измерения[1] = ""Организация"";

		Запрос.УстановитьПараметр(""Регистратор"", Запись.Регистратор);
		Запрос.УстановитьПараметр(""НомерСтроки"", Запись.НомерСтроки);
		Запрос.УстановитьПараметр(""Измерения"", Измерения);

		Выборка = Запрос.Выполнить().Выбрать();

		Если Выборка.Следующий() Тогда
			СтруктураДанных.Вставить(""База"", Выборка.РезультатБаза);
		Иначе
			СтруктураДанных.Вставить(""База"", 0);
		КонецЕсли;

	ИначеЕсли 
		СпособРасчета = Перечисления.СпособыРасчета.ПоСдельнойВыработке Тогда

		// Получить данные регистра накопления
		// фактическая выработка за период действия записи
		Запрос = Новый Запрос(""
		|ВЫБРАТЬ
		|	СУММА(СдельнаяВыработкаОбороты.ВыработкаОборот) КАК ВыработкаОборот
		|ИЗ
		|	РегистрНакопления.СдельнаяВыработка.Обороты(&ДатаНачало, &ДатаКонец,  , Организация = &Организация И ФизЛицо = &ФизЛицо) КАК СдельнаяВыработкаОбороты"");

		Запрос.УстановитьПараметр(""ДатаНачало"", НачалоДня(Запись.ПериодДействияНачало));
		Запрос.УстановитьПараметр(""ДатаКонец"", КонецДня(Запись.ПериодДействияКонец));
		Запрос.УстановитьПараметр(""ФизЛицо"", Запись.ФизЛицо);
		Запрос.УстановитьПараметр(""Организация"", Запись.Организация);

		Выборка = Запрос.Выполнить().Выбрать();

		Если Выборка.Следующий() Тогда
			СтруктураДанных.Вставить(""Выработка"", Выборка.ВыработкаОборот);
		Иначе
			СтруктураДанных.Вставить(""Выработка"", 0);
		КонецЕсли;

	КонецЕсли;

	Возврат СтруктураДанных;

КонецФункции //ПолучитьДанныеДляРасчета
"}
},
{0,
{"Листинг 10.16. Процедура расчета записей",0,0,"10.16","Процедура РассчитатьЗапись(Запись, ДанныеДляРасчета)

	СпособРасчета = Запись.ВидРасчета.СпособРасчета;
	Если СпособРасчета = Перечисления.СпособыРасчета.ПоМесячнойСтавке Тогда
		Если Не ДанныеДляРасчета.НормаВремени = 0 Тогда 
			Результат = Запись.Размер * ДанныеДляРасчета.ОтработаноВремени / ДанныеДляРасчета.НормаВремени;
		Иначе
			Результат = 0;
		КонецЕсли;

	ИначеЕсли 
		СпособРасчета = Перечисления.СпособыРасчета.ПроцентомОтБазы Тогда
		Результат = Запись.Размер * ДанныеДляРасчета.База / 100;

	ИначеЕсли 
	СпособРасчета = Перечисления.СпособыРасчета.ФиксированнойСуммой Тогда
		Результат = Запись.Размер;

	ИначеЕсли 
	СпособРасчета = Перечисления.СпособыРасчета.ПоСдельнойВыработке Тогда
		Результат = ДанныеДляРасчета.Выработка;
	КонецЕсли;

	Запись.Результат = Результат * ?(Запись.Сторно, -1, 1); 

КонецПроцедуры //Рассчитать запись
"}
},
{0,
{"Листинг 10.17. Формирование записей перерасчета",0,0,"10.17","Процедура СформироватьЗаписиПерерасчета()

	// Запрос по записям регистра расчета
	Запрос = Новый Запрос(""
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	СдельнаяВыработка.ФизЛицо,
	|	СдельнаяВыработка.Организация,
	|	ОсновныеНачисленияРегл.Регистратор,
	|	ОсновныеНачисленияРегл.ВидРасчета
	|ИЗ
	|	РегистрНакопления.СдельнаяВыработка КАК СдельнаяВыработка
	|
	|	ЛЕВОЕ СОЕДИНЕНИЕ 
	|		РегистрРасчета.ОсновныеНачисленияРегл КАК ОсновныеНачисленияРегл
	|	ПО СдельнаяВыработка.ФизЛицо = ОсновныеНачисленияРегл.ФизЛицо И СдельнаяВыработка.Организация = ОсновныеНачисленияРегл.Организация И (СдельнаяВыработка.Период МЕЖДУ ОсновныеНачисленияРегл.ПериодДействияНачало И ОсновныеНачисленияРегл.ПериодДействияКонец)
	|
	|ГДЕ
	|	ОсновныеНачисленияРегл.ВидРасчета = &ВидРасчета И СдельнаяВыработка.Регистратор = &Регистратор
	|ИТОГИ ПО
	|	Регистратор"");

	Запрос.УстановитьПараметр(""ВидРасчета"", ПланыВидовРасчета.ОсновныеНачисления.Сдельный);
	Запрос.УстановитьПараметр(""Регистратор"", Ссылка);

	Выборка = Запрос.Выполнить().Выбрать();

	// Получить объект ПерерасчетМенеджер
	Перерасчет = РегистрыРасчета.ОсновныеНачисленияРегл.Перерасчеты.ПерерасчетОсновныхНачислений;

	ВыборкаДокументов = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);

	Пока ВыборкаДокументов.Следующий() Цикл

		// Создать набор записей
		НаборЗаписей = Перерасчет.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.ОбъектПерерасчета.Значение = ВыборкаДокументов.Регистратор;
		Выборка = ВыборкаДокументов.Выбрать();
		
		// Создать записи перерасчета
		Пока Выборка.Следующий() Цикл
			Запись = НаборЗаписей.Добавить();
			Запись.ВидРасчета = Выборка.ВидРасчета;
			Запись.Организация = Выборка.Организация;
			Запись.ФизЛицо = Выборка.ФизЛицо;
		КонецЦикла;	

		// Записать в таблицу без замещения
		НаборЗаписей.Записать(Ложь);
	КонецЦикла;

КонецПроцедуры
"}
},
{0,
{"Листинг 10.18. Заполнение списка сотрудников и заполнение таблицы записей по выбранному сотруднику",0,0,"10.18","//Заполнение списка физлиц для перерасчета по выбранной организации
Процедура ЗаполнитьФизлицаПоОрганизации()

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр(""Организация"", Организация);
	Запрос.Текст = ""
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ПерерасчетОсновныхНачислений.ФизЛицо,
	|	ИСТИНА КАК Пометка
	|ИЗ
	|	РегистрРасчета.ОсновныеНачисленияРегл.ПерерасчетОсновныхНачислений КАК ПерерасчетОсновныхНачислений
	|
	|ГДЕ
	|	ПерерасчетОсновныхНачислений.Организация = &Организация
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ПерерасчетДополнительныхНачислений.ФизЛицо,
	|	ИСТИНА
	|
	|ИЗ
	|	РегистрРасчета.ДополнительныеНачисленияРегл.ПерерасчетДополнительныхНачислений КАК ПерерасчетДополнительныхНачислений
	|
	|ГДЕ
	|	ПерерасчетДополнительныхНачислений.Организация = &Организация"";

	ТаблицаФизлиц = Запрос.Выполнить().Выгрузить();
	ТаблицаФизлиц.Свернуть(""Физлицо"");
	МассивФизлиц = ТаблицаФизлиц.ВыгрузитьКолонку(""ФизЛицо"");
	Физлица.ЗагрузитьЗначения(МассивФизлиц);

КонецПроцедуры

//	Заполнить таблицу записей по выбранному физлицу
Процедура ЗаполнитьЗаписиПоФизлицу(ФизЛицо)

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр(""ФизЛицо"", ФизЛицо);
	Запрос.Текст = ""
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ПерерасчетОсновныхНачислений.ОбъектПерерасчета,
	|	ПерерасчетОсновныхНачислений.ВидРасчета
	|
	|ИЗ
	|	РегистрРасчета.ОсновныеНачисленияРегл.ПерерасчетОсновныхНачислений КАК ПерерасчетОсновныхНачислений
	|
	|ГДЕ
	|	ПерерасчетОсновныхНачислений.ФизЛицо = &ФизЛицо
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ПерерасчетДополнительныхНачислений.ОбъектПерерасчета,
	|	ПерерасчетДополнительныхНачислений.ВидРасчета
	|
	|ИЗ
	|	РегистрРасчета.ДополнительныеНачисленияРегл.ПерерасчетДополнительныхНачислений КАК ПерерасчетДополнительныхНачислений
	|
	|ГДЕ
	|	ПерерасчетДополнительныхНачислений.ФизЛицо = &ФизЛицо"";

	ЗаписиПоФизЛицу = Запрос.Выполнить().Выгрузить();
	ЭлементыФормы.ЗаписиПоФизлицу.СоздатьКолонки();

КонецПроцедуры
"}
},
{0,
{"Листинг 10.19. Пример вызова процедуры перерасчета",0,0,"10.19","Процедура КнопкаВыполнитьНажатие(Кнопка)

	СписокФизлиц = Новый СписокЗначений;
	Для каждого Элемент из ФизЛица Цикл
		Если Элемент.Пометка Тогда
			СписокФизлиц.Добавить(Элемент.Значение);
		КонецЕсли;
	КонецЦикла; 

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр(""ФизЛица"", СписокФизлиц);
	Запрос.Текст = ""
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ПерерасчетОсновныхНачислений.ОбъектПерерасчета
	|ИЗ
	|	РегистрРасчета.ОсновныеНачисленияРегл.ПерерасчетОсновныхНачислений КАК ПерерасчетОсновныхНачислений
	|ГДЕ
	|	ПерерасчетОсновныхНачислений.ФизЛицо В (&ФизЛица)
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ПерерасчетДополнительныхНачислений.ОбъектПерерасчета
	|ИЗ
	|	РегистрРасчета.ДополнительныеНачисленияРегл.ПерерасчетДополнительныхНачислений КАК ПерерасчетДополнительныхНачислений
	|ГДЕ
	| ПерерасчетДополнительныхНачислений.ФизЛицо В (&ФизЛица)"";

	ВыборкаДокументов = Запрос.Выполнить().Выбрать;

	//выборка по документам, требующим перерасчета
	Пока ВыборкаДокументов.Следующий() Цикл

		// Получить объект
		ДокументОбъект = ВыборкаДокументов.ОбъектПерерасчета.ПолучитьОбъект();

		// Вызвать процедуру перерасчета
		Попытка
			ДокументОбъект.Перерассчитать(СписокФизлиц);
		Исключение
			Сообщить(""Документ не может быть перерассчитан! "" + ВыборкаДокументов.ОбъектПерерасчета);
		КонецПопытки;
	КонецЦикла;

КонецПроцедуры
"}
},
{0,
{"Листинг 10.20. Проверка необходимости перерасчета",0,0,"10.20","// Проверяет необходимость выполнения перерасчета документа
Функция НеобходимостьПерерасчета(Регистратор) Экспорт

	Запрос = Новый Запрос(
	""ВЫБРАТЬ ПЕРВЫЕ 1
	|	Перерасчет.ФизЛицо
	|ИЗ
	|	(ВЫБРАТЬ ПЕРВЫЕ 1
	|		Перерасчет.ФизЛицо КАК ФизЛицо
	|	ИЗ
	|		РегистрРасчета.ОсновныеНачисленияРегл.ПерерасчетОсновныхНачислений КАК Перерасчет
	|	ГДЕ
	|		Перерасчет.ОбъектПерерасчета = &парамРегистратор
	|
	|	ОБЪЕДИНИТЬ ВСЕ
	|
	|	ВЫБРАТЬ ПЕРВЫЕ 1
	|		Перерасчет.ФизЛицо
	|	ИЗ
	|		РегистрРасчета.ДополнительныеНачисленияРегл.ПерерасчетДополнительныхНачислений КАК Перерасчет
	|	ГДЕ
	|		Перерасчет.ОбъектПерерасчета = &Регистратор) КАК Перерасчет
	|"");

	Запрос.УстановитьПараметр(""Регистратор"", Регистратор);
	Если Запрос.Выполнить().Пустой() Тогда 
		Возврат Ложь;
	Иначе
		Возврат Истина;
	КонецЕсли;

КонецФункции  // НеобходимостьПерерасчета
"}
},
{0,
{"Листинг 10.21. Процедура перерасчета записей документа",0,0,"10.21","Процедура Перерассчитать(Физлица = Неопределено) Экспорт

	// Перерасчет выполняется в транзакции
	НачатьТранзакцию();
	Если Не НеобходимостьПерерасчета(Ссылка) Тогда
		Возврат;
	КонецЕсли;

	// Считать движения документа по регистрам расчета
	Движения.ОсновныеНачисленияРегл.Прочитать();
	Движения.ДополнительныеНачисленияРегл.Прочитать();

	// Перерасчет и перезапись движений по регистрам расчета
	ПерерассчитатьЗаписиРегистраРасчета(""ОсновныеНачисленияРегл"", Движения.ОсновныеНачисленияРегл, ОсновныеНачисления, Физлица);
	Движения.ОсновныеНачисленияРегл.Записать(Истина, Истина);

	ПерерассчитатьЗаписиРегистраРасчета(""ДополнительныеНачисленияРегл"", Движения.ДополнительныеНачисленияРегл, ДополнительныеНачисления, Физлица);
	Движения.ДополнительныеНачисленияРегл.Записать(Истина, Истина);

	// Записать измененные данные табличных частей документа
	Записать();

	// Удалить записи перерасчета по которым выполнен перерасчет
	Для Н=1 По 2 Цикл
		Если Н=1 Тогда
			НаборЗаписей = РегистрыРасчета.ОсновныеНачисленияРегл.Перерасчеты.ПерерасчетОсновныхНачислений.СоздатьНаборЗаписей();
		Иначе
			НаборЗаписей = РегистрыРасчета.ДополнительныеНачисленияРегл.Перерасчеты.ПерерасчетДополнительныхНачислений.СоздатьНаборЗаписей();
		КонецЕсли; 

		НаборЗаписей.Отбор.ОбъектПерерасчета.Значение = Ссылка;

		Если Физлица <> НеОпределено Тогда
			НаборЗаписей.Прочитать();
			СтрокиКУдалению = Новый Массив;

			Для Каждого СтрокаПерерасчета из НаборЗаписей Цикл
				Если Физлица.НайтиПоЗначению(СтрокаПерерасчета.Физлицо) <> НеОпределено Тогда
					СтрокиКУдалению.Добавить(СтрокаПерерасчета);
				КонецЕсли;
			КонецЦикла;

			Для Каждого Строка Из СтрокиКУдалению Цикл
				НаборЗаписей.Удалить(Строка);
			КонецЦикла;
		КонецЕсли;

		НаборЗаписей.Записать();
	КонецЦикла; 

	// Перерасчет выполняется в транзакции
	ЗафиксироватьТранзакцию();

КонецПроцедуры
"}
},
{0,
{"Листинг 10.22. Процедуры перерасчета записей",0,0,"10.22","Процедура ПерерассчитатьНаборЗаписей(НаборЗаписей, Приоритет, ТабличнаяЧасть = Неопределено, ФизЛица = Неопределено)

	Для каждого Запись из НаборЗаписей Цикл
		Если Запись.ВидРасчета.Приоритет = Приоритет Тогда
			Если НЕ ФизЛица.НайтиПоЗначению(Запись.Физлицо) = Неопределено Тогда

				// Получить данные для расчета записи
				ДанныеДляРасчета = ПолучитьДанныеДляРасчета(Запись);

				// Вызвать процедуру расчета записи
				РассчитатьЗапись(Запись, ДанныеДляРасчета);

				// Вернуть результат расчета в табличную часть документа
				Если Не ТабличнаяЧасть = Неопределено Тогда
					СтрокаТабличнойЧасти = ТабличнаяЧасть.Получить(Запись.НомерСтроки-1);
					СтрокаТабличнойЧасти.Результат = Запись.Результат;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;

КонецПроцедуры


Процедура ПерерассчитатьЗаписиРегистраРасчета(ИмяРегистра, НаборЗаписей, ТабличнаяЧасть = Неопределено, Физлица = Неопределено) Экспорт

	Регистратор = НаборЗаписей.Отбор.Регистратор.Значение;

	// Запрос по приоритетам видов расчета 
	// только записей заданных сотрудников
	Запрос = Новый Запрос;
	Запрос.Текст=""
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	"" + ИмяРегистра + "".ВидРасчета.Приоритет КАК Приоритет
	|ИЗ
	|	РегистрРасчета."" + ИмяРегистра + "" КАК "" + ИмяРегистра + ""
	|ГДЕ 
	|	ФизЛицо В (&СписокФизлиц) И Регистратор = &Регистратор
	|УПОРЯДОЧИТЬ ПО
	|	Приоритет
	|ИТОГИ ПО
	|	"" + ИмяРегистра + "".ВидРасчета.Приоритет"";

	Запрос.УстановитьПараметр(""СписокФизлиц"", Физлица);
	Запрос.УстановитьПараметр(""Регистратор"", Регистратор);

	ВыборкаПриоритетов = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);

	// Для каждого значения приоритета выполняется расчет записей
	Пока ВыборкаПриоритетов.Следующий() Цикл
		ПерерассчитатьНаборЗаписей(НаборЗаписей, ВыборкаПриоритетов.Приоритет, ТабличнаяЧасть, Физлица);

		// Записать набор в регистр для расчета записей следующего 
		// приоритета, фактический период действия не пересчитывается
		НаборЗаписей.Записать(Истина, Истина);
	КонецЦикла;

КонецПроцедуры
"}
}
},
{82,
{"Глава 11. Механизм бизнес-процессов",1,0,"",""},
{0,
{"Листинг 11.1. Пример отображения карты маршрута",0,0,"11.1","// Карта маршрута – элемент управления «Поле графической схемы»
// ПолучитьКартуМаршрута() метод объекта БизнесПроцессОбъект.Имя
ЭлементыФормы.КартаМаршрута.УстановитьСхему(ПолучитьКартуМаршрута());
"}
},
{0,
{"Листинг 11.2. Пример отображения карты маршрута в форме обработки",0,0,"11.2","// БизнесПроцессСсылка – Ссылка на интересующий бизнес-процесс
БизнесПроцессОбъект = БизнесПроцессСсылка.ПолучитьОбъект();
ЭлементыФормы.КартаМаршрута.УстановитьСхему(БизнесПроцессОбъект.ПолучитьКартуМаршрута());
"}
},
{0,
{"Листинг 11.3. Синтаксис обработчика ПроверкаУсловия",0,0,"11.3","ПроверкаУсловия(ТочкаМаршрутаБизнесПроцесса, Результат);"}
},
{0,
{"Листинг 11.4. Пример обработчика события ПроверкаУсловия",0,0,"11.4","Процедура УсловиеОграниченияСкидкиПроверкаУсловия(ТочкаМаршрутаБизнесПроцесса, Результат)
	
	// Определяем значение функции по умолчанию
	СкидкаБольшеОбычной = Ложь;
	
	ОбычнаяСкидка = Константы.ОбычнаяСкидка.Получить();

	// Проверяем, что скидка не превышает обычную
	Для Каждого Элемент Из Счет.Состав Цикл
		Если Элемент.Скидка > ОбычнаяСкидка Тогда
			СкидкаБольшеОбычной = Истина;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Результат = СкидкаБольшеОбычной;

КонецПроцедуры;
"}
},
{0,
{"Листинг 11.5. Синтаксис обработчика события ОбработкаВыбораВарианта",0,0,"11.5","ОбработкаВыбораВарианта(ТочкаВыбораВарианта, Результат);"}
},
{0,
{"Листинг 11.6. Пример установки значения параметра Результат",0,0,"11.6","Результат = ТочкаВыбораВарианта.Варианты.Наличная;"}
},
{0,
{"Листинг 11.7. Синтаксис обработчика события Обработка",0,0,"11.7","Обработка(ТочкаМаршрутаБизнесПроцесса);"}
},
{0,
{"Листинг 11.8. Пример обработчика события ПередСтартом",0,0,"11.8","Процедура СтартПередСтартом(ТочкаМаршрутаБизнесПроцесса, Отказ)

	// Признак определяющий изменялся ли бизнес-процесс в данном обработчике
	НужноЗаписать = Ложь;
	
	// Если реквизит бизнес-процесса «Счет» содержит пустую ссылку
	// создадим документ и запишем ссылку на него 
	Если Счет.Пустая() Тогда
		
		СчетОбъект = Документы.Счет.СоздатьДокумент();
		СчетОбъект.Дата = ТекущаяДата();
		СчетОбъект.Записать();
		
		Счет = СчетОбъект.Ссылка;

		// Бизнес-процесс изменен (реквизит «Счет»)
		НужноЗаписать = Истина;
		
	КонецЕсли;	
	
	// Если реквизит бизнес-процесса «РасходнаяНакладная» 
	// содержит пустую ссылку, создадим документ и запишем ссылку на него 
	Если РасходнаяНакладная.Пустая() Тогда
		
		РасходнаяНакладнаяОбъект = Документы.РасходнаяНакладная.СоздатьДокумент();
		РасходнаяНакладнаяОбъект.Дата = ТекущаяДата();
		РасходнаяНакладнаяОбъект.Записать();
		
		РасходнаяНакладная = РасходнаяНакладнаяОбъект.Ссылка;
		
		НужноЗаписать = Истина;
		
	КонецЕсли;
	
	Если НужноЗаписать Тогда
		Записать();
	КонецЕсли;
	
	Сообщить(""Старт бизнес-процесса: "" + """""""" + ЭтотОбъект.Метаданные().Синоним + """""""");	

КонецПроцедуры 
"}
},
{0,
{"Листинг 11.9. Пример программного старта бизнес-процесса",0,0,"11.9","БП = БизнесПроцессы.ПродажаТовара.СоздатьБизнесПроцесс();

// Дата должна быть определена явным образом
БП.Дата = ТекущаяДата();

// Перед стартом бизнес-процесс должен быть обязательно записан
БП.Записать();
БП.Старт();
"}
},
{0,
{"Листинг 11.10. Пример интерактивного старта бизнес-процесса средствами встроенного языка",0,0,"11.10","БП = БизнесПроцессы.ПродажаТовара.СоздатьБизнесПроцесс();
БП.Дата = ТекущаяДата();
БП.Записать();
БП.Старт();

// Вызов метода возможен только для стартованного бизнес-процесса
БП.АктивироватьИнтерактивно();
"}
},
{0,
{"Листинг 11.11. Пример обработчика события ОбработкаИнтерактивнойАктивации",0,0,"11.11","Процедура ОбработкаИнтерактивнойАктивации(СтандартнаяОбработка)
	
	// Регистр сведений «Просмотр задач» используется для регистрации 
	// данных по текущим (не выполненным) задачам 
	НаборЗаписей = РегистрыСведений.ПросмотрЗадач.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.Задача.Значение = Ссылка;
	НаборЗаписей.Отбор.Задача.Использование = Истина;

	// В параметре «Текущий исполнитель» находится ссылка
	// на текущего пользователя; этот параметр сеанса выбран в свойство 
	// «Текущий пользователь» соответствующей задачи
	НаборЗаписей.Отбор.Сотрудник.Значение = ПараметрыСеанса.ТекущийИсполнитель;
	НаборЗаписей.Отбор.Сотрудник.Использование = Истина;
	
	НаборЗаписей.Прочитать();
	
	Если НаборЗаписей.Количество() = 0 Тогда
		
		// В набор записей добавляем новую запись, 
		// характеризующую активизированную задачу	
		НоваяЗапись = НаборЗаписей.Добавить();
		НоваяЗапись.Задача = Ссылка;
		НоваяЗапись.Сотрудник = ПараметрыСеанса.ТекущийИсполнитель;
		
		Попытка
			НаборЗаписей.Записать();
		Исключение
			Сообщить(ОписаниеОшибки(), СтатусСообщения.Важное);
		КонецПопытки;
	КонецЕсли;

КонецПроцедуры
"}
},
{0,
{"Листинг 11.12. Пример обработчика события ОбработкаИнтерактивнойАктивации",0,0,"11.12","Процедура ОплатаОбработкаИнтерактивнойАктивации(ТочкаМаршрутаБП, Задача, СтандартнаяОбработка);
	
	Счет.ПолучитьФорму(""ФормаДокумента"").Открыть();
	СтандартнаяОбработка = Ложь;
	
КонецПроцедуры
"}
},
{0,
{"Листинг 11.13. Пример обработчика события ПередСозданиемВложенныхБизнесПроцессов",0,0,"11.13","Процедура ОбходПередСозданиемВложенныхБизнесПроцессов(ТочкаМаршрутаБизнесПроцесса, ФормируемыеБизнесПроцессы, Отказ)

	БП = БизнесПроцессы.Поручение.СоздатьБизнесПроцесс();
	БП.Дата = ТекущаяДата();
	БП.Автор = ПараметрыСеанса.ТекущийИсполнитель;
	БП.Записать();
	ФормируемыеБизнесПроцессы.Добавить(БП);
	СтандартнаяОбработка = Ложь;

КонецПроцедуры
"}
},
{0,
{"Листинг 11.14. Пример обработчика события ПриСозданииВложенныхБизнесПроцессов",0,0,"11.14","Процедура ОбходПриСозданииВложенныхБизнесПроцессов(ТочкаМаршрутаБизнесПроцесса, ФормируемыеПроцессы, Отказ)
	
	// Обходим табличную часть
	Для Каждого Элемент Из Участники Цикл
			
		// Обходим массив задач
		Для Каждого Процесс Из ФормируемыеПроцессы Цикл
				
			// Настраиваем вложенный бизнес-процесс
			Процесс.Автор = ПараметрыСеанса.ТекущийИсполнитель;
			Если ПустаяСтрока(Элемент.НаименованиеЗадачи) Тогда
				Процесс.Тема = Наименование;
			Иначе	
				Процесс.Тема = Элемент.НаименованиеЗадачи;
			КонецЕсли;	
			Процесс.Исполнитель = Элемент.Сотрудник;
			Процесс.ИсполнительРоль = Элемент.РольИсполнителя;
			Процесс.ИсполнительОтдел = Элемент.Подразделение;
			Процесс.Записать();
		КонецЦикла;
	КонецЦикла;

КонецПроцедуры
"}
},
{0,
{"Листинг 11.15. Пример обработчика события ПриСозданииВложенныхБизнесПроцессов",0,0,"11.15","Процедура ОбходПриСозданииВложенныхБизнесПроцессов(ТочкаМаршрутаБизнесПроцесса, ФормируемыеПроцессы, Отказ)
	
	// Обходим табличную часть
	Для Каждого Элемент Из Участники Цикл
			
		// Обходим массив задач
		Для Каждого Процесс Из ФормируемыеПроцессы Цикл
					
			// Настраиваем вложенный бизнес-процесс
			Процесс.Автор = ПараметрыСеанса.ТекущийИсполнитель;
			Если ПустаяСтрока(Элемент.НаименованиеЗадачи) Тогда
				Процесс.Тема = Наименование;
			Иначе	
				Процесс.Тема = Элемент.НаименованиеЗадачи;
			КонецЕсли;	
			Процесс.Исполнитель = Элемент.Сотрудник;
			Процесс.ИсполнительРоль = Элемент.РольИсполнителя;
			Процесс.ИсполнительОтдел = Элемент.Подразделение;
			Процесс.Записать();

			// Явное указание точки старта
			Процесс.Старт(БизнесПроцессы.ДемонстрацияИПродажа.ТочкиМаршрута.СтартДемонстрации);
		КонецЦикла;
		
	КонецЦикла;

КонецПроцедуры
"}
},
{0,
{"Листинг 11.16. Пример обработчика события ПриЗавершении",0,0,"11.16","Процедура ПодотчетникПриЗавершении(ТочкаМаршрутаБизнесПроцесса, Отказ)

	// РКО – реквизит бизнес-процесса, содержащий ссылку 
	// на документ «Расходный кассовый ордер»
	// Исполнитель - реквизит бизнес-процесса, содержащий ссылку
	// на подотчетника
	Если Не обДолгПодотчетника(РКО,Исполнитель) = 0 Тогда	
		Сообщить(""Есть долг! Бизнес-процесс: "" +  ЭтотОбъект.Метаданные().Синоним + "" не завершен"");
		Отказ = Истина;
	КонецЕсли;	

КонецПроцедуры
"}
},
{0,
{"Листинг 11.17. Пример обработчика события ПередСозданиемЗадач",0,0,"11.17","Процедура НакладнаяПередСозданиемЗадач(ТочкаМаршрутаБизнесПроцесса, ФормируемыеЗадачи, СтандартнаяОбработка)

	Задача = Задачи.Задача.СоздатьЗадачу();
	Задача.Дата = ТекущаяДата();
	Задача.БизнесПроцесс = Ссылка;
	Задача.ТочкаМаршрута = БизнесПроцессы.ПродажаТовара.ТочкиМаршрута.Отгрузка;
	Задача.Наименование = ""Формирование расходной накладной"";
	ФормируемыеЗадачи.Добавить(Задача);
	СтандартнаяОбработка = Ложь;

КонецПроцедуры
"}
},
{0,
{"Листинг 11.18. Пример обработчика события ПриСозданииЗадач",0,0,"11.18","Процедура ОтгрузкаПриСозданииЗадач(ТочкаМаршрутаБизнесПроцесса, ФормируемыеЗадачи, Отказ)

	Склад = Справочники.Подразделения.НайтиПоНаименованию(РасходнаяНакладная.Склад);
	
	Если Не Склад.Пустая() Тогда
		Для Каждого Задача Из ФормируемыеЗадачи Цикл
			Задача.Подразделение = Склад;
		КонецЦикла;
	КонецЕсли;	
	
КонецПроцедуры
"}
},
{0,
{"Листинг 11.19. Пример обработчика события ПередСозданиемЗадач",0,0,"11.19","Процедура НакладнаяПередСозданиемЗадач(ТочкаМаршрутаБизнесПроцесса, ФормируемыеЗадачи, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
КонецПроцедуры
"}
},
{0,
{"Листинг 11.20. Пример обработчика события ПередВыполнением",0,0,"11.20","Процедура ПередВыполнением(Отказ)

	// ДатаВыполнения и Исполнитель – реквизиты задачи
	Если ДатаВыполнения = '00010101' Тогда 
		ДатаВыполнения = ТекущаяДата();
	КонецЕсли;
	
	Если Исполнитель.Пустая() Тогда
		Исполнитель = ПараметрыСеанса.ТекущийИсполнитель; 
	КонецЕсли;
	
КонецПроцедуры
"}
},
{0,
{"Листинг 11.21. Пример обработчика события ПриВыполнении",0,0,"11.21","Процедура ПриВыполнении(Отказ)
	
	Сообщить(""Задача выполнена: "" + """""""" + Наименование + """""""");

	// Просмотр задач – регистр сведений предназначенный 
	// для отражения невыполненных задач
	// разных бизнес-процессов
	НаборЗаписей = РегистрыСведений.ПросмотрЗадач.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.Задача.Значение = Ссылка;
	НаборЗаписей.Отбор.Задача.Использование = Истина;

	// Попытка прочитать записи регистра, содержащие данные 
	// о выполняемой задаче
	НаборЗаписей.Прочитать();
	НаборЗаписей.Очистить();
	
	Попытка

		// Попытка записать пустой набор записей
		НаборЗаписей.Записать(Истина);
	Исключение
		Сообщить(ОписаниеОшибки(), СтатусСообщения.Важное);
	КонецПопытки;
		
КонецПроцедуры
"}
},
{0,
{"Листинг 11.22. Пример использования метода ПроверитьВыполнение()",0,0,"11.22","Если Задача.ПроверитьВыполнение() Тогда
	Задача.ВыполнитьЗадачу();
КонецЕсли
"}
},
{0,
{"Листинг 11.23. Вызов метода Оповестить()",0,0,"11.23","Оповестить(""ЗаписьРасходногоКассовогоОрдера"", , ЭтотОбъект);"}
},
{0,
{"Листинг 11.24. Процедура ОбработчикОповещения",0,0,"11.24","Процедура ОбработчикОповещения(ИмяСобытия, Параметр, Источник) Экспорт
	
	Если ИмяСобытия = ""ЗаписьРасходногоКассовогоОрдера"" Тогда
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр(""Парам"", Источник.Ссылка);
		Запрос.Текст = 
		""ВЫБРАТЬ
		|	Задача.Ссылка
		|ИЗ
		|	Задача.Задача.ЗадачиПоИсполнителю КАК Задача
		|
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ 
		|			БизнесПроцесс.ВыдачаДенегПодотчетнику КАК ВыдачаДенегПодотчетнику
		|		ПО Задача.БизнесПроцесс = ВыдачаДенегПодотчетнику.Ссылка
		|ГДЕ
		|	Задача.Выполнена = ЛОЖЬ И ВыдачаДенегПодотчетнику.РКО = &Парам"";
		
		Выборка = Запрос.Выполнить().Выбрать();
		Пока Выборка.Следующий() Цикл 
			ТекущаяЗадача = Выборка.Ссылка.ПолучитьОбъект();
			Если ТекущаяЗадача.ТочкаМаршрута = БизнесПроцессы.ВыдачаДенегПодотчетнику.ТочкиМаршрута.ОформлениеВыплаты Тогда

				Если Вопрос(""Пометить задачу """""" + ТекущаяЗадача.Наименование + """""" как выполненную?"", РежимДиалогаВопрос.ДаНет) = КодВозвратаДиалога.Да Тогда
					ТекущаяЗадача.ВыполнитьЗадачу();
				КонецЕсли;
				
			КонецЕсли;
		КонецЦикла;
	КонецЕсли; // ИмяСобытия = ""ЗаписьРасходногоКассовогоОрдера"" 

КонецПроцедуры
"}
},
{0,
{"Листинг 11.25. Подключение обработчика оповещения",0,0,"11.25","ПодключитьОбработчикОповещения(""ОбработчикОповещения"");"}
},
{0,
{"Листинг 11.26. Заполнение параметра сеанса ТекущийИсполнитель",0,0,"11.26","ПараметрыСеанса.ТекущийИсполнитель = Справочники.Сотрудники.НайтиПоКоду(ИмяПользователя());
"}
},
{0,
{"Листинг 11.27. Обработчик события ПередВыполнением",0,0,"11.27","Процедура ПередВыполнением(Отказ)
	
	// Проверка даты на пустое значение
	Если ДатаВыполнения = '00010101' Тогда 
		ДатаВыполнения = ТекущаяДата();
	КонецЕсли;

	// Если исполнитель до начала выполнения неопределен, 
	// он записывается из параметра сеанса.
	// В этом случае записывается пользователь в контексте которого запущено 
	// 1С:Предприятие
	Если Исполнитель.Пустая() Тогда
		Исполнитель = ПараметрыСеанса.ТекущийИсполнитель; 
	КонецЕсли;
	
КонецПроцедуры
"}
},
{0,
{"Листинг 11.28. Обработчик события ПриИзменении поля ввода",0,0,"11.28","// Процедура-обработчик изменения поля ввода ""Сотрудник""
Процедура СотрудникПриИзменении(Элемент)

	ЭлементыФормы.ЗадачаСписок.Исполнитель = Сотрудник;

КонецПроцедуры
"}
},
{0,
{"Листинг 11.29. Обработчик события ПриОткрытии формы",0,0,"11.29","// Процедура-обработчик события ""ПриОткрытии"" формы
Процедура ПриОткрытии()
	
	ЭлементыФормы.ЗадачаСписок.АвтоОбновление = Истина;
	ЭлементыФормы.ЗадачаСписок.ПериодАвтоОбновления = 5;
	
	ЗадачаСписок.Порядок.Установить(""Дата Убыв"");
	
	Сотрудник = ПараметрыСеанса.ТекущийИсполнитель;
	
КонецПроцедуры
"}
},
{0,
{"Листинг 11.30. Обработчик события ОбработкаИнтерактивнойАктивации",0,0,"11.30","Процедура ОбработкаИнтерактивнойАктивации(СтандартнаяОбработка)
	
	НаборЗаписей = РегистрыСведений.ПросмотрЗадач.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.Задача.Значение = Ссылка;
	НаборЗаписей.Отбор.Задача.Использование = Истина;
	НаборЗаписей.Отбор.Сотрудник.Значение = ПараметрыСеанса.ТекущийИсполнитель;
	НаборЗаписей.Отбор.Сотрудник.Использование = Истина;
	
	// Производим попытку чтения набора записей с установленными отборами
	НаборЗаписей.Прочитать();
	
	Если НаборЗаписей.Количество() = 0 Тогда

		// Если набор записей пуст, производим запись данных 
		// в регистр сведений
		НоваяЗапись = НаборЗаписей.Добавить();
		НоваяЗапись.Задача = Ссылка;
		НоваяЗапись.Сотрудник = ПараметрыСеанса.ТекущийИсполнитель;
		
		Попытка
			НаборЗаписей.Записать();
		Исключение
			Сообщить(ОписаниеОшибки(), СтатусСообщения.Важное);
		КонецПопытки;
		
		#Если ВнешнееСоединение Тогда
		#Иначе	
			СброситьСведенияОЗадаче(Ссылка);
		#КонецЕсли
	КонецЕсли;
	
КонецПроцедуры
"}
},
{0,
{"Листинг 11.31. Обработчик события ПриВыполнении",0,0,"11.31","// Процедура обработчик события ""ПриВыполнении""
Процедура ПриВыполнении(Отказ)
	
	Сообщить(""Задача выполнена: "" + """""""" + Наименование + """""""");
	
	НаборЗаписей = РегистрыСведений.ПросмотрЗадач.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.Задача.Значение = Ссылка;
	НаборЗаписей.Отбор.Задача.Использование = Истина;
	
	// Получить набор записей с отбором по задаче
	НаборЗаписей.Прочитать();
	
	// Очищаем полученный набор
	НаборЗаписей.Очистить();
	
	Попытка

		// Пытаемся записать пустой набор записей в регистр 
		// фактически удаляем из него данные о задаче, если они там были
		НаборЗаписей.Записать(Истина);
	Исключение
		Сообщить(ОписаниеОшибки(), СтатусСообщения.Важное);
	КонецПопытки;
		
	#Если ВнешнееСоединение Тогда
	#Иначе	
		СброситьСведенияОЗадаче(Ссылка);
	#КонецЕсли
		
КонецПроцедуры	
"}
},
{0,
{"Листинг 11.32. Обработчик события ПриВыводеСтроки",0,0,"11.32","// Процедура-обработчик события ""ПриВыводеСтроки""
Процедура ЗадачаСписокПриВыводеСтроки(Элемент, ОформлениеСтроки, ДанныеСтроки)
	
	СведенияОЗадаче = ПолучитьСведенияОЗадаче(ДанныеСтроки.Ссылка);
	Если СведенияОЗадаче.Просмотрена = Ложь Тогда
		ОформлениеСтроки.Шрифт = мЖирныйШрифт;
	КонецЕсли;	
		
	Если ДанныеСтроки.Ссылка.Приоритет > 0 Тогда
		ОформлениеСтроки.ЦветТекста = WebЦвета.Коричневый;
	КонецЕсли;
	
	Если ДанныеСтроки.Ссылка.Приоритет < 0 Тогда
		ОформлениеСтроки.ЦветТекста = WebЦвета.ТемноСерый;
	КонецЕсли;

	Если ДанныеСтроки.Ссылка.Выполнена Тогда
		ОформлениеСтроки.Шрифт = мЗачеркнутыйШрифт;
	КонецЕсли;
	
КонецПроцедуры
"}
},
{0,
{"Листинг 11.33. Описание переменных модуля формы",0,0,"11.33","// ПЕРЕМЕННЫЕ МОДУЛЯ

Перем мЖирныйШрифт;
Перем мЗачеркнутыйШрифт;
"}
},
{0,
{"Листинг 11.34. Инициализация переменных модуля формы",0,0,"11.34","мЖирныйШрифт = Новый Шрифт( , , Истина);
мЗачеркнутыйШрифт = Новый Шрифт( , , , , , Истина);
"}
},
{0,
{"Листинг 11.35. Инициализация переменной мСведенияОЗадачах",0,0,"11.35","мСведенияОЗадачах = Новый Соответствие;"}
},
{0,
{"Листинг 11.36. Функция ПолучитьСведенияОЗадаче",0,0,"11.36","Функция ПолучитьСведенияОЗадаче(Задача) Экспорт
	
	СведенияОЗадаче = мСведенияОЗадачах.Получить(Задача);
	Если СведенияОЗадаче = Неопределено Тогда

		// Если в соответствии нет сведений о полученной задаче
		// создается структура с двумя ключами: Просмотрена и ДатаВремя
		СведенияОЗадаче = Новый Структура(""Просмотрена, ДатаВремя"");
		
		НаборЗаписей = РегистрыСведений.ПросмотрЗадач.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.Задача.Значение = Задача;
		НаборЗаписей.Отбор.Задача.Использование = Истина;
		НаборЗаписей.Отбор.Сотрудник.Значение = ПараметрыСеанса.ТекущийИсполнитель;
		НаборЗаписей.Отбор.Сотрудник.Использование = Истина;
		НаборЗаписей.Прочитать();
		СведенияОЗадаче.Просмотрена = (НаборЗаписей.Количество() <> 0);
		
		// По ключу ДатаВремя записывается время (с датой) 
		// создания структуры
		СведенияОЗадаче.ДатаВремя = ТекущаяДата();
		мСведенияОЗадачах.Вставить(Задача, СведенияОЗадаче);
		
	Иначе
		Возраст = ТекущаяДата() - СведенияОЗадаче.ДатаВремя;
		
		// Сведения о задаче могли устареть
		Если Возраст > 20 Тогда
        	СброситьСведенияОЗадаче(Задача);
		КонецЕсли
	КонецЕсли;
	Возврат СведенияОЗадаче;
	
КонецФункции // ПолучитьСведенияОЗадаче
"}
},
{0,
{"Листинг 11.37. Процедура СброситьСведенияОЗадаче",0,0,"11.37","Процедура СброситьСведенияОЗадаче(Задача) Экспорт
	
	мСведенияОЗадачах.Удалить(Задача);
	
КонецПроцедуры // СброситьСведенияОЗадаче
"}
},
{0,
{"Листинг 11.38. Процедура СброситьСведенияОВсехЗадачах",0,0,"11.38","Процедура СброситьСведенияОВсехЗадачах() Экспорт

	// Полная очистка соответствия
	мСведенияОЗадачах.Очистить();
	
КонецПроцедуры // СброситьСведенияОВсехЗадачах
"}
},
{0,
{"Листинг 11.39. Фрагмент обработчиков событий",0,0,"11.39","	#Если ВнешнееСоединение Тогда
	#Иначе	
		СброситьСведенияОЗадаче(Ссылка);
	#КонецЕсли
"}
},
{0,
{"Листинг 11.40. Вызов метода Оповестить()",0,0,"11.40","Оповестить(""ЗаписьСчета"", , ЭтотОбъект);"}
},
{0,
{"Листинг 11.41. Вызов метода Оповестить()",0,0,"11.41","Оповестить(""ЗаписьРасходнойНакладной"", , ЭтотОбъект);"}
},
{0,
{"Листинг 11.42. Процедура ОбработчикОповещения",0,0,"11.42","Процедура ОбработчикОповещения(ИмяСобытия, Параметр, Источник) Экспорт
	
	Если ИмяСобытия = ""ЗаписьРасходнойНакладной"" Тогда
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр(""Парам"", Источник.Ссылка);
		Запрос.Текст = 
		""ВЫБРАТЬ
		|	Задача.Ссылка
		|ИЗ
		|	БизнесПроцесс.ПродажаТовара КАК ПродажаТовара
		|
		|		ЛЕВОЕ СОЕДИНЕНИЕ 
		|			Задача.Задача.ЗадачиПоИсполнителю КАК Задача
		|		ПО ПродажаТовара.Ссылка = Задача.БизнесПроцесс
		|
		|ГДЕ
		|	(Задача.Выполнена = ЛОЖЬ) И ПродажаТовара.РасходнаяНакладная = &Парам"";

		Выборка = Запрос.Выполнить().Выбрать();
		Пока Выборка.Следующий() Цикл 
			ТекущаяЗадача = Выборка.Ссылка.ПолучитьОбъект();
			
			Если ТекущаяЗадача.ТочкаМаршрута = БизнесПроцессы.ПродажаТовара.ТочкиМаршрута.ВыпискаСчета ИЛИ ТекущаяЗадача.ТочкаМаршрута = БизнесПроцессы.ПродажаТовара.ТочкиМаршрута.Отгрузка Тогда
				ФормаСчета = ТекущаяЗадача.БизнесПроцесс.Счет.ПолучитьФорму();
				
				Если ФормаСчета.Открыта() <> Истина ИЛИ ТекущаяЗадача.ТочкаМаршрута <> БизнесПроцессы.ПродажаТовара.ТочкиМаршрута.ВыпискаСчета Тогда	
					
					Если Вопрос(""Пометить задачу """""" + ТекущаяЗадача.Наименование + """""" как выполненную?"", РежимДиалогаВопрос.ДаНет) = КодВозвратаДиалога.Да Тогда
						ТекущаяЗадача.ВыполнитьЗадачу();
					КонецЕсли;
					
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли; // ИмяСобытия = ""ЗаписьРасходнойНакладной"" Тогда

	Если ИмяСобытия = ""ЗаписьСчета"" Тогда
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр(""Парам"", Источник.Ссылка);
		Запрос.Текст = 
		""ВЫБРАТЬ
		|	Задача.Ссылка
		|ИЗ
		|	БизнесПроцесс.ПродажаТовара КАК ПродажаТовара
		|		ЛЕВОЕ СОЕДИНЕНИЕ Задача.Задача.ЗадачиПоИсполнителю 
		|														КАК Задача
		|		ПО ПродажаТовара.Ссылка = Задача.БизнесПроцесс
		|
		|ГДЕ
		|	(Задача.Выполнена = ЛОЖЬ) И
		|	ПродажаТовара.Счет = &Парам"";
		
		Выборка = Запрос.Выполнить().Выбрать();
		Пока Выборка.Следующий() Цикл 
			ТекущаяЗадача = Выборка.Ссылка.ПолучитьОбъект();
			Если 
				ТекущаяЗадача.ТочкаМаршрута = 
					БизнесПроцессы.ПродажаТовара.ТочкиМаршрута.ВыпискаСчета 
				ИЛИ
				ТекущаяЗадача.ТочкаМаршрута = 
				БизнесПроцессы.ПродажаТовара.ТочкиМаршрута.ПолучениеОплаты 
				ИЛИ 
				ТекущаяЗадача.ТочкаМаршрута = 
				БизнесПроцессы.ПродажаТовара.ТочкиМаршрута.УтверждениеСчета 
			Тогда
				ФормаНакладной = ТекущаяЗадача.
									БизнесПроцесс.
									РасходнаяНакладная.
									ПолучитьФорму();
				Если ФормаНакладной.Открыта() <> Истина 
					ИЛИ 
					ТекущаяЗадача.ТочкаМаршрута <> 
					БизнесПроцессы.ПродажаТовара.ТочкиМаршрута.ВыпискаСчета 
				Тогда
					Если Вопрос(""Пометить задачу """""" + 
								ТекущаяЗадача.Наименование + 
								"""""" как выполненную?"", 
								РежимДиалогаВопрос.ДаНет) = 
											КодВозвратаДиалога.Да Тогда
						ТекущаяЗадача.ВыполнитьЗадачу();
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли; // ИмяСобытия = ""ЗаписьСчета"" 
	
КонецПроцедуры
"}
},
{0,
{"Листинг 11.43. Подключение обработчика оповещения",0,0,"11.43","ПодключитьОбработчикОповещения(""ОбработчикОповещения"");"}
},
{0,
{"Листинг 11.44. Обработчик события ПередСтартом",0,0,"11.44","Процедура СтартПередСтартом(ТочкаМаршрутаБизнесПроцесса, Отказ)
	
	НужноЗаписать = Ложь;
	Если Счет.Пустая() Тогда
		СчетОбъект = Документы.Счет.СоздатьДокумент();
		СчетОбъект.Дата = ТекущаяДата();
		СчетОбъект.Записать();
		Счет = СчетОбъект.Ссылка;
		НужноЗаписать = Истина;
	КонецЕсли;	
	
	Если РасходнаяНакладная.Пустая() Тогда
		РасходнаяНакладнаяОбъект = Документы.РасходнаяНакладная.СоздатьДокумент();
		РасходнаяНакладнаяОбъект.Дата = ТекущаяДата();
		РасходнаяНакладнаяОбъект.Записать();
		РасходнаяНакладная = РасходнаяНакладнаяОбъект.Ссылка;
		НужноЗаписать = Истина;
	КонецЕсли;

	Если НужноЗаписать Тогда
		Записать();
	КонецЕсли;
	
	Сообщить(""Старт бизнес-процесса: "" + """""""" + ЭтотОбъект.Метаданные().Синоним + """""""");	

КонецПроцедуры // СтартПередСтартом(ТочкаМаршрутаБизнесПроцесса, Отказ)
"}
},
{0,
{"Листинг 11.45. Обработчик события ОбработкаИнтерактивнойАктивации",0,0,"11.45","Процедура ВыпискаСчетаОбработкаИнтерактивнойАктивации(ТочкаМаршрутаБизнесПроцесса, Задача, СтандартнаяОбработка)
	
	РасходнаяНакладная.ПолучитьФорму(""ФормаДокумента"").Открыть();
	Счет.ПолучитьФорму(""ФормаДокумента"").Открыть();
	СтандартнаяОбработка = Ложь;
	
КонецПроцедуры //
"}
},
{0,
{"Листинг 11.46. Обработчик события ПередИнтерактивнымВыполнением",0,0,"11.46","Процедура ВыпискаСчетаПередИнтерактивнымВыполнением(ТочкаМаршрутаБизнесПроцесса, Задача, Отказ)
	
	Если Счет.Состав.Количество() = 0 Тогда
		Отказ =	 Истина;
	КонецЕсли;
	
КонецПроцедуры 
"}
},
{0,
{"Листинг 11.47. Обработчик события ПроверкаУсловия",0,0,"11.47","// Процедура обработчик события ""ПроверкаУсловия"" 
// точки маршрута ""УсловиеОграниченияСкидки""
Процедура УсловиеОграниченияСкидкиПроверкаУсловия(ТочкаМаршрутаБизнесПроцесса, Результат)
	
	СкидкаБольшеОбычной = Ложь;
	ОбычнаяСкидка = Константы.ОбычнаяСкидка.Получить();

	// Проверяем, что скидка не превышает обычную
	Для Каждого Элемент Из Счет.Состав Цикл
		Если Элемент.Скидка > ОбычнаяСкидка Тогда
			СкидкаБольшеОбычной = Истина;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	Результат = СкидкаБольшеОбычной;
	
КонецПроцедуры 
"}
},
{0,
{"Листинг 11.48. Обработчик события ОбработкаИнтерактивнойАктивации",0,0,"11.48","Процедура УтверждениеСчетаОбработкаИнтерактивнойАктивации(ТочкаМаршрутаБизнесПроцесса, Задача, СтандартнаяОбработка)
	
	Счет.ПолучитьФорму(""ФормаДокумента"").Открыть();
	СтандартнаяОбработка = Ложь;
	
КонецПроцедуры 
"}
},
{0,
{"Листинг 11.49. Обработчик события ПроверкаУсловия",0,0,"11.49","Процедура УсловиеУтвержденияПроверкаУсловия(ТочкаМаршрутаБизнесПроцесса, Результат)
	
	// Проверяем, что скидки согласованы
	Результат = Счет.СкидкаСогласована;
	
КонецПроцедуры 
"}
},
{0,
{"Листинг 11.50. Обработчик события ОбработкаИнтерактивнойАктивации",0,0,"11.50","Процедура ПолучениеОплатыОбработкаИнтерактивнойАктивации(ТочкаМаршрутаБизнесПроцесса, Задача, СтандартнаяОбработка)
	
	Счет.ПолучитьФорму(""ФормаДокумента"").Открыть();
	СтандартнаяОбработка = Ложь;
	
КонецПроцедуры
"}
},
{0,
{"Листинг 11.51. Обработчик события ПриСозданииЗадач",0,0,"11.51","Процедура ОтгрузкаПриСозданииЗадач(ТочкаМаршрутаБизнесПроцесса, ФормируемыеЗадачи, Отказ)

	Склад = Справочники.Подразделения.НайтиПоНаименованию(РасходнаяНакладная.Склад);
	
	Если Не Склад.Пустая() Тогда
		Для Каждого Задача Из ФормируемыеЗадачи Цикл
			Задача.Подразделение = Склад;
		КонецЦикла;
	КонецЕсли;	
	
КонецПроцедуры
"}
},
{0,
{"Листинг 11.52. Обработчик события ОбработкаИнтерактивнойАктивации",0,0,"11.52","Процедура ОтгрузкаОбработкаИнтерактивнойАктивации(ТочкаМаршрутаБизнесПроцесса, Задача, СтандартнаяОбработка)
	
	РасходнаяНакладная.ПолучитьФорму(""ФормаДокумента"").Открыть();
	СтандартнаяОбработка = Ложь;
	
КонецПроцедуры
"}
},
{0,
{"Листинг 11.53. Обработчик события ПередСозданиемЗадач",0,0,"11.53","Процедура ПолучениеОплатыПередСозданиемЗадач(ТочкаМаршрутаБизнесПроцесса, ФормируемыеЗадачи, СтандартнаяОбработка)
	
	// С помощью реализованной в общем модуле функции получаем 
	// сумму возможного аванса
	СостояниеВзаиморасчетов = ПолучитьСостояниеВзаиморасчетов(Счет.Контрагент);
	
	СуммаПоДокументу = Счет.Состав.Итог(""Сумма"");
	Если СостояниеВзаиморасчетов > СуммаПоДокументу Тогда
		ЗафиксироватьОплату(Счет);
		СтандартнаяОбработка = Ложь;			
	КонецЕсли;	

КонецПроцедуры
"}
},
{0,
{"Листинг 11.54. Процедура, выполняющая старт бизнес-процесса",0,0,"11.54","Процедура ОсновнойДействие3() Экспорт
	
	БизнесПроцесс = БизнесПроцессы.Поручение.СоздатьБизнесПроцесс();
	БизнесПроцесс.Дата = ТекущаяДата();
	БизнесПроцесс.Записать();
	БизнесПроцесс.Старт(БизнесПроцессы.Поручение.ТочкиМаршрута.Старт);
	БизнесПроцесс.АктивироватьИнтерактивно();
	
КонецПроцедуры
"}
},
{0,
{"Листинг 11.55. Обработчик события ПередСтартом",0,0,"11.55","Процедура СтартПередСтартом(ТочкаМаршрутаБизнесПроцесса, Отказ)
	
	Автор = ПараметрыСеанса.ТекущийИсполнитель;
	КонтрольныйСрок = КонецНедели(ТекущаяДата());
	Записать();
	
	Сообщить(""Старт бизнес-процесса: "" + """""""" + ЭтотОбъект.Метаданные().Синоним + """""""");	
	
КонецПроцедуры
"}
},
{0,
{"Листинг 11.56. Обработчик события ПередСозданиемЗадач",0,0,"11.56","Процедура ВыдатьПоручениеПередСозданиемЗадач(ТочкаМаршрутаБизнесПроцесса, ФормируемыеЗадачи, СтандартнаяОбработка)
	
	Задача = Задачи.Задача.СоздатьЗадачу();
	Задача.БизнесПроцесс = Ссылка;
	Задача.ТочкаМаршрута = ТочкаМаршрутаБизнесПроцесса;
	Задача.Дата = ТекущаяДата();
	Задача.Сотрудник = Автор;
	Задача.Наименование = ТочкаМаршрутаБизнесПроцесса.НаименованиеЗадачи;
	Если Не ПустаяСтрока(Тема) Тогда
		Задача.Наименование = Задача.Наименование + "": "" + Тема;
	КонецЕсли;
	ФормируемыеЗадачи.Добавить(Задача);
	СтандартнаяОбработка = Ложь;

КонецПроцедуры
"}
},
{0,
{"Листинг 11.57. Обработчик события ОбработкаИнтерактивнойАктивации",0,0,"11.57","Процедура ВыдатьПоручениеОбработкаИнтерактивнойАктивации(ТочкаМаршрутаБизнесПроцесса, Задача, СтандартнаяОбработка)
	
	Форма = ПолучитьФорму(""ФормаПоручения"");
	Форма.Задача = Задача;
	Форма.Открыть();
	СтандартнаяОбработка = Ложь;	
	
КонецПроцедуры
"}
},
{0,
{"Листинг 11.58. Обработчик события ПередВыполнением",0,0,"11.58","Процедура ВыдатьПоручениеПередВыполнением(ТочкаМаршрутаБизнесПроцесса, Задача, Отказ)

	Отказ = Ложь;
	
	// Проверяется заполнение хотя бы одного реквизита, 
	// который будет использоваться в качестве значений 
	// реквизита адресации задачи
	Если Исполнитель.Пустая() И ИсполнительРоль.Пустая() И ИсполнительОтдел.Пустая() Тогда
		Отказ = Истина;
	КонецЕсли;
	
	Если ПустаяСтрока(ТекстПоручения) Тогда
		Отказ = Истина;
	КонецЕсли;
	
КонецПроцедуры
"}
},
{0,
{"Листинг 11.59. Обработчик события ПровкаУсловия",0,0,"11.59","Результат = ПараллельныйКонтроль;"}
},
{0,
{"Листинг 11.60. Обработчик события ПередСозданиемЗадач",0,0,"11.60","Процедура ВыполнитьПоручениеПередСозданиемЗадач(ТочкаМаршрутаБизнесПроцесса, ФормируемыеЗадачи, СтандартнаяОбработка)
	
	Задача = Задачи.Задача.СоздатьЗадачу();
	Задача.БизнесПроцесс = Ссылка;
	Задача.ТочкаМаршрута = ТочкаМаршрутаБизнесПроцесса;
	Задача.Дата = ТекущаяДата();
	Задача.Приоритет = Приоритет;
	Задача.КонтрольныйСрок = КонтрольныйСрок;

	Если Не Исполнитель.Пустая() Тогда
		Задача.Сотрудник = Исполнитель;
	КонецЕсли;

	Если Не ИсполнительРоль.Пустая() Тогда
		Задача.РольИсполнителя = ИсполнительРоль;
	КонецЕсли;

	Если Не ИсполнительОтдел.Пустая() Тогда
		Задача.Подразделение = ИсполнительОтдел;
	КонецЕсли;

	Задача.Наименование = ТочкаМаршрутаБизнесПроцесса.НаименованиеЗадачи;

	Если Не ПустаяСтрока(Тема) Тогда
		Задача.Наименование = Задача.Наименование + "": "" + Тема;
	КонецЕсли;
	
	ФормируемыеЗадачи.Добавить(Задача);
	
	СтандартнаяОбработка = Ложь;

КонецПроцедуры
"}
},
{0,
{"Листинг 11.61. Обработчик события ОбработкаИнтерактивнойАктивации",0,0,"11.61","Процедура ВыполнитьПоручениеОбработкаИнтерактивнойАктивации(ТочкаМаршрутаБизнесПроцесса, Задача, СтандартнаяОбработка)
	
	Форма = ПолучитьФорму(""ФормаПоручения"");
	Форма.Задача = Задача;
	Форма.Открыть();
	СтандартнаяОбработка = Ложь;	
	
КонецПроцедуры
"}
},
{0,
{"Листинг 11.62. Обработчик события ПередСозданиемЗадач",0,0,"11.62","Процедура ВыполнитьПоручениеПередСозданиемЗадач(ТочкаМаршрутаБизнесПроцесса, ФормируемыеЗадачи, СтандартнаяОбработка)
	
	Задача = Задачи.Задача.СоздатьЗадачу();
	Задача.БизнесПроцесс = Ссылка;
	Задача.ТочкаМаршрута = ТочкаМаршрутаБизнесПроцесса;
	Задача.Дата = ТекущаяДата();
	Задача.Приоритет = Приоритет;
	Задача.КонтрольныйСрок = КонтрольныйСрок;

	Если Не Исполнитель.Пустая() Тогда
		Задача.Сотрудник = Исполнитель;
	КонецЕсли;

	Если Не ИсполнительРоль.Пустая() Тогда
		Задача.РольИсполнителя = ИсполнительРоль;
	КонецЕсли;

	Если Не ИсполнительОтдел.Пустая() Тогда
		Задача.Подразделение = ИсполнительОтдел;
	КонецЕсли;

	Задача.Наименование = ТочкаМаршрутаБизнесПроцесса.НаименованиеЗадачи;

	Если Не ПустаяСтрока(Тема) Тогда
		Задача.Наименование = Задача.Наименование + "": "" + Тема;
	КонецЕсли;
	
	ФормируемыеЗадачи.Добавить(Задача);
	
	СтандартнаяОбработка = Ложь;

КонецПроцедуры
"}
},
{0,
{"Листинг 11.63. Обработчик события ОбработкаИнтерактивнойАктивации",0,0,"11.63","Процедура ВыполнитьПоручениеОбработкаИнтерактивнойАктивации(ТочкаМаршрутаБизнесПроцесса, Задача, СтандартнаяОбработка)
	
	Форма = ПолучитьФорму(""ФормаПоручения"");
	Форма.Задача = Задача;
	Форма.Открыть();
	СтандартнаяОбработка = Ложь;	
	
КонецПроцедуры
"}
},
{0,
{"Листинг 11.64. Обработчик события ПроверкаУсловия",0,0,"11.64","Процедура НуженКонтрольПроверкаУсловия(ТочкаМаршрутаБизнесПроцесса, Результат)
	
	Результат = Истина;
	Если Контролер.Пустая() И КонтролерРоль.Пустая() И КонтролерОтдел.Пустая() Тогда
		Результат = Ложь;
	КонецЕсли;	
	
КонецПроцедуры
"}
},
{0,
{"Листинг 11.65. Обработчик события ПриСозданииВложенныхБизнесПроцессов",0,0,"11.65","Процедура ОбходПриСозданииВложенныхБизнесПроцессов(ТочкаМаршрутаБизнесПроцесса, ФормируемыеПроцессы, Отказ)
	
	Для Каждого Элемент Из Участники Цикл
		Если Не Элемент.ПризнакОбхода Тогда
			Для Каждого Процесс Из ФормируемыеПроцессы Цикл
				
				// Настраиваем вложенный бизнес-процесс
				Процесс.Автор = ПараметрыСеанса.ТекущийИсполнитель;
				
				Если ПустаяСтрока(Элемент.НаименованиеЗадачи) Тогда
					Процесс.Тема = Наименование;
				Иначе	
					Процесс.Тема = Элемент.НаименованиеЗадачи;
				КонецЕсли;	

				Процесс.Исполнитель = Элемент.Сотрудник;
				Процесс.ИсполнительРоль = Элемент.РольИсполнителя;
				Процесс.ИсполнительОтдел = Элемент.Подразделение;
				Процесс.ПараллельныйКонтроль = Ложь;
				Процесс.Записать();
				Процесс.Старт(БизнесПроцессы.Поручение.ТочкиМаршрута.СтартБезАвтора);
				Элемент.ПризнакОбхода = Истина;
			КонецЦикла;
			
			Записать();
			Возврат;
		КонецЕсли;
	КонецЦикла;

КонецПроцедуры 
"}
},
{0,
{"Листинг 11.66. Обработчик события ПроверкаУсловия",0,0,"11.66","Процедура УсловиеОбходаПроверкаУсловия(ТочкаМаршрутаБизнесПроцесса, Результат)
	
	Для Каждого Элемент Из Участники Цикл
		Если Не Элемент.ПризнакОбхода Тогда
			Результат = Ложь;
			Возврат;
		КонецЕсли;
	КонецЦикла;

	Результат = Истина;
	
КонецПроцедуры
"}
},
{0,
{"Листинг 11.67. Обработчик события ПередСтартом",0,0,"11.67","Процедура СтартПередСтартом(ТочкаМаршрутаБизнесПроцесса, Отказ)
	
	Инициатор = ПараметрыСеанса.ТекущийИсполнитель;
	Записать();
	
	Сообщить(""Старт бизнес-процесса: "" + """""""" + ЭтотОбъект.Метаданные().Синоним + """""""");
	
КонецПроцедуры
"}
},
{0,
{"Листинг 11.68. Обработчик события ПередСозданиемЗадач",0,0,"11.68","Процедура ОпределитьСписокРецензентовПередСозданиемЗадач(ТочкаМаршрутаБизнесПроцесса, ФормируемыеЗадачи, СтандартнаяОбработка)
	
	Если Рецензии.Количество() = 0 Тогда
		НоваяЗадача = Задачи.Задача.СоздатьЗадачу();
		НоваяЗадача.БизнесПроцесс = Ссылка;
		НоваяЗадача.ТочкаМаршрута = БизнесПроцессы.Согласование.ТочкиМаршрута.ОпределитьСписокРецензентов;
		НоваяЗадача.Дата = ТекущаяДата();
		НоваяЗадача.Наименование = БизнесПроцессы.Согласование.ТочкиМаршрута.ОпределитьСписокРецензентов.НаименованиеЗадачи;
		НоваяЗадача.Сотрудник = ПараметрыСеанса.ТекущийИсполнитель;

		Если Важное Тогда
			НоваяЗадача.Приоритет = 1;
		КонецЕсли;	
		
		ФормируемыеЗадачи.Добавить(НоваяЗадача);
	КонецЕсли;
	
	СтандартнаяОбработка = Ложь;
	
КонецПроцедуры
"}
},
{0,
{"Листинг 11.69. Обработчик события ОбработкаИнтерактивнойАктивации",0,0,"11.69","Процедура ОпределитьСписокРецензентовОбработкаИнтерактивнойАктивации(ТочкаМаршрутаБизнесПроцесса, Задача, СтандартнаяОбработка)
	
	ПолучитьФорму(""ОсновнаяФорма"").Открыть();
	СтандартнаяОбработка = Ложь;
	
КонецПроцедуры
"}
},
{0,
{"Листинг 11.70. Обработчик события ПриВыполнении",0,0,"11.70","Процедура ОпределитьСписокРецензентовПриВыполнении(ТочкаМаршрутаБизнесПроцесса, Задача, Отказ)

	ПроверитьСогласование();

КонецПроцедуры
"}
},
{0,
{"Листинг 11.71. Процедура ПроверитьСогласование",0,0,"11.71","Процедура ПроверитьСогласование()
	
	Для Каждого Элемент Из Рецензии Цикл
		Если Не Элемент.Согласовано	Тогда
			Согласовано = Ложь;
			Возврат;
		КонецЕсли;
	КонецЦикла;

	Согласовано = Истина;
	Записать();

КонецПроцедуры
"}
},
{0,
{"Листинг 11.72. Обработчик события ПередСозданиемЗадач",0,0,"11.72","Процедура НаСогласованиеПередСозданиемЗадач(ТочкаМаршрутаБизнесПроцесса, ФормируемыеЗадачи, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
КонецПроцедуры
"}
},
{0,
{"Листинг 11.73. Обработчик события ПриСозданииЗадач",0,0,"11.73","Процедура НаСогласованиеПриСозданииЗадач(ТочкаМаршрутаБизнесПроцесса, ФормируемыеЗадачи, Отказ)
	
	Для Каждого Элемент Из Рецензии Цикл
		
		// По умолчанию согласовано
		Элемент.Согласовано = Истина;
		
		НоваяЗадача = Задачи.Задача.СоздатьЗадачу();
		НоваяЗадача.БизнесПроцесс = Ссылка;
		НоваяЗадача.ТочкаМаршрута = БизнесПроцессы.Согласование.ТочкиМаршрута.НаСогласование;
		НоваяЗадача.Дата = ТекущаяДата();
		НоваяЗадача.Наименование = БизнесПроцессы.Согласование.ТочкиМаршрута.НаСогласование.НаименованиеЗадачи;
		Если Важное Тогда
			НоваяЗадача.Приоритет = 1;
		КонецЕсли;	
		
		// Даты
		НоваяЗадача.КонтрольныйСрок = КонтрольныйСрок;
		НоваяЗадача.ДатаАвтоВыполнения = КонтрольныйСрок;
		
		// Реквизиты адресации
		НоваяЗадача.Сотрудник = Элемент.Рецензент;
		НоваяЗадача.РольИсполнителя = Элемент.РольИсполнителя;
		НоваяЗадача.Подразделение = Элемент.Подразделение;
		
		ФормируемыеЗадачи.Добавить(НоваяЗадача);
		НоваяЗадача.Записать();
		
	КонецЦикла;
	
	Записать();

КонецПроцедуры
"}
},
{0,
{"Листинг 11.74. Обработчик события ОбработкаИнтерактивнойАктивации",0,0,"11.74","Процедура НаСогласованиеОбработкаИнтерактивнойАктивации(ТочкаМаршрутаБизнесПроцесса, Задача, СтандартнаяОбработка)

	Форма = ПолучитьФорму(""ФормаРецензента"");
	Форма.Задача = Задача;
	Форма.Открыть();
	СтандартнаяОбработка = Ложь;

КонецПроцедуры
"}
},
{0,
{"Листинг 11.75. Текст обработчика события ПриВыполнении",0,0,"11.75","ПроверитьСогласование();"}
},
{0,
{"Листинг 11.76. Текст обработчика события ПроверкаУсловия",0,0,"11.76","Результат = ОбработатьРецензии;"}
},
{0,
{"Листинг 11.77. Обработчик события ПередСозданиемЗадач",0,0,"11.77","Процедура ОбработатьРезультатыПередСозданиемЗадач(ТочкаМаршрутаБизнесПроцесса, ФормируемыеЗадачи, СтандартнаяОбработка)
	
	НоваяЗадача = Задачи.Задача.СоздатьЗадачу();
	НоваяЗадача.БизнесПроцесс = Ссылка;
	НоваяЗадача.ТочкаМаршрута = БизнесПроцессы.Согласование.ТочкиМаршрута.ОбработатьРезультаты;
	НоваяЗадача.Дата = ТекущаяДата();
	НоваяЗадача.Наименование = БизнесПроцессы.Согласование.ТочкиМаршрута.ОбработатьРезультаты.НаименованиеЗадачи;
	НоваяЗадача.Сотрудник = Инициатор;
	Если Важное Тогда
		НоваяЗадача.Приоритет = 1;
	КонецЕсли;	
	
	ФормируемыеЗадачи.Добавить(НоваяЗадача);
	СтандартнаяОбработка = Ложь;

КонецПроцедуры
"}
},
{0,
{"Листинг 11.78. Обработчик события ОбработкаИнтерактивнойАктивации",0,0,"11.78","Процедура ОбработатьРезультатыОбработкаИнтерактивнойАктивации(ТочкаМаршрутаБизнесПроцесса, Задача, СтандартнаяОбработка)
	
	Форма = ПолучитьФорму(""ФормаОбработкиРецензий"");
	Форма.Задача = Задача;
	Форма.Открыть();
	
	СтандартнаяОбработка = Ложь;
	
КонецПроцедуры
"}
},
{0,
{"Листинг 11.79. Текст обработчика события ПроверкаУсловия",0,0,"11.79","Результат = ПовторноеСогласование;"}
},
{0,
{"Листинг 11.80. Текст обработчика события ПриСозданииЗадач",0,0,"11.80","НоваяЗадача.ДатаАвтоВыполнения = КонтрольныйСрок;"}
},
{0,
{"Листинг 11.81. Процедура АвтоОбработкаЗадач",0,0,"11.81","Процедура АвтоОбработкаЗадач()
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	""ВЫБРАТЬ
	|	Ссылка 
	|ИЗ
	|	Задача.Задача
	|ГДЕ
	|	Выполнена <> Истина"";

	Выборка = Запрос.Выполнить().Выбрать();

	Пока Выборка.Следующий() Цикл
		НачатьТранзакцию();	
		ТекущаяЗадача = Выборка.Ссылка.ПолучитьОбъект();
		
		Попытка
			Если ТекущаяЗадача.ПроверитьВыполнение() Тогда
				ТекущаяЗадача.ВыполнитьЗадачу();
			КонецЕсли;
		Исключение
		КонецПопытки;
		
		ЗафиксироватьТранзакцию();
	КонецЦикла;
	
КонецПроцедуры
"}
},
{0,
{"Листинг 11.82. Обработчик события ОбработкаПроверкиВыполнения",0,0,"11.82","Процедура НаСогласованиеОбработкаПроверкиВыполнения(ТочкаМаршрутаБизнесПроцесса, Задача, Результат)
	
	Результат = Ложь;
	
	Если Задача.ДатаАвтоВыполнения <> '00010101' И Задача.ДатаАвтоВыполнения <= ТекущаяДата() Тогда
		Результат = Истина;
	КонецЕсли;	
	
КонецПроцедуры
"}
}
},
{9,
{"Глава 12. Использование механизма анализа данных и прогнозирования",1,0,"",""},
{0,
{"Листинг 12.1. Пример выполнения анализа общая статистика",0,0,"12.1","Анализ = Новый АнализДанных;

Анализ.ТипАнализа = Тип(""АнализДанныхОбщаяСтатистика"");

Запрос = Новый Запрос;
Запрос.Текст = ""
|ВЫБРАТЬ
|	ПродажиОбороты.Номенклатура,
|	ПродажиОбороты.Количество
|ИЗ
|	РегистрНакопления.Продажи КАК ПродажиОбороты"";

Анализ.ИсточникДанных = Запрос.Выполнить();
РезультатАнализа = Анализ.Выполнить();

Построитель = Новый ПостроительОтчетаАнализаДанных();
Построитель.Макет = Неопределено;
Построитель.ТипАнализа = Тип(""АнализДанныхОбщаяСтатистика"");

ТабДок = Новый ТабличныйДокумент;
Построитель.Вывести(РезультатАнализа, ТабДок);
ТабДок.Показать();
"}
},
{0,
{"Листинг 12.2. Пример выполнения анализа поиск ассоциаций",0,0,"12.2","Анализ = Новый АнализДанных;

Анализ.ТипАнализа = Тип(""АнализДанныхПоискАссоциаций"");

Запрос = Новый Запрос;
Запрос.Текст = ""
|ВЫБРАТЬ
|	ПродажиОбороты.Регистратор,
|	ПродажиОбороты.Номенклатура
|ИЗ
|	РегистрНакопления.Продажи КАК ПродажиОбороты"";

Анализ.ИсточникДанных = Запрос.Выполнить();
	
// строка приводится в качестве примера, 
// такое значение типа колонки по умолчанию
Анализ.НастройкаКолонок.Номенклатура.ТипКолонки = ТипКолонкиАнализаДанныхПоискАссоциаций.Элемент;
	
// строка приводится в качестве примера, 
// такое значение типа отсечения по умолчанию
Анализ.Параметры.ТипОтсеченияПравил.Значение = ТипОтсеченияПравилАссоциации.Избыточные;

РезультатАнализа = Анализ.Выполнить();

Построитель = Новый ПостроительОтчетаАнализаДанных();
Построитель.Макет = Неопределено;
Построитель.ТипАнализа = Тип(""АнализДанныхПоискАссоциаций"");

ТабДок = Новый ТабличныйДокумент;
Построитель.Вывести(РезультатАнализа, ТабДок);
ТабДок.Показать();
"}
},
{0,
{"Листинг 12.3. Пример выполнения анализа поиск последовательностей",0,0,"12.3","Анализ = Новый АнализДанных;	

Анализ.ТипАнализа = Тип(""АнализДанныхПоискПоследовательностей"");

Запрос = Новый Запрос;
Запрос.Текст = ""
|ВЫБРАТЬ
|	ПродажиОбороты.Контрагент,
|	ПродажиОбороты.Номенклатура,
|	ПродажиОбороты.Период
|ИЗ
|	РегистрНакопления.Продажи КАК ПродажиОбороты"";

Анализ.ИсточникДанных = Запрос.Выполнить();
	
Анализ.НастройкаКолонок.Период.ТипКолонки = ТипКолонкиАнализаДанныхПоискПоследовательностей.Время; 
РезультатАнализа = Анализ.Выполнить();

Построитель = Новый ПостроительОтчетаАнализаДанных();
Построитель.Макет = Неопределено;
Построитель.ТипАнализа = Тип(""АнализДанныхПоискПоследовательностей"");

ТабДок = Новый ТабличныйДокумент;
Построитель.Вывести(РезультатАнализа, ТабДок);
ТабДок.Показать();
"}
},
{0,
{"Листинг 12.4. Пример выполнения анализа дерево решений",0,0,"12.4","Анализ = Новый АнализДанных;

Анализ.ТипАнализа = Тип(""АнализДанныхДеревоРешений"");

Запрос = Новый Запрос;
Запрос.Текст = ""
|ВЫБРАТЬ
|	Контрагенты.Вид,
|	Контрагенты.КоличествоРозничныхТочек,
|	Контрагенты.КоличествоАвтомобилей,
|	Контрагенты.ВремяРаботыОрганизации,
|	Контрагенты.ВремяЗаключенияДоговора,
|	Контрагенты.ПрекрашениеОтношений
|ИЗ
|	Справочник.Контрагенты КАК Контрагенты
|ГДЕ
|	(НЕ Контрагенты.ЭтоГруппа)"";

Анализ.ИсточникДанных = Запрос.Выполнить();
	
Анализ.Параметры.ТипУпрощения.Значение = ТипУпрощенияДереваРешений.НеУпрощать;
	
РезультатАнализа = Анализ.Выполнить();

Построитель = Новый ПостроительОтчетаАнализаДанных();
Построитель.Макет = Неопределено;
Построитель.ТипАнализа = Тип(""АнализДанныхДеревоРешений"");

ТабДок = Новый ТабличныйДокумент;
Построитель.Вывести(РезультатАнализа, ТабДок);
ТабДок.Показать();
"}
},
{0,
{"Листинг 12.5. Пример выполнения кластерного анализа ",0,0,"12.5","Анализ.ТипАнализа = Тип(""АнализДанныхКластеризация"");

Запрос = Новый Запрос;
Запрос.Текст = ""
|ВЫБРАТЬ
|	Контрагенты.КоличествоРозничныхТочек,
|	Контрагенты.КоличествоАвтомобилей
|ИЗ
|	Справочник.Контрагенты КАК Контрагенты
|ГДЕ
|	(НЕ Контрагенты.ЭтоГруппа) "";

Анализ.ИсточникДанных = Запрос.Выполнить();         

// выбор метрики
Анализ.Параметры.МераРасстояния.Значение = ТипМерыРасстоянияАнализаДанных.ЕвклидоваМетрикаВКвадрате; 

// выбор метода кластеризации
Анализ.Параметры.МетодКластеризации.Значение = МетодКластеризации.КСредних;

РезультатАнализа = Анализ.Выполнить();

Построитель = Новый ПостроительОтчетаАнализаДанных();  
Построитель.Макет = Неопределено;
Построитель.ТипАнализа = Тип(""АнализДанныхКластеризация"");

ТабДок = Новый ТабличныйДокумент;
Построитель.Вывести(РезультатАнализа, ТабДок);
"}
},
{0,
{"Листинг 12.6. Пример изменения параметров колонок",0,0,"12.6","Анализ.НастройкаКолонок.КоличествоАвтомобилей.ДополнительныеПараметры.Вес = 2;
"}
},
{0,
{"Листинг 12.7. Установка параметра ТипЗаполненияТаблицы",0,0,"12.7","Анализ.Параметры.ТипЗаполненияТаблицы.Значение = ТипЗаполненияТаблицыРезультатаАнализаДанных.ИспользуемыеПоля;
"}
},
{0,
{"Листинг 12.8. Пример прогнозирования",0,0,"12.8","Перем МодельПрогноза;

Процедура ПолучитьПрогноз(Кнопка)

	ТаблицаЗначений = Новый ТаблицаЗначений;
	МодельПрогноза.ИсточникДанных = Состав.Выгрузить();
	ТаблицаЗначенийПоследовательности = МодельПрогноза.Выполнить();
			
	Если ТаблицаЗначенийПоследовательности.Количество() > 0 Тогда 
		РезультатПрогноза.Очистить();
		
		Для Каждого Строка Из ТаблицаЗначенийПоследовательности Цикл
			НоваяСтрока = РезультатПрогноза.Добавить();
			НоваяСтрока.Следствие = Строка.Следствие;
			НоваяСтрока.Достоверность = Строка.Достоверность;
		КонецЦикла;
	
	КонецЕсли;
	
	Если РезультатПрогноза.Количество() = 0 Тогда
		Предупреждение(""Предложений нет"");
	Иначе
		ЭлементыФормы.РезультатПрогноза.СоздатьКолонки();
	КонецЕсли;

КонецПроцедуры

Процедура ПолучитьМодельПрогноза(Кнопка)

	Анализ = Новый АнализДанных;

	Анализ.ТипАнализа = Тип(""АнализДанныхПоискАссоциаций"");

	Запрос = Новый Запрос;
	Запрос.Текст = ""
	|ВЫБРАТЬ
	|	Продажи.Регистратор,
	|	Продажи.Номенклатура
	|ИЗ
	|	РегистрНакопления.Продажи.Обороты( , , Регистратор) КАК Продажи
	|"";
				
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Анализ.ИсточникДанных = РезультатЗапроса;
	РезультатАнализа = Анализ.Выполнить();
	МодельПрогноза = РезультатАнализа.СоздатьМодельПрогноза();
	
КонецПроцедуры

РезультатПрогноза.Колонки.Добавить(""Следствие"", , , 35);
РезультатПрогноза.Колонки.Добавить(""Достоверность"", , , 5);
"}
},
{0,
{"Листинг 12.9. Пример работы с колонками модели прогноза",0,0,"12.9","МодельПрогноза.КолонкиРезультата.Добавить(МодельПрогноза.Колонки.Найти(""Следствие"", ТипКолонкиМоделиПрогноза.Прогнозируемая));
МодельПрогноза.КолонкиРезультата.Добавить(МодельПрогноза.Колонки.Найти(""Достоверность"", ТипКолонкиМоделиПрогноза.Прогнозируемая));



"}
}
},
{225,
{"Глава 13. Средства для построения отчетов",1,0,"",""},
{0,
{"Листинг 13.1. Автоматическое заполнение настроек построителя отчета",0,0,"13.1","ТекстЗапроса = 
""ВЫБРАТЬ
|	ТоварыНаСкладахОбороты.Номенклатура КАК Номенклатура,
|	ТоварыНаСкладахОбороты.Склад КАК Склад,
|	СУММА(ТоварыНаСкладахОбороты.КоличествоПриход) КАК КоличествоПриход,
|	СУММА(ТоварыНаСкладахОбороты.КоличествоРасход) КАК КоличествоРасход
|ИЗ
|	РегистрНакопления.ТоварыНаСкладах.Обороты КАК ТоварыНаСкладахОбороты
|
|СГРУППИРОВАТЬ ПО
|	ТоварыНаСкладахОбороты.Склад,
|	ТоварыНаСкладахОбороты.Номенклатура
|
|ИТОГИ ПО
|	ОБЩИЕ,
|	Склад,
|	Номенклатура""
;

Построитель = Новый ПостроительОтчета(ТекстЗапроса);
Построитель.ЗаполнитьНастройки();
"}
},
{0,
{"Листинг 13.2. Пример использования псевдонима поля",0,0,"13.2","""{ВЫБРАТЬ Склад КАК МестоХранения}"""}
},
{0,
{"Листинг 13.3. Пример указания использования подчиненных полей",0,0,"13.3","""{ВЫБРАТЬ Номенклатура.* КАК Товар}"""}
},
{0,
{"Листинг 13.4. Пример использования ключевого слова ВЫБРАТЬ",0,0,"13.4","""ВЫБРАТЬ
|	{ВЫБРАТЬ Номенклатура КАК Товар, Склад, КоличествоПриход КАК Приход}
|	ТоварыНаСкладахОбороты.Номенклатура КАК Номенклатура,
|	ТоварыНаСкладахОбороты.Склад КАК Склад,
|	СУММА(ТоварыНаСкладахОбороты.КоличествоПриход) КАК КоличествоПриход,
|	СУММА(ТоварыНаСкладахОбороты.КоличествоРасход) КАК КоличествоРасход,
|	//   … ""
"}
},
{0,
{"Листинг 13.5. Пример использования ключевого слова ВЫБРАТЬ",0,0,"13.5","""ВЫБРАТЬ
|	{ВЫБРАТЬ Номенклатура.* КАК Товар, Склад, КоличествоПриход КАК Приход}
|	ТоварыНаСкладахОбороты.Номенклатура КАК Номенклатура,
|	ТоварыНаСкладахОбороты.Склад КАК Склад,
|	СУММА(ТоварыНаСкладахОбороты.КоличествоПриход) КАК КоличествоПриход,
|	СУММА(ТоварыНаСкладахОбороты.КоличествоРасход) КАК КоличествоРасход,
|	// …""
"}
},
{0,
{"Листинг 13.6. Пример использования ключевого слова ГДЕ",0,0,"13.6","""ВЫБРАТЬ
|	ТоварыНаСкладах.Номенклатура КАК Номенклатура,
|	ТоварыНаСкладах.Склад КАК Склад,
|	ТоварыНаСкладах.Количество КАК Количество
|ИЗ
|	РегистрНакопления.ТоварыНаСкладах КАК ТоварыНаСкладах
|	{ГДЕ ТоварыНаСкладах.Номенклатура.Код КАК Артикул}
|ИТОГИ ПО
|	ОБЩИЕ,
|	Склад,
|	Номенклатура""
"}
},
{0,
{"Листинг 13.7. Использование ключевого слова УПОРЯДОЧИТЬ ПО",0,0,"13.7","""ВЫБРАТЬ
|	ТоварыНаСкладахОбороты.Номенклатура КАК Номенклатура,
|	ТоварыНаСкладахОбороты.Склад КАК Склад,
|	СУММА(ТоварыНаСкладахОбороты.КоличествоПриход) КАК КоличествоПриход,
|	СУММА(ТоварыНаСкладахОбороты.КоличествоРасход) КАК КоличествоРасход,
|	ТоварыНаСкладахОбороты.Номенклатура.Код КАК НоменклатураКод
|ИЗ
|	РегистрНакопления.ТоварыНаСкладах.Обороты( , , , ) КАК ТоварыНаСкладахОбороты
|
|СГРУППИРОВАТЬ ПО
|	ТоварыНаСкладахОбороты.Склад,
|	ТоварыНаСкладахОбороты.Номенклатура
|
|	{УПОРЯДОЧИТЬ ПО Номенклатура.*}
|	…""
"}
},
{0,
{"Листинг 13.8. Использование предложения ИТОГИ ПО",0,0,"13.8","""ВЫБРАТЬ
|	ТоварыНаСкладахОбороты.Номенклатура КАК Номенклатура,
|	ТоварыНаСкладахОбороты.Склад КАК Склад,
|	СУММА(ТоварыНаСкладахОбороты.КоличествоПриход) КАК КоличествоПриход,
|	СУММА(ТоварыНаСкладахОбороты.КоличествоРасход) КАК КоличествоРасход,
|	ТоварыНаСкладахОбороты.Номенклатура.Код КАК НоменклатураКод
|ИЗ
|	РегистрНакопления.ТоварыНаСкладах.Обороты( , , , ) КАК ТоварыНаСкладахОбороты
|
|СГРУППИРОВАТЬ ПО
|	ТоварыНаСкладахОбороты.Склад,
|	ТоварыНаСкладахОбороты.Номенклатура
|
|ИТОГИ ПО
|	{ИТОГИ ПО Склад КАК Склад, Номенклатура КАК Товар}
|		ОБЩИЕ,
|		Склад,
|		Номенклатура""
"}
},
{0,
{"Листинг 13.9. Указание параметров виртуальных таблиц",0,0,"13.9","""ВЫБРАТЬ
|	ТоварыНаСкладахОбороты.Склад,
|	ТоварыНаСкладахОбороты.Склад.Представление,
|	ТоварыНаСкладахОбороты.Номенклатура,
|	ТоварыНаСкладахОбороты.Номенклатура.Представление,
|	ТоварыНаСкладахОбороты.КоличествоПриход,
|	ТоварыНаСкладахОбороты.КоличествоРасход
|ИЗ
|	РегистрНакопления.ТоварыНаСкладах.Обороты({&НачалоПериода}, {&КонецПериода}, , {Номенклатура.*, Склад}) КАК ТоварыНаСкладахОбороты"";
"}
},
{0,
{"Листинг 13.10. Текст исходного запроса",0,0,"13.10","""ВЫБРАТЬ
|
|	{ВЫБРАТЬ
|		СправочникНоменклатура.Ссылка КАК Товар,
|		СправочникНоменклатура.Артикул КАК Артикул,
|		ТоварыНаСкладахОстатки.КоличествоОстаток КАК Остаток}
|
|	СправочникНоменклатура.Ссылка,
|	СправочникНоменклатура.Представление,
|	СправочникНоменклатура.Артикул,
|	ТоварыНаСкладахОстатки.КоличествоОстаток
|ИЗ
|	Справочник.Номенклатура КАК СправочникНоменклатура
|
|		{ЛЕВОЕ СОЕДИЕНИЕ 
|			РегистрНакопления.ТоварыНаСкладах.Остатки КАК ТоварыНаСкладахОстатки
|
|		ПО 
|			ТоварыНаСкладахОстатки.Номенклатура = СправочникНоменклатура.Ссылка}
|
|	{ГДЕ
|		СправочникНоменклатура.Ссылка КАК Товар}
|
|ГДЕ
|	СправочникНоменклатура.ЭтоГруппа = Ложь
|
|	{УПОРЯДОЧИТЬ ПО 
|		СправочникНоменклатура.Артикул КАК Артикул,
|		СправочникНоменклатура.Ссылка КАК Товар}
|
|	{ИТОГИ ПО СправочникНоменклатура.Ссылка.* КАК Товар}
|
|ИТОГИ Сумма(ТоварыНаСкладахОстатки.КоличествоОстаток) ПО
|	ОБЩИЕ
|АВТОУПОРЯДОЧИВАНИЕ""
"}
},
{0,
{"Листинг 13.11. Результирующий запрос без левого соединения",0,0,"13.11","""ВЫБРАТЬ
|	СправочникНоменклатура.Ссылка КАК Ссылка,
|	СправочникНоменклатура.Представление КАК Представление,
|	СправочникНоменклатура.Артикул КАК Артикул
|ИЗ
|	Справочник.Номенклатура КАК СправочникНоменклатура
|ГДЕ
|	(СправочникНоменклатура.ЭтоГруппа = ЛОЖЬ)
|УПОРЯДОЧИТЬ ПО
|	СправочникНоменклатура.Артикул
|ИТОГИ ПО
|	ОБЩИЕ
|АВТОУПОРЯДОЧИВАНИЕ""
"}
},
{0,
{"Листинг 13.12. Результирующий запрос с левым соединением",0,0,"13.12","""ВЫБРАТЬ
|	СправочникНоменклатура.Ссылка КАК Ссылка,
|	СправочникНоменклатура.Представление КАК Представление,
|	СправочникНоменклатура.Артикул КАК Артикул,
|	ТоварыНаСкладахОстатки.КоличествоОстаток КАК КоличествоОстаток
|ИЗ
|	Справочник.Номенклатура КАК СправочникНоменклатура
|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.ТоварыНаСкладах.Остатки  КАК ТоварыНаСкладахОстатки
|		ПО 
|		ТоварыНаСкладахОстатки.Номенклатура = СправочникНоменклатура.Ссылка
|ГДЕ
|	(СправочникНоменклатура.ЭтоГруппа = ЛОЖЬ)
|УПОРЯДОЧИТЬ ПО
|	СправочникНоменклатура.Артикул
|ИТОГИ СУММА(КоличествоОстаток) ПО
|	ОБЩИЕ
|АВТОУПОРЯДОЧИВАНИЕ""
"}
},
{0,
{"Листинг 13.13. Пример использования повторяющихся псевдонимов",0,0,"13.13","""ВЫБРАТЬ
|
|	{ВЫБРАТЬ
|		Номенклатура КАК Товар,
|		СкладКомпании КАК Склад,
|		КоличествоНачальныйОстаток КАК Остатки,
|		КоличествоКонечныйОстаток КАК Остатки,
|		КоличествоОборот КАК Обороты,
|		КоличествоПриход КАК Обороты,
|		КоличествоРасход КАК Обороты}
|
|	ОстаткиТоваровКомпанииОстаткиИОбороты.Номенклатура КАК Номенклатура,
|	ОстаткиТоваровКомпанииОстаткиИОбороты.Номенклатура.Представление,
|	ОстаткиТоваровКомпанииОстаткиИОбороты.СкладКомпании КАК СкладКомпании,
|	ОстаткиТоваровКомпанииОстаткиИОбороты.СкладКомпании.Представление,
|	СУММА(ОстаткиТоваровКомпанииОстаткиИОбороты.КоличествоНачальныйОстаток) КАК КоличествоНачальныйОстаток,
|	СУММА(ОстаткиТоваровКомпанииОстаткиИОбороты.КоличествоКонечныйОстаток) КАК КоличествоКонечныйОстаток,
|	СУММА(ОстаткиТоваровКомпанииОстаткиИОбороты.КоличествоОборот) КАК КоличествоОборот,
|	СУММА(ОстаткиТоваровКомпанииОстаткиИОбороты.КоличествоПриход) КАК КоличествоПриход,
|	СУММА(ОстаткиТоваровКомпанииОстаткиИОбороты.КоличествоРасход) КАК КоличествоРасход
|ИЗ
|	РегистрНакопления.ОстаткиТоваровКомпании.ОстаткиИОбороты КАК ОстаткиТоваровКомпанииОстаткиИОбороты
|СГРУППИРОВАТЬ ПО
|	ОстаткиТоваровКомпанииОстаткиИОбороты.СкладКомпании,
|	ОстаткиТоваровКомпанииОстаткиИОбороты.Номенклатура,
|	ОстаткиТоваровКомпанииОстаткиИОбороты.Номенклатура.Представление,
|	ОстаткиТоваровКомпанииОстаткиИОбороты.СкладКомпании.Представление
|УПОРЯДОЧИТЬ ПО
|	СкладКомпании,
|	Номенклатура
|ИТОГИ СУММА(КоличествоНачальныйОстаток),
|		СУММА(КоличествоКонечныйОстаток), 
|		СУММА(КоличествоОборот),
|		СУММА(КоличествоПриход),
|		СУММА(КоличествоРасход) 	ПО
|	{ИТОГИ ПО Номенклатура КАК Товар, СкладКомпании КАК Склад}
|	ОБЩИЕ,
|	Номенклатура,
|	СкладКомпании""
"}
},
{0,
{"Листинг 13.14. Изменение заголовков в макете",0,0,"13.14","Построитель.Выполнить();

// Прервать автоматическое формирование макета построителем отчета
Построитель.Макет = Неопределено;

Макет = Построитель.Макет;
ТекущаяОбласть = Неопределено;

// Если пользователь выбрал поле Остатки, заменить в макете надпись Остатки
Если Построитель.ВыбранныеПоля.Найти(""Остатки"") <> Неопределено Тогда
	ТекущаяОбласть = Макет.НайтиТекст(""Остатки"", ТекущаяОбласть, Макет.Область(), Истина, Истина, Истина, Ложь);
	ТекущаяОбласть.Текст = ""Начальный остаток"";
	ТекущаяОбласть = Макет.НайтиТекст(""Остатки"", ТекущаяОбласть, Макет.Область(), Истина, Истина, Истина, Ложь);
	ТекущаяОбласть.Текст = ""Конечный остаток"";
КонецЕсли;

// Если пользователь выбрал поле Обороты, заменть в макете надпись Обороты
Если Построитель.ВыбранныеПоля.Найти(""Обороты"") <> Неопределено Тогда
	ТекущаяОбласть = Макет.НайтиТекст(""Обороты"", ТекущаяОбласть, Макет.Область(), Истина, Истина, Истина, Ложь);
	ТекущаяОбласть.Текст = ""Оборот"";
	ТекущаяОбласть = Макет.НайтиТекст(""Обороты"", ТекущаяОбласть, Макет.Область(), Истина, Истина, Истина, Ложь);
	ТекущаяОбласть.Текст = ""Приход"";
	ТекущаяОбласть = Макет.НайтиТекст(""Обороты"", ТекущаяОбласть, Макет.Область(), Истина, Истина, Истина, Ложь);
	ТекущаяОбласть.Текст = ""Расход"";
КонецЕсли;

// Установить измененный макет построителю
Построитель.Макет = Макет;

Построитель.Вывести();
"}
},
{0,
{"Листинг 13.15. Фрагмент модуля формы обработки",0,0,"13.15","// Сохранить настройки построителя отчета в регистре сведений

НастройкиПостроителя = Построитель.ПолучитьНастройки();

НаборЗаписей = РегистрыСведений.НастройкиОтчетов.СоздатьНаборЗаписей();

// Установить отбор
НаборЗаписей.Отбор.Отчет.Установить(Метаданные().ПолноеИмя(), Истина);
НаборЗаписей.Отбор.ИмяНастройки.Установить(ИмяСохраняемойНастройки, Истина);

// Добавить запись с настройками
ЗаписьРегистра = НаборЗаписей.Добавить();
ЗаписьРегистра.Отчет = Метаданные().ПолноеИмя();
ЗаписьРегистра.ИмяНастройки = ИмяСохраняемойНастройки;
ХранилищеЗначения = Новый ХранилищеЗначения(НастройкиПостроителя);
ЗаписьРегистра.Настройка = ХранилищеЗначения;

НаборЗаписей.Записать();

//	…

//Получить настройки построителя отчета	
	
// Установить отбор
НаборЗаписей = РегистрыСведений.НастройкиОтчетов.СоздатьНаборЗаписей();
НаборЗаписей.Отбор.Отчет.Установить(Метаданные().ПолноеИмя(), Истина);
НаборЗаписей.Отбор.ИмяНастройки.Установить(ИмяЗагружаемойНастройки, Истина);

//Прочитать запись
НаборЗаписей.Прочитать();
НастройкиПостроителя = НаборЗаписей[0].Настройка.Получить();

Построитель.УстановитьНастройки(НастройкиПостроителя);
"}
},
{0,
{"Листинг 13.16. Пример связывания табличных полей с настройками построителя отчета",0,0,"13.16","Перем Построитель;   // построитель отчета, создаваемый конструктором

// Процедура устанавливает связь настроек построителя отчета с табличными
// полями, расположенными в форме.
//
// Параметры:
//  Нет.
//
// Возвращаемое значение:
//  Нет.
//
Процедура КнопкаВыполнитьНажатие(Кнопка)

	ТекстЗапроса = 
	""ВЫБРАТЬ
	|	ТоварыНаСкладахОбороты.Номенклатура КАК Номенклатура,
	|	ТоварыНаСкладахОбороты.Склад КАК Склад,
	|	СУММА(ТоварыНаСкладахОбороты.КоличествоПриход) КАК КоличествоПриход,
	|	СУММА(ТоварыНаСкладахОбороты.КоличествоРасход) КАК КоличествоРасход
	|ИЗ
	|	РегистрНакопления.ТоварыНаСкладах.Обороты КАК ТоварыНаСкладахОбороты
	|
	|СГРУППИРОВАТЬ ПО
	|	ТоварыНаСкладахОбороты.Склад,
	|	ТоварыНаСкладахОбороты.Номенклатура
	|
	|ИТОГИ ПО
	|	ОБЩИЕ,
	|	Склад,
	|	Номенклатура""
	;

	Построитель = Новый ПостроительОтчета(ТекстЗапроса);
	Построитель.ЗаполнитьНастройки();

	// Показать доступные поля построителя
	ДоступныеПоля = Построитель.ДоступныеПоля;
	ЭлементыФормы.ДоступныеПоля.СоздатьКолонки();

	// Показать отбор построителя
	Отбор = Построитель.Отбор;
	ЭлементыФормы.Отбор.СоздатьКолонки();

	// Показать порядок построителя
	Порядок = Построитель.Порядок;
	ЭлементыФормы.Порядок.СоздатьКолонки();

	// Показать измерения строки построителя
	ПолеИзмеренияСтроки = ЭлементыФормы.ИзмеренияСтроки;
	ПолеИзмеренияСтроки.ТипЗначения = Новый ОписаниеТипов(""ИзмеренияПостроителяОтчета"");
	ПолеИзмеренияСтроки.Значение = Построитель.ИзмеренияСтроки;
	ПолеИзмеренияСтроки.СоздатьКолонки();

	// Показать измерения колонки построителя
	ПолеИзмеренияКолонки = ЭлементыФормы.ИзмеренияКолонки;
	ПолеИзмеренияКолонки.ТипЗначения = Новый ОписаниеТипов(""ИзмеренияПостроителяОтчета"");
	ПолеИзмеренияКолонки.Значение = Построитель.ИзмеренияКолонки;
	ПолеИзмеренияКолонки.СоздатьКолонки();

	// Показать выбранные поля построителя
	ПолеВыбранныеПоля = ЭлементыФормы.ВыбранныеПоля;
	ПолеВыбранныеПоля.ТипЗначения = Новый ОписаниеТипов(""ПоляПостроителяОтчета"");
	ПолеВыбранныеПоля.Значение = Построитель.ВыбранныеПоля;
	ПолеВыбранныеПоля.СоздатьКолонки();

	// Показать условное оформление построителя
	ПолеОформление = ЭлементыФормы.УсловноеОформление;
	ПолеОформление.ТипЗначения = Новый ОписаниеТипов(""УсловноеОформление"");
	ПолеОформление.Значение = Построитель.УсловноеОформление;
	ПолеОформление.СоздатьКолонки();

КонецПроцедуры
"}
},
{0,
{"Листинг 13.17. Связь полей ввода с данными",0,0,"13.17","// Связать поля ввода с данными отбора построителя отчета
ЭлементыФормы.ПолеВводаНачалоПериода.Данные = ""Построитель.Отбор.НачалоПериода.Значение"";
ЭлементыФормы.ПолеВводаКонецПериода.Данные = ""Построитель.Отбор.КонецПериода.Значение"";
"}
},
{0,
{"Листинг 13.18. Управление видимостью полей в табличном поле отбора",0,0,"13.18","// Скрыть поля отбора в табличном поле Отбор
НастройкаОтбора = ЭлементыФормы.ТабличноеПолеОтбор.НастройкаОтбора;
НастройкаОтбора.Добавить(""НачалоПериода"", Ложь);
НастройкаОтбора.Добавить(""КонецПериода"", Ложь);
"}
},
{0,
{"Листинг 13.19. Заполнение настроек построителя отчета",0,0,"13.19","Построитель.Текст =
""ВЫБРАТЬ
|	ТоварыНаСкладахОстаткиИОбороты.Склад КАК Склад,
|	ТоварыНаСкладахОстаткиИОбороты.Склад.Представление,
|	ТоварыНаСкладахОстаткиИОбороты.Номенклатура КАК Номенклатура,
|	ТоварыНаСкладахОстаткиИОбороты.Номенклатура.Представление,
|	СУММА(ТоварыНаСкладахОстаткиИОбороты.КоличествоНачальныйОстаток) КАК КоличествоНачальныйОстаток,
|	СУММА(ТоварыНаСкладахОстаткиИОбороты.КоличествоКонечныйОстаток) КАК КоличествоКонечныйОстаток,
|	СУММА(ТоварыНаСкладахОстаткиИОбороты.КоличествоПриход) КАК КоличествоПриход,
|	СУММА(ТоварыНаСкладахОстаткиИОбороты.КоличествоРасход) КАК КоличествоРасход,
|	СУММА(ТоварыНаСкладахОстаткиИОбороты.КоличествоОборот) КАК КоличествоОборот
|ИЗ
|	РегистрНакопления.ТоварыНаСкладах.ОстаткиИОбороты КАК ТоварыНаСкладахОстаткиИОбороты
|СГРУППИРОВАТЬ ПО
|	ТоварыНаСкладахОстаткиИОбороты.Склад,
|	ТоварыНаСкладахОстаткиИОбороты.Номенклатура
|ИТОГИ СУММА(КоличествоНачальныйОстаток), 
|		СУММА(КоличествоКонечныйОстаток), 
|		СУММА(КоличествоПриход), 
|		СУММА(КоличествоРасход), 
|		СУММА(КоличествоОборот) ПО
|	ОБЩИЕ,
|	Склад,
|	Номенклатура""
;   

Построитель.ЗаполнитьНастройки();
"}
},
{0,
{"Листинг 13.20. Пример удаления доступных полей",0,0,"13.20","// Запретить выбор некоторых доступных полей.
ДоступныеПоля = Построитель.ДоступныеПоля;

ДоступныеПоля.Удалить(ДоступныеПоля.Найти(""МетодДополнения""));
ДоступныеПоля.Удалить(ДоступныеПоля.Найти(""Качество""));
ДоступныеПоля.Удалить(ДоступныеПоля.Найти(""ХарактеристикаНоменклатуры""));
ДоступныеПоля.Удалить(ДоступныеПоля.Найти(""СерияНоменклатуры""));
"}
},
{0,
{"Листинг 13.21. Изменение представлений доступных полей построителя отчета",0,0,"13.21","// Изменить представления оставшихся доступных полей
ДоступныеПоля = Построитель.ДоступныеПоля;

ДоступныеПоля.Найти(""КоличествоКонечныйОстаток"").Представление = ""Остаток конечный"";
ДоступныеПоля.Найти(""КоличествоНачальныйОстаток"").Представление = ""Остаток начальный"";
ДоступныеПоля.Найти(""КоличествоОборот"").Представление = ""Оборот"";
ДоступныеПоля.Найти(""КоличествоПриход"").Представление = ""Приход"";
ДоступныеПоля.Найти(""КоличествоРасход"").Представление = ""Расход"";
ДоступныеПоля.Найти(""КонецПериода"").Представление = ""Конец периода"";
ДоступныеПоля.Найти(""НачалоПериода"").Представление = ""Начало периода"";
ДоступныеПоля.Найти(""Номенклатура"").Представление = ""Товар"";
"}
},
{0,
{"Листинг 13.22. Запрет выбора всех подчиненных полей",0,0,"13.22","ДоступныеПоля = Построитель.ДоступныеПоля;
ПолеКачество = ДоступныеПоля.Найти(""Качество"");
ПолеКачество.Поля.Очистить();
"}
},
{0,
{"Листинг 13.23. Запрет выбора некоторых подчиненных полей",0,0,"13.23","ДоступныеПоля = Построитель.ДоступныеПоля;
ПолеСерия = ДоступныеПоля.Найти(""СерияНоменклатуры"");
КоллекцияПолей = ПолеСерия.Поля;
КоллекцияПолей.Удалить(КоллекцияПолей.Найти(""Владелец""));
КоллекцияПолей.Удалить(КоллекцияПолей.Найти(""Предопределенный""));
КоллекцияПолей.Удалить(КоллекцияПолей.Найти(""ПометкаУдаления""));
"}
},
{0,
{"Листинг 13.24. Изменение порядка доступных полей",0,0,"13.24","РасположитьПоле(""Номенклатура"", 0);
РасположитьПоле(""Склад"", 1);
РасположитьПоле(""КоличествоНачальныйОстаток"", 2);
РасположитьПоле(""КоличествоКонечныйОстаток"", 3);
РасположитьПоле(""КоличествоПриход"", 4);
РасположитьПоле(""КоличествоРасход"", 5);
РасположитьПоле(""КоличествоОборот"", 6);
РасположитьПоле(""НачалоПериода"", 7);

// Процедура перемещает доступное поле на указанную позицию.
//
// Параметры:
//  ИмяПоля – Строка – имя перемещаемого поля.
//  Позиция – Число – позиция, на которую должно быть перемещено поле. 
//  Нумерация позиций начанается с 0. 
//
// Возвращаемое значение:
//  Нет.
//
Процедура РасположитьПоле(ИмяПоля, Позиция);

	ДоступныеПоля = Построитель.ДоступныеПоля;
	Поле = ДоступныеПоля.Найти(ИмяПоля);
	Индекс = ДоступныеПоля.Индекс(Поле);

	ДоступныеПоля.Сдвинуть(Поле, Позиция - Индекс);

КонецПроцедуры	
"}
},
{0,
{"Листинг 13.25. Запрет выбора доступного поля в отбор",0,0,"13.25","ДоступныеПоля = Построитель.ДоступныеПоля;
ДоступныеПоля.Найти(""КоличествоОборот"").Отбор = Ложь;
"}
},
{0,
{"Листинг 13.26. Управление отображением групп доступных полей",0,0,"13.26","ПолеДоступныеПоля = ЭлементыФормы.ТабличноеПолеДоступныеПоля;
ПолеДоступныеПоля.ОтображатьОтбор  = Ложь;
ПолеДоступныеПоля.ОтображатьПоля = Ложь;
ПолеДоступныеПоля.ОтображатьПорядок = Ложь;
"}
},
{0,
{"Листинг 13.27. Управление списком значений поля настройки",0,0,"13.27","// Ограничить пользователя в выборе периодичности.
СписокПериодов = Построитель.ДоступныеПоля.Найти(""Периодичность"").СписокЗначений;
СписокПериодов.Удалить(СписокПериодов.НайтиПоЗначению(0));
СписокПериодов.Удалить(СписокПериодов.НайтиПоЗначению(1));
СписокПериодов.Удалить(СписокПериодов.НайтиПоЗначению(3));
СписокПериодов.Удалить(СписокПериодов.НайтиПоЗначению(4));
СписокПериодов.Удалить(СписокПериодов.НайтиПоЗначению(5));
СписокПериодов.Удалить(СписокПериодов.НайтиПоЗначению(7));
СписокПериодов.Удалить(СписокПериодов.НайтиПоЗначению(8));
СписокПериодов.Удалить(СписокПериодов.НайтиПоЗначению(9));
"}
},
{0,
{"Листинг 13.28. Добавление полей порядка построителя отчета",0,0,"13.28","// Добавить новый элемент порядка.
Порядок = Построитель.Порядок;
Порядок.Добавить(""Номенклатура.Код"", ""КодНоменклатуры"", ""Код номенклатуры"", НаправлениеСортировки.Возр);
"}
},
{0,
{"Листинг 13.29. Задание представления полей порядка",0,0,"13.29","// Изменить представление элемента порядка СкладКомпании.
Порядок = Построитель.Порядок;

Для Каждого ЭлементПорядка из Порядок Цикл

	Если ЭлементПорядка.Представление = ""Номенклатура"" Тогда
		ЭлементПорядка.Представление = ""Товар"";
		Прервать;
	КонецЕсли;	

КонецЦикла;
"}
},
{0,
{"Листинг 13.30. Изменение порядка следования полей порядка",0,0,"13.30","// Изменить порядок следования элементов порядка.
Для Счетчик = 0 по Порядок.Количество() - 1 Цикл
	ПолеПорядка = Порядок.Получить(Счетчик);

	Если ПолеПорядка.Представление = ""Товар"" Тогда
		РасположитьПоле(Счетчик, 1);

	ИначеЕсли ПолеПорядка.Представление = ""Склад"" Тогда	
		РасположитьПоле(Счетчик, 0);
	КонецЕсли;	

КонецЦикла;


// Процедура перемещает элемент порядка на указанную позицию.
//
// Параметры:
//  ИндексПоля – Число – индекс перемещаемого элемента.
//  Позиция – Число – позиция, на которую должен быть перемещен элемент. 
//  Нумерация позиций начанается с 0. 
//
// Возвращаемое значение:
//  Нет.
//
Процедура РасположитьПоле(ИндексПоля, Позиция)

	ПоляПорядка = Построитель.Порядок;
	ПоляПорядка.Сдвинуть(ИндексПоля, Позиция - ИндексПоля);

КонецПроцедуры	
"}
},
{0,
{"Листинг 13.31. Изменение направления сортировки",0,0,"13.31","Для Каждого ЭлементПорядка из Построитель.Порядок Цикл

	Если ЭлементПорядка.Представление = ""Номенклатура"" Тогда
		ЭлементПорядка.Направление = НаправлениеСортировки.Убыв;
	КонецЕсли;

КонецЦикла;
"}
},
{0,
{"Листинг 13.32. Добавление полей отбора построителя отчета",0,0,"13.32","Отбор = Построитель.Отбор;
Отбор.Добавить(""НачалоПериода"", , ""Начало периода"").Использование = Истина;
Отбор.Добавить(""КонецПериода"", , ""Конец периода"").Использование = Истина;
"}
},
{0,
{"Листинг 13.33. Вывод измерения Склад в колонках",0,0,"13.33","// Запретить вывод измерения Склад в строках отчета.
ИзмеренияСтроки = Построитель.ИзмеренияСтроки;
ИзмеренияСтроки.Удалить(ИзмеренияСтроки.Найти(""Склад""));
	
// Изменить тип измерения Номенклатура.
ИзмеренияСтроки.Найти(""Номенклатура"").ТипИзмерения = ТипИзмеренияПостроителяОтчета.Иерархия;
	
// Добавить вывод измерения Склад в колонках отчета.
ИзмеренияКолонки = Построитель.ИзмеренияКолонки;
ИзмеренияКолонки.Добавить(""СкладКомпании"", Склад"", ТипИзмеренияПостроителяОтчета.Элементы);
"}
},
{0,
{"Листинг 13.34. Задание представлений выбранных полей",0,0,"13.34","// Запретить вывод некоторых выбранных полей
ВыбранныеПоля = Построитель.ВыбранныеПоля;
ВыбранныеПоля.Удалить(ВыбранныеПоля.Найти(""КоличествоНачальныйОстаток""));
ВыбранныеПоля.Удалить(ВыбранныеПоля.Найти(""КоличествоОборот""));
ВыбранныеПоля.Удалить(ВыбранныеПоля.Найти(""КоличествоПриход""));
ВыбранныеПоля.Удалить(ВыбранныеПоля.Найти(""КоличествоРасход""));
	
// Изменить представление оставшихся выбранных полей
ВыбранныеПоля.Найти(""СкладКомпании"").Представление = ""Склад"";
ВыбранныеПоля.Найти(""КоличествоКонечныйОстаток"").Представление = ""Остаток конечный"";
"}
},
{0,
{"Листинг 13.35. Явное указание поля табличного документа для вывода отчета",0,0,"13.35","//	…
Построитель.Вывести(ЭлементыФормы.ПолеОтчета);
//	…
"}
},
{0,
{"Листинг 13.36. Вывод отчета в диаграмму",0,0,"13.36","//	…
Построитель.Вывести(ЭлементыФормы.Диаграмма);
//	…
"}
},
{0,
{"Листинг 13.37. Установка внешнего макета построителю отчета",0,0,"13.37","// Вывести отчет в собственный макет
Построитель.Макет = ПолучитьМакет(""СобственныйМакет"");
Построитель.Выполнить();
Построитель.Вывести();
"}
},
{0,
{"Листинг 13.38. Использование собственного макета и макета построителя по умолчанию",0,0,"13.38","// Вывести отчет в собственный макет, а затем - в макет по умолчанию
Построитель.Макет = ПолучитьМакет(""СобственныйМакет"");
Построитель.Выполнить();
Построитель.Вывести();

Построитель.Макет = Неопределено;
Построитель.Выполнить();
Построитель.Вывести();
"}
},
{0,
{"Листинг 13.39. Использование стандартного оформления",0,0,"13.39","Построитель.МакетОформления = ПолучитьМакетОформления(СтандартноеОформление.Апельсин);
"}
},
{0,
{"Листинг 13.40. Задание фиксированного макета для вывода детальных записей",0,0,"13.40","// Задать фиксированный макет детальных записей
Построитель.МакетДетальныхЗаписей = ПолучитьМакет(""ЧерноБелыйМакет"").ПолучитьОбласть(""ДетальныеЗаписи"");
"}
},
{0,
{"Листинг 13.41. Назначение области для вывода детальных записей",0,0,"13.41","// Назначить область для вывода детальных записей
Построитель.Макет = ПолучитьМакет(""ЧерноБелыйМакет"");	
Построитель.МакетДетальныхЗаписей = ""ДетальныеЗаписи"";
"}
},
{0,
{"Листинг 13.42. Задание макета для вывода иерархии номенклатуры",0,0,"13.42","//Задать макет для вывода иерархии номенклатуры
Построитель.ИзмеренияСтроки.Найти(""Номенклатура"").МакетИерархии = ПолучитьМакет(""ЧерноБелыйМакет"").ПолучитьОбласть(""ИерархияНоменклатуры"");
"}
},
{0,
{"Листинг 13.43. Назначение существующей области макета для вывода иерархии номенклатуры",0,0,"13.43","// Назначить область для вывода иерархии номенклатуры
Построитель.Макет = ПолучитьМакет(""ЧерноБелыйМакет"");	
Построитель.ИзмеренияСтроки.Найти(""Номенклатура"").МакетИерархии  = ""ИерархияНоменклатуры"";
"}
},
{0,
{"Листинг 13.44. Отображение макета оформления Асфальт",0,0,"13.44","// Получить макет оформления Асфальт как табличный документ
ПолучитьМакетОформления(СтандартноеОформление.Асфальт).Показать();
"}
},
{0,
{"Листинг 13.45. Добавление элемента условного оформления",0,0,"13.45","// Установить условное оформление отчета
НоваяНастройкаОформления = Построитель.УсловноеОформление.Добавить(""КрасныйЦвет"");
НоваяНастройкаОформления.Заголовок = ""Малый расход красным"";
НоваяНастройкаОформления.Использование = Истина;
"}
},
{0,
{"Листинг 13.46. Пример оформления поля",0,0,"13.46"," // Установить условное оформление отчета
НоваяНастройкаОформления = Построитель.УсловноеОформление.Добавить(""КрасныйЦвет"");
НоваяНастройкаОформления.Заголовок = ""Малый расход красным"";
НоваяНастройкаОформления.Использование = Истина;
	
НоваяОбласть = НоваяНастройкаОформления.Область.Добавить(""КоличествоРасход"");
НоваяОбласть.ТипОбласти = ТипОбластиОформления.Поле;
"}
},
{0,
{"Листинг 13.47. Пример задания отбора условного оформления",0,0,"13.47","// Установить условное оформление отчета
НоваяНастройкаОформления = Построитель.УсловноеОформление.Добавить(""КрасныйЦвет"");
НоваяНастройкаОформления.Заголовок = ""Малый расход красным"";
НоваяНастройкаОформления.Использование = Истина;
	
НоваяОбласть = НоваяНастройкаОформления.Область.Добавить(""КоличествоРасход"");
НоваяОбласть.ТипОбласти = ТипОбластиОформления.Поле;
	
НовыйОтбор = НоваяНастройкаОформления.Отбор.Добавить(""КоличествоРасход"");
НовыйОтбор.ВидСравнения = ВидСравнения.Меньше;
НовыйОтбор.Значение = 15;
НовыйОтбор.Использование = Истина;
"}
},
{0,
{"Листинг 13.48. Пример задания оформления",0,0,"13.48","// Установить условное оформление отчета
НоваяНастройкаОформления = Построитель.УсловноеОформление.Добавить(""КрасныйЦвет"");
НоваяНастройкаОформления.Заголовок = ""Малый расход красным"";
НоваяНастройкаОформления.Использование = Истина;
	
НоваяОбласть = НоваяНастройкаОформления.Область.Добавить(""КоличествоРасход"");
НоваяОбласть.ТипОбласти = ТипОбластиОформления.Поле;
	
НовыйОтбор = НоваяНастройкаОформления.Отбор.Добавить(""КоличествоРасход"");
НовыйОтбор.ВидСравнения = ВидСравнения.Меньше;
НовыйОтбор.Значение = 15;
НовыйОтбор.Использование = Истина;
	
НоваяНастройкаОформления.Оформление.ЦветТекста.Значение = WebЦвета.Красный;
НоваяНастройкаОформления.Оформление.ЦветТекста.Использование = Истина;
"}
},
{0,
{"Листинг 13.49. Размещение измерений отдельно",0,0,"13.49","// Размещать измерения в разных колонках
Построитель.РазмещениеИзмеренийВСтроках = ТипРазмещенияИзмерений.Отдельно;
"}
},
{0,
{"Листинг 13.50. Размещение измерений отдельно и только в итогах",0,0,"13.50","// Размещать измерения в разных колонках и только в итогах
Построитель.РазмещениеИзмеренийВСтроках = ТипРазмещенияИзмерений.ОтдельноИТолькоВИтогах;
"}
},
{0,
{"Листинг 13.51. Размещение измерений вместе",0,0,"13.51","// Размещать измерения в одной колонке
Построитель.РазмещениеИзмеренийВСтроках = ТипРазмещенияИзмерений.Вместе;
"}
},
{0,
{"Листинг 13.52. Размещение итогов в заголовках группировок",0,0,"13.52","// Размещать итоги в заголовках группировок
Построитель.РазмещениеИзмеренийВСтроках = ТипРазмещенияИзмерений.Вместе;
Построитель.РазмещениеИтоговВСтроках = ТипРазмещенияИтогов.Заголовок;
"}
},
{0,
{"Листинг 13.53. Размещение итогов в заголовках и подвале группировок",0,0,"13.53","// Размещать итоги в заголовках и подвалах группировок
Построитель.РазмещениеИзмеренийВСтроках = ТипРазмещенияИзмерений.Вместе;
Построитель.РазмещениеИтоговВСтроках = ТипРазмещенияИтогов.ЗаголовокИПодвал;
"}
},
{0,
{"Листинг 13.54. Размещение итогов в подвале группировок",0,0,"13.54","// Размещать итоги в подвалах группировок
Построитель.РазмещениеИзмеренийВСтроках = ТипРазмещенияИзмерений.Вместе;
Построитель.РазмещениеИтоговВСтроках = ТипРазмещенияИтогов.Подвал;
"}
},
{0,
{"Листинг 13.55. Размещение итогов только в подвале",0,0,"13.55","// Размещать итоги только в подвалах группировок
Построитель.РазмещениеИзмеренийВСтроках = ТипРазмещенияИзмерений.Вместе;
Построитель.РазмещениеИтоговВСтроках = ТипРазмещенияИтогов.ТолькоПодвал;
Построитель.Выполнить();
	
РезультирующийДокумент = Новый ТабличныйДокумент;
Построитель.Вывести(РезультирующийДокумент);

// Изменить расположение маркеров горизонтальных секций
РезультирующийДокумент.ИтогиСнизу = Истина;
РезультирующийДокумент.Показать();
"}
},
{0,
{"Листинг 13.56. Изменение расположения маркеров горизонтальных секций",0,0,"13.56","// …
// Изменить расположение маркеров горизонтальных секций
РезультирующийДокумент.ИтогиСнизу = Истина;
// …
"}
},
{0,
{"Листинг 13.57. Расположение реквизитов отдельно",0,0,"13.57","// Размещать реквизиты измерений в отдельных колонках.
Построитель.РазмещениеИзмеренийВСтроках = ТипРазмещенияИзмерений.Вместе;
Построитель.РазмещениеИтоговВСтроках = ТипРазмещенияИтогов.Заголовок;
Построитель.РазмещениеРеквизитовИзмеренийВСтроках = ТипРазмещенияРеквизитовИзмерений.Отдельно;
"}
},
{0,
{"Листинг 13.58. Размещение реквизитов отдельно",0,0,"13.58","// Размещать реквизиты измерений в отдельных колонках.
Построитель.РазмещениеИзмеренийВСтроках = ТипРазмещенияИзмерений.Отдельно;
Построитель.РазмещениеИтоговВСтроках = ТипРазмещенияИтогов.Заголовок;
Построитель.РазмещениеРеквизитовИзмеренийВСтроках = ТипРазмещенияРеквизитовИзмерений.Отдельно;
"}
},
{0,
{"Листинг 13.59. Размещение реквизитов вместе",0,0,"13.59","// Размещать реквизиты измерений в одной колонке.
Построитель.РазмещениеИзмеренийВСтроках = ТипРазмещенияИзмерений.Вместе;
Построитель.РазмещениеИтоговВСтроках = ТипРазмещенияИтогов.Заголовок;
Построитель.РазмещениеРеквизитовИзмеренийВСтроках = ТипРазмещенияРеквизитовИзмерений.Вместе;
"}
},
{0,
{"Листинг 13.60. Размещение реквизитов вместе с измерениями",0,0,"13.60","// Размещать реквизиты измерений в одной колонке.
Построитель.РазмещениеИзмеренийВСтроках = ТипРазмещенияИзмерений.Вместе;
Построитель.РазмещениеИтоговВСтроках = ТипРазмещенияИтогов.Заголовок;
Построитель.РазмещениеРеквизитовИзмеренийВСтроках = ТипРазмещенияРеквизитовИзмерений.ВместеСИзмерениями;
"}
},
{0,
{"Листинг 13.61. Текст результирующего запроса",0,0,"13.61","""ВЫБРАТЬ
|	ТоварыНаСкладахОбороты.Номенклатура КАК Товар,
|	ТоварыНаСкладахОбороты.Номенклатура.Представление КАК НоменклатураПредставление,
|	ТоварыНаСкладахОбороты.КоличествоПриход КАК Приход
|ИЗ
|	РегистрНакопления.ТоварыНаСкладах.Обороты( , , , Номенклатура В ИЕРАРХИИ(&Параметр1) И Номенклатура В ИЕРАРХИИ(&Параметр2) И Склад = &Параметр3) КАК ТоварыНаСкладахОбороты
|
|ИТОГИ ПО
|	ОБЩИЕ
|АВТОУПОРЯДОЧИВАНИЕ""

"}
},
{0,
{"Листинг 13.62. Текст результирующего запроса",0,0,"13.62","""ВЫБРАТЬ
|	ТоварыНаСкладахОбороты.Номенклатура КАК Товар,
|	ТоварыНаСкладахОбороты.Номенклатура.Представление КАК НоменклатураПредставление,
|	ТоварыНаСкладахОбороты.КоличествоПриход КАК Приход
|ИЗ
|	РегистрНакопления.ТоварыНаСкладах.Обороты( , , , Номенклатура В ИЕРАРХИИ(&Параметр1) И Склад = &Параметр2) КАК ТоварыНаСкладахОбороты
|
|ИТОГИ ПО
|	ОБЩИЕ
|АВТОУПОРЯДОЧИВАНИЕ""

"}
},
{0,
{"Листинг 13.63. Пример вывода дополнительной информации в отчет",0,0,"13.63","// Продолжить автоматическое формирование макета.
Построитель.Макет = Неопределено;

МакетПостроителя = Построитель.Макет;

// Получить области заголовка и подвала.
ОбластьЗаголовока = МакетПостроителя.Область(""Заголовок"");
ОбластьПодвала = МакетПостроителя.Область(""Подвал"");

// Вывести текст во вторую и третью строки области заголовка
МакетПостроителя.Область(""R""+ Строка(ОбластьЗаголовока.Верх + 1) + ""C2"").Текст = ""Остатки товаров на складах"";
МакетПостроителя.Область(""R""+ Строка(ОбластьЗаголовока.Верх + 2) + ""C2"").Текст = ""по состоянию на "" + ТекущаяДата();

// Вывести текст в строку подвала
МакетПостроителя.Область(""R""+ Строка(ОбластьПодвала.Верх) + ""C2"").Текст = ""отчет сформирован пользователем "" + ИмяПользователя();

// Установить построителю измененный макет.
Построитель.Макет = МакетПостроителя;

Построитель.Выполнить();
Построитель.Вывести();

"}
},
{0,
{"Листинг 13.64. Пример установки ширины колонок, выводимых в отчет",0,0,"13.64","Построитель.Текст =
""ВЫБРАТЬ
|	ТоварыНаСкладахОстаткиИОбороты.Склад КАК Склад,
|	ТоварыНаСкладахОстаткиИОбороты.Склад.Представление,
|	ТоварыНаСкладахОстаткиИОбороты.Номенклатура КАК Номенклатура,
|	ТоварыНаСкладахОстаткиИОбороты.Номенклатура.Представление,
|	СУММА(ТоварыНаСкладахОстаткиИОбороты.КоличествоКонечныйОстаток) КАК Остаток
|ИЗ
|	РегистрНакопления.ТоварыНаСкладах.ОстаткиИОбороты КАК ТоварыНаСкладахОстаткиИОбороты
|
|СГРУППИРОВАТЬ ПО
|	ТоварыНаСкладахОстаткиИОбороты.Склад,
|	ТоварыНаСкладахОстаткиИОбороты.Номенклатура,
|	ТоварыНаСкладахОстаткиИОбороты.Склад.Представление,
|	ТоварыНаСкладахОстаткиИОбороты.Номенклатура.Представление
|
|ИТОГИ СУММА(Остаток) ПО
|	ОБЩИЕ,
|	Склад ИЕРАРХИЯ,
|	Номенклатура ИЕРАРХИЯ""
;

Построитель.ЗаполнитьНастройки();

// Размещать измерения в одной колонке.
Построитель.РазмещениеИзмеренийВСтроках = ТипРазмещенияИзмерений.Вместе;
	
// Получить макет построителя отчета по умолчанию.
Построитель.Макет = Неопределено;
МакетПостроителя = Построитель.Макет;
	
// Изменить макет.
Если (Построитель.ИзмеренияСтроки.Количество() <> 0) И (Построитель.ИзмеренияКолонки.Количество() <> 0) Тогда

	// Формируется кросс-отчет.

	// Задать ширину колонок для вывода ресурсов.
	МакетПостроителя.Область(""Ресурсы"").ШиринаКолонки = 10;
	МакетПостроителя.Область(""РесурсыИтогПоСтроке"").ШиринаКолонки = 10;

	// Задать формат областей для вывода ресурсов.
	МакетПостроителя.Область(""Ресурсы"").Формат = ""ЧДЦ=2"";
	МакетПостроителя.Область(""РесурсыИтогПоСтроке"").Формат = ""ЧДЦ=2"";
	МакетПостроителя.Область(""РесурсыИтогПоКолонке"").Формат = ""ЧДЦ=2"";
	МакетПостроителя.Область(""ОбщиеИтоги"").Формат = ""ЧДЦ=2"";

	// Задать положение заголовков ресурсов.
	МакетПостроителя.Область(""Склад"").ГоризонтальноеПоложение = ГоризонтальноеПоложение.Право;
	МакетПостроителя.Область(""ЗаголовокИтогаПоСтроке"").ГоризонтальноеПоложение = ГоризонтальноеПоложение.Право;

Иначе

	// Формируется линейный отчет.

	ТекущаяОбласть = Неопределено;
	ШиринаКолонкиНеУстановлена = Истина;
	Пока Истина Цикл
		ТекущаяОбласть = МакетПостроителя.НайтиТекст(""Остаток"", ТекущаяОбласть, МакетПостроителя.Область(), Истина, Истина, Истина, Ложь);
		Если ТекущаяОбласть <> Неопределено Тогда
			Если ТекущаяОбласть.Параметр = ""Остаток"" Тогда

				// Задать ширину колонок и формат ячеек для вывода ресурсов
				Если ШиринаКолонкиНеУстановлена Тогда
					ТекущаяОбласть.ШиринаКолонки = 10;
					ШиринаКолонкиНеУстановлена = Ложь;
				КонецЕсли;
				ТекущаяОбласть.Формат = ""ЧДЦ=2"";

			Иначе

				// Задать положение заголовока ресурсов
				ТекущаяОбласть.ГоризонтальноеПоложение = ГоризонтальноеПоложение.Право;
			КонецЕсли;

		Иначе
			Прервать;
		КонецЕсли;
	КонецЦикла;
КонецЕсли;
	
// Установить построителю измененный макет.
Построитель.Макет = МакетПостроителя;

// Оформить макет.
Построитель.МакетОформления = ПолучитьМакетОформления(СтандартноеОформление.Лед);
Построитель.ОформитьМакет();
Построитель.МакетОформления = Неопределено;
	
// Выполнить запрос и вывести отчет.	
Построитель.Выполнить();
Построитель.Вывести();
"}
},
{0,
{"Листинг 13.65. Фрагмент получения макета построителя отчета",0,0,"13.65","// …
// Получить макет построителя отчета по умолчанию.
Построитель.Макет = Неопределено;
МакетПостроителя = Построитель.Макет;
// …
"}
},
{0,
{"Листинг 13.66. Фрагмент оформления макета",0,0,"13.66","// …
// Оформить макет.
Построитель.МакетОформления = ПолучитьМакетОформления(СтандартноеОформление.Лед);
Построитель.ОформитьМакет();
Построитель.МакетОформления = Неопределено;
// …
"}
},
{0,
{"Листинг 13.67. Пример передачи значения параметра в запрос построителя отчета",0,0,"13.67","Построитель.Текст =
""ВЫБРАТЬ
|	ТоварыНаСкладахОстаткиИОбороты.Склад КАК Склад,
|	ТоварыНаСкладахОстаткиИОбороты.Склад.Представление,
|	ТоварыНаСкладахОстаткиИОбороты.Номенклатура КАК Номенклатура,
|	ТоварыНаСкладахОстаткиИОбороты.Номенклатура.Представление,
|	СУММА(ТоварыНаСкладахОстаткиИОбороты.КоличествоКонечныйОстаток) КАК Остаток
|ИЗ
|	РегистрНакопления.ТоварыНаСкладах.ОстаткиИОбороты( , , , , Склад = &Склад) КАК ТоварыНаСкладахОстаткиИОбороты
|
|СГРУППИРОВАТЬ ПО
|	ТоварыНаСкладахОстаткиИОбороты.Склад,
|	ТоварыНаСкладахОстаткиИОбороты.Номенклатура,
|	ТоварыНаСкладахОстаткиИОбороты.Склад.Представление,
|	ТоварыНаСкладахОстаткиИОбороты.Номенклатура.Представление
|
|ИТОГИ СУММА(Остаток) ПО
|	ОБЩИЕ,
|	Склад ИЕРАРХИЯ,
|	Номенклатура ИЕРАРХИЯ""
;

Построитель.ЗаполнитьНастройки();

// Размещать измерения в одной колонке.
Построитель.РазмещениеИзмеренийВСтроках = ТипРазмещенияИзмерений.Вместе;
	
Построитель.Параметры.Вставить(""Склад"", ВыбранныйСклад);

// Выполнить запрос и вывести отчет.	
Построитель.Выполнить();
Построитель.Вывести();
"}
},
{0,
{"Листинг 13.68. Пример передачи значения параметра построителю отчета",0,0,"13.68","Построитель.Текст =
""ВЫБРАТЬ
|	ТоварыНаСкладахОстаткиИОбороты.Склад КАК Склад,
|	ТоварыНаСкладахОстаткиИОбороты.Склад.Представление,
|	ТоварыНаСкладахОстаткиИОбороты.Номенклатура КАК Номенклатура,
|	ТоварыНаСкладахОстаткиИОбороты.Номенклатура.Представление,
|	СУММА(ТоварыНаСкладахОстаткиИОбороты.КоличествоКонечныйОстаток) КАК Остаток
|ИЗ
|	РегистрНакопления.ТоварыНаСкладах.ОстаткиИОбороты( , , , , {Склад}) КАК ТоварыНаСкладахОстаткиИОбороты
|
|СГРУППИРОВАТЬ ПО
|	ТоварыНаСкладахОстаткиИОбороты.Склад,
|	ТоварыНаСкладахОстаткиИОбороты.Номенклатура,
|	ТоварыНаСкладахОстаткиИОбороты.Склад.Представление,
|	ТоварыНаСкладахОстаткиИОбороты.Номенклатура.Представление
|
|ИТОГИ СУММА(Остаток) ПО
|	ОБЩИЕ,
|	Склад ИЕРАРХИЯ,
|	Номенклатура ИЕРАРХИЯ""
;

// Размещать измерения в одной колонке.
Построитель.РазмещениеИзмеренийВСтроках = ТипРазмещенияИзмерений.Вместе;
	
ОтборПоСкладу = Построитель.Отбор.Добавить(""Склад"");
ОтборПоСкладу.Использование = Истина;
ОтборПоСкладу.ВидСравнения = ВидСравнения.Равно;
ОтборПоСкладу.Значение = ВыбранныйСклад;
	
// Выполнить запрос и вывести отчет.	
Построитель.Выполнить();
Построитель.Вывести();
"}
},
{0,
{"Листинг 13.69. Пример результирующего запроса",0,0,"13.69","""ВЫБРАТЬ
|	ТоварыНаСкладахОстаткиИОбороты.Склад КАК Склад,
|	ТоварыНаСкладахОстаткиИОбороты.Склад.Представление КАК СкладПредставление,
|	ТоварыНаСкладахОстаткиИОбороты.Номенклатура КАК Номенклатура,
|	ТоварыНаСкладахОстаткиИОбороты.Номенклатура.Представление КАК НоменклатураПредставление,
|	СУММА(ТоварыНаСкладахОстаткиИОбороты.КоличествоКонечныйОстаток) КАК Остаток
|ИЗ
|	РегистрНакопления.ТоварыНаСкладах.ОстаткиИОбороты( , , , , Склад = &Параметр1) КАК ТоварыНаСкладахОстаткиИОбороты
|
|СГРУППИРОВАТЬ ПО
|	ТоварыНаСкладахОстаткиИОбороты.Склад,
|	ТоварыНаСкладахОстаткиИОбороты.Номенклатура,
|	ТоварыНаСкладахОстаткиИОбороты.Склад.Представление,
|	ТоварыНаСкладахОстаткиИОбороты.Номенклатура.Представление
|
|ИТОГИ СУММА(Остаток) ПО
|	ОБЩИЕ,
|	Склад ИЕРАРХИЯ,
|	Номенклатура ИЕРАРХИЯ""
"}
},
{0,
{"Листинг 13.70. Пример формируемого отчета",0,0,"13.70","Построитель.Текст =
""ВЫБРАТЬ
|	КадровыйПлан.Подразделение КАК Подразделение,
|	КадровыйПлан.Подразделение.Представление,
|	СУММА(КадровыйПлан.Количество) КАК Должности
|ИЗ
|	РегистрСведений.КадровыйПлан КАК КадровыйПлан
|
|СГРУППИРОВАТЬ ПО
|	КадровыйПлан.Подразделение,
|	КадровыйПлан.Подразделение.Представление
|
|ИТОГИ СУММА(Должности) ПО
|	ОБЩИЕ,
|	Подразделение ИЕРАРХИЯ
|АВТОУПОРЯДОЧИВАНИЕ""	
;

Построитель.ЗаполнитьНастройки();

// Размещать измерения в одной колонке.
Построитель.РазмещениеИзмеренийВСтроках = ТипРазмещенияИзмерений.Вместе;
	
// Оформить макет
Построитель.МакетОформления = ПолучитьМакетОформления(СтандартноеОформление.Лед);

// Выполнить запрос и вывести отчет.	
Построитель.Выполнить();
Построитель.Вывести();

 
"}
},
{0,
{"Листинг 13.71. Пример формируемого отчета",0,0,"13.71","Построитель.ЗаполнитьНастройки();

// Размещать измерения в одной колонке.
Построитель.РазмещениеИзмеренийВСтроках = ТипРазмещенияИзмерений.Вместе;

// Оформить макет
Построитель.МакетОформления = ПолучитьМакетОформления(СтандартноеОформление.Лед);

// Изменить группировки
Построитель.ИзмеренияСтроки.Найти(""Подразделение"").ТипИзмерения = ТипИзмеренияПостроителяОтчета.ТолькоИерархия;
Построитель.ИзмеренияСтроки.Добавить(""Подразделение"", , ТипИзмеренияПостроителяОтчета.Элементы);
	
// Выполнить запрос и вывести отчет.	
Построитель.Выполнить();
Построитель.Вывести();
"}
},
{0,
{"Листинг 13.72. Пример запроса о движении денежных средств по контрагентам",0,0,"13.72","""ВЫБРАТЬ
|	ДвиженияДенежныхСредствОбороты.Контрагент КАК Контрагент,
|	ДвиженияДенежныхСредствОбороты.Контрагент.Представление,
|	ДвиженияДенежныхСредствОбороты.ПриходРасход КАК ПриходРасход,
|	ДвиженияДенежныхСредствОбороты.БанковскийСчетКасса.ВалютаДенежныхСредств КАК БанковскийСчетКассаВалютаДенежныхСредств,
|	ДвиженияДенежныхСредствОбороты.БанковскийСчетКасса.ВалютаДенежныхСредств.Представление,
|	СУММА(ДвиженияДенежныхСредствОбороты.СуммаОборот) КАК СуммаОборот,
|	СУММА(ДвиженияДенежныхСредствОбороты.СуммаУпрОборот) КАК СуммаУпрОборот
|ИЗ
|	РегистрНакопления.ДвиженияДенежныхСредств.Обороты КАК ДвиженияДенежныхСредствОбороты
|СГРУППИРОВАТЬ ПО
|	ДвиженияДенежныхСредствОбороты.Контрагент,
|	ДвиженияДенежныхСредствОбороты.ПриходРасход,
|	ДвиженияДенежныхСредствОбороты.БанковскийСчетКасса.ВалютаДенежныхСредств,
|	ДвиженияДенежныхСредствОбороты.БанковскийСчетКасса.ВалютаДенежныхСредств.Представление,
|	ДвиженияДенежныхСредствОбороты.Контрагент.Представление
|ИТОГИ СУММА(СуммаОборот), СУММА(СуммаУпрОборот) ПО
|	ОБЩИЕ,
|	Контрагент,
|	ПриходРасход,
|	БанковскийСчетКассаВалютаДенежныхСредств
|АВТОУПОРЯДОЧИВАНИЕ""
"}
},
{0,
{"Листинг 13.73. Отмена вывода итогов в определенных группировках",0,0,"13.73","// Размещать измерения в одной колонке.
Построитель.РазмещениеИзмеренийВСтроках = ТипРазмещенияИзмерений.Вместе;

Построитель.Макет = Неопределено;
МакетПостроителя = Построитель.Макет;

// Удалить поле СуммаОборот из всех областей группировок,
// выше группировки ВалютаДенежныхСредств
Для Каждого ТекущееИзмерениеСтроки Из Построитель.ИзмеренияСтроки Цикл

	Если ТекущееИзмерениеСтроки.ПутьКДанным = ""БанковскийСчетКассаВалютаДенежныхСредств"" Тогда
		Прервать;

	Иначе
			
		// Найти области с именем группировки илиа с именем группировки
		// и словом Иерархия
		ИменаОбластей = Новый Массив;
		ИменаОбластей.Добавить(ТекущееИзмерениеСтроки.Имя);
		ИменаОбластей.Добавить(ТекущееИзмерениеСтроки.Имя + ""Иерархия"");
		ИменаОбластей.Добавить(""ОбщиеИтоги"");

		Для Каждого ИмяИзмерения Из ИменаОбластей Цикл
			Область = МакетПостроителя.Области.Найти(ИмяИзмерения);
			Если Область <> Неопределено Тогда
				ТекущаяОбласть = Неопределено;
				Пока Истина Цикл

					// Найти ячейку, в которой находится
					// параметр - СуммаОборот
					ТекущаяОбласть = МакетПостроителя.НайтиТекст(""СуммаОборот"", ТекущаяОбласть, Область, Истина, Истина, Истина, Ложь);
					Если ТекущаяОбласть <> Неопределено Тогда
						Если ТекущаяОбласть.Параметр = ""СуммаОборот"" Тогда

							// Удалить параметр из области
							ТекущаяОбласть.Параметр = """";
						КонецЕсли;

					Иначе
						Прервать;
					КонецЕсли;
				КонецЦикла;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
КонецЦикла;

Построитель.Макет = МакетПостроителя;

// Выполнить запрос и вывести отчет.	
Построитель.Выполнить();
Построитель.Вывести();
"}
},
{0,
{"Листинг 13.74. Пример запроса из отчета по проводкам",0,0,"13.74","""ВЫБРАТЬ
|	ДвиженияССубконто.Период КАК Период,
|	ДвиженияССубконто.СчетДт,
|	ДвиженияССубконто.СчетКт,
|	ДвиженияССубконто.Сумма КАК Сумма,
|	ДвиженияССубконто.Содержание
|ИЗ
|	РегистрБухгалтерии.ОсновнойРегистрБухгалтерии.ДвиженияССубконто(&НачПериода, &КонПериода, ) КАК ДвиженияССубконто
|
|УПОРЯДОЧИТЬ ПО
|	Период
|ИТОГИ
|	СУММА(Сумма)
|ПО
|	ОБЩИЕ""
"}
},
{0,
{"Листинг 13.75. Текст запроса для отчета по проводкам",0,0,"13.75","""ВЫБРАТЬ
|	ДвиженияССубконто.Период КАК Период,
|	ДвиженияССубконто.СчетДт,
|	ДвиженияССубконто.СчетКт,
|	ДвиженияССубконто.Сумма КАК Сумма,
|	ДвиженияССубконто.Содержание
|ИЗ
|	РегистрБухгалтерии.ОсновнойРегистрБухгалтерии.ДвиженияССубконто(&НачПериода, &КонПериода, Счет В ИЕРАРХИИ (&Счет) {Субконто1.*, Субконто2.*}) КАК ДвиженияССубконто
|
|УПОРЯДОЧИТЬ ПО
|	Период
|ИТОГИ
|	СУММА(Сумма)
|ПО
|	ОБЩИЕ""
"}
},
{0,
{"Листинг 13.76. Предложение, использующее расширение языка запроса  построителя отчета",0,0,"13.76","""{Субконто1.*, Субконто2.*}"""}
},
{0,
{"Листинг 13.77. Текст запроса для отчета по проводкам",0,0,"13.77","Процедура ОтчетПоПроводкамПостроителемИнициализация()
	
	Построитель.Текст =
	""ВЫБРАТЬ
	|	ДвиженияССубконто.Период КАК Период,
	|	ДвиженияССубконто.СчетДт,
	|	ДвиженияССубконто.СчетКт,
	|	ДвиженияССубконто.Сумма КАК Сумма,
	|	ДвиженияССубконто.Содержание
	|ИЗ
	|	РегистрБухгалтерии.ОсновнойРегистрБухгалтерии.ДвиженияССубконто(&НачПериода, &КонПериода, Счет В ИЕРАРХИИ (&Счет) "" + ТекстОтбораПоСубконто + "") КАК ДвиженияССубконто
	|
	|УПОРЯДОЧИТЬ ПО
	|	Период
	|ИТОГИ
	|	СУММА(Сумма)
	|ПО
	|	ОБЩИЕ"";

КонецПроцедуры
"}
},
{0,
{"Листинг 13.78. Пример обработки события выбора счета в диалоге",0,0,"13.78","Если Счет.Пустая() Тогда
	Возврат;
КонецЕсли; 
	
Пока Построитель.Отбор.Количество() > 0 Цикл
	Построитель.Отбор.Удалить(0);
КонецЦикла;
    	
ТекстОтбораПоСубконто = """";
	
Если Счет.ВидыСубконто.Количество() > 0 Тогда
	Для Каждого ВидСубконто Из Счет.ВидыСубконто Цикл
		ТекстОтбораПоСубконто = ТекстОтбораПоСубконто + "", Субконто"" + ВидСубконто.НомерСтроки + "".*"";
	КонецЦикла;
		
	ТекстОтбораПоСубконто = Прав(ТекстОтбораПоСубконто, СтрДлина(ТекстОтбораПоСубконто)-1);
	ТекстОтбораПоСубконто = ""{"" + ТекстОтбораПоСубконто + ""}"";
							
	ОтчетПоПроводкамПостроителемИнициализация();
			
	Для Каждого ВидСубконто Из Счет.ВидыСубконто Цикл
		Поле = Построитель.ДоступныеПоля.Найти(""Субконто"" + ВидСубконто.НомерСтроки);
		Поле.ТипЗначения = ВидСубконто.ВидСубконто.ТипЗначения;
		Поле.Представление = ВидСубконто.ВидСубконто.Наименование;
		
		Если Построитель.Отбор.Найти(""Субконто"" + ВидСубконто.НомерСтроки) = Неопределено Тогда
			Построитель.Отбор.Добавить(""Субконто"" + ВидСубконто.НомерСтроки);
		КонецЕсли;
	КонецЦикла;
КонецЕсли;
"}
},
{0,
{"Листинг 13.79. Пример запроса",0,0,"13.79","Построитель.Текст =
""ВЫБРАТЬ
|	ТоварыНаСкладахОстаткиИОбороты.Склад КАК Склад,
|	ТоварыНаСкладахОстаткиИОбороты.Номенклатура КАК Номенклатура,
|	СУММА(ТоварыНаСкладахОстаткиИОбороты.КоличествоКонечныйОстаток) КАК Остаток"";
"}
},
{0,
{"Листинг 13.80. Пример запроса с получением представлений ссылочных полей",0,0,"13.80","Построитель.Текст =
""ВЫБРАТЬ
|	ТоварыНаСкладахОстаткиИОбороты.Склад КАК Склад,
|	ТоварыНаСкладахОстаткиИОбороты.Склад.Представление,
|	ТоварыНаСкладахОстаткиИОбороты.Номенклатура КАК Номенклатура,
|	ТоварыНаСкладахОстаткиИОбороты.Номенклатура.Представление,
|	СУММА(ТоварыНаСкладахОстаткиИОбороты.КоличествоКонечныйОстаток) КАК Остаток"";

"}
},
{0,
{"Листинг 13.81. Пример вывода отчета в диаграмму",0,0,"13.81","Построитель = Новый ПостроительОтчета();
Построитель.Текст =
""ВЫБРАТЬ
|	ТоварыНаСкладахОстаткиИОбороты.Склад КАК Склад,
|	ТоварыНаСкладахОстаткиИОбороты.Склад.Представление,
|	ТоварыНаСкладахОстаткиИОбороты.Номенклатура КАК Номенклатура,
|	ТоварыНаСкладахОстаткиИОбороты.Номенклатура.Представление,
|	СУММА(ТоварыНаСкладахОстаткиИОбороты.КоличествоПриход) КАК КоличествоПриход,
|	СУММА(ТоварыНаСкладахОстаткиИОбороты.КоличествоОборот) КАК КоличествоОборот,
|	СУММА(ТоварыНаСкладахОстаткиИОбороты.КоличествоРасход) КАК КоличествоРасход
|ИЗ
|	РегистрНакопления.ТоварыНаСкладах.ОстаткиИОбороты КАК ТоварыНаСкладахОстаткиИОбороты
|СГРУППИРОВАТЬ ПО
|	ТоварыНаСкладахОстаткиИОбороты.Склад,
|	ТоварыНаСкладахОстаткиИОбороты.Номенклатура,
|	ТоварыНаСкладахОстаткиИОбороты.Склад.Представление,
|	ТоварыНаСкладахОстаткиИОбороты.Номенклатура.Представление
|ИТОГИ СУММА(КоличествоПриход),
|		СУММА(КоличествоОборот),
|		СУММА(КоличествоРасход) ПО
|	ОБЩИЕ,
|	Номенклатура ИЕРАРХИЯ""
;

Построитель.ЗаполнитьНастройки();

ЭлементыФормы.Диаграмма1.ОбластьЗаголовка.Текст = ""Приход товаров"";

Построитель.Выполнить();
Построитель.Вывести(ЭлементыФормы.Диаграмма1);
"}
},
{0,
{"Листинг 13.82. Указание выводимого ресурса",0,0,"13.82","//	…
ЭлементыФормы.Диаграмма1.ОбластьЗаголовка.Текст = ""Оборот товаров"";
	
Построитель.Выполнить();
Построитель.Вывести(ЭлементыФормы.Диаграмма1, ""КоличествоОборот"");
//	…
"}
},
{0,
{"Листинг 13.83. Вывод двух измерений в диаграмму",0,0,"13,83","Построитель = Новый ПостроительОтчета();
Построитель.Текст =
""ВЫБРАТЬ
|	ТоварыНаСкладахОстаткиИОбороты.Склад КАК Склад,
|	ТоварыНаСкладахОстаткиИОбороты.Склад.Представление,
|	ТоварыНаСкладахОстаткиИОбороты.Номенклатура КАК Номенклатура,
|	ТоварыНаСкладахОстаткиИОбороты.Номенклатура.Представление,
|	СУММА(ТоварыНаСкладахОстаткиИОбороты.КоличествоПриход) КАК КоличествоПриход,
|	СУММА(ТоварыНаСкладахОстаткиИОбороты.КоличествоОборот) КАК КоличествоОборот,
|	СУММА(ТоварыНаСкладахОстаткиИОбороты.КоличествоРасход) КАК КоличествоРасход
|ИЗ
|	РегистрНакопления.ТоварыНаСкладах.ОстаткиИОбороты КАК ТоварыНаСкладахОстаткиИОбороты
|СГРУППИРОВАТЬ ПО
|	ТоварыНаСкладахОстаткиИОбороты.Склад,
|	ТоварыНаСкладахОстаткиИОбороты.Номенклатура,
|	ТоварыНаСкладахОстаткиИОбороты.Склад.Представление,
|	ТоварыНаСкладахОстаткиИОбороты.Номенклатура.Представление
|ИТОГИ СУММА(КоличествоПриход), 
|		СУММА(КоличествоОборот),
|		 СУММА(КоличествоРасход) ПО
|	ОБЩИЕ,
|	Номенклатура ИЕРАРХИЯ,
|	Склад"";

Построитель.ЗаполнитьНастройки();
ЭлементыФормы.Диаграмма1.ОбластьЗаголовка.Текст = ""Приход товаров"";

Построитель.Выполнить();
Построитель.Вывести(ЭлементыФормы.Диаграмма1, ""КоличествоПриход"");
"}
},
{0,
{"Листинг 13.84. Пример вывода в сводную таблицу",0,0,"13.84","Построитель = Новый ПостроительОтчета();
Построитель.Текст =
""ВЫБРАТЬ
|	ТоварыНаСкладахОстаткиИОбороты.Склад КАК Склад,
|	ТоварыНаСкладахОстаткиИОбороты.Склад.Представление,
|	ТоварыНаСкладахОстаткиИОбороты.Номенклатура КАК Номенклатура,
|	ТоварыНаСкладахОстаткиИОбороты.Номенклатура.Представление,
|	СУММА(ТоварыНаСкладахОстаткиИОбороты.КоличествоПриход) КАК КоличествоПриход,
|	СУММА(ТоварыНаСкладахОстаткиИОбороты.КоличествоОборот) КАК КоличествоОборот,
|	СУММА(ТоварыНаСкладахОстаткиИОбороты.КоличествоРасход) КАК КоличествоРасход
|ИЗ
|	РегистрНакопления.ТоварыНаСкладах.ОстаткиИОбороты КАК ТоварыНаСкладахОстаткиИОбороты
|СГРУППИРОВАТЬ ПО
|	ТоварыНаСкладахОстаткиИОбороты.Склад,
|	ТоварыНаСкладахОстаткиИОбороты.Номенклатура,
|	ТоварыНаСкладахОстаткиИОбороты.Склад.Представление,
|	ТоварыНаСкладахОстаткиИОбороты.Номенклатура.Представление
|ИТОГИ СУММА(КоличествоПриход),
|		СУММА(КоличествоОборот),
|		СУММА(КоличествоРасход) ПО
|	ОБЩИЕ,
|	Номенклатура ИЕРАРХИЯ,
|	Склад Иерархия"";

Построитель.ЗаполнитьНастройки();

Таблица = ЭлементыФормы.ПолеТабличногоДокумента1.ВстроенныеТаблицы.СводнаяТаблица1;
Таблица.МакетОформления = ПолучитьМакетОформления(СтандартноеОформление.Лед);

Таблица.ИсточникДанных = Построитель;

Таблица.Строки.Добавить(""Номенклатура"");
Таблица.Колонки.Добавить(""Склад"");
Таблица.Данные.Добавить(""КоличествоПриход"");
"}
},
{0,
{"Листинг 13.85. Вывод отчета в сводную диаграмму",0,0,"13.85","Построитель = Новый ПостроительОтчета();
Построитель.Текст =
""ВЫБРАТЬ
|	ТоварыНаСкладахОстаткиИОбороты.Склад КАК Склад,
|	ТоварыНаСкладахОстаткиИОбороты.Склад.Представление,
|	ТоварыНаСкладахОстаткиИОбороты.Номенклатура КАК Номенклатура,
|	ТоварыНаСкладахОстаткиИОбороты.Номенклатура.Представление,
|	СУММА(ТоварыНаСкладахОстаткиИОбороты.КоличествоПриход) КАК КоличествоПриход,
|	СУММА(ТоварыНаСкладахОстаткиИОбороты.КоличествоОборот) КАК КоличествоОборот,
|	СУММА(ТоварыНаСкладахОстаткиИОбороты.КоличествоРасход) КАК КоличествоРасход
|ИЗ
|	РегистрНакопления.ТоварыНаСкладах.ОстаткиИОбороты КАК ТоварыНаСкладахОстаткиИОбороты
|СГРУППИРОВАТЬ ПО
|	ТоварыНаСкладахОстаткиИОбороты.Склад,
|	ТоварыНаСкладахОстаткиИОбороты.Номенклатура,
|	ТоварыНаСкладахОстаткиИОбороты.Склад.Представление,
|	ТоварыНаСкладахОстаткиИОбороты.Номенклатура.Представление
|ИТОГИ СУММА(КоличествоПриход),
|		СУММА(КоличествоОборот),
|		СУММА(КоличествоРасход) ПО
|	ОБЩИЕ,
|	Номенклатура ИЕРАРХИЯ,
|	Склад Иерархия"";

Построитель.ЗаполнитьНастройки();

Диаграмма = ЭлементыФормы.СводнаяДиаграмма1;
Диаграмма.ОбластьЗаголовка.Текст = ""Приход товаров"";

Диаграмма.ИсточникДанных = Построитель;

Диаграмма.Серии.Добавить(""Номенклатура"");
Диаграмма.Точки.Добавить(""Склад"");
Диаграмма.Ресурсы.Добавить(""КоличествоПриход"");
"}
},
{0,
{"Листинг 13.86. Обработчик При открытии",0,0,"13.86","// Обработчик события ПриОткрытии формы
// Выполняет заполнение текста запроса построителя отчета.
//
Процедура ПриОткрытии()
	
	Построитель.Текст =
	""ВЫБРАТЬ
	|	ТоварыНаСкладахОстаткиИОбороты.Склад КАК Склад,
	|	ТоварыНаСкладахОстаткиИОбороты.Склад.Представление,
	|	ТоварыНаСкладахОстаткиИОбороты.Номенклатура КАК Номенклатура,
	|	ТоварыНаСкладахОстаткиИОбороты.Номенклатура.Представление,
	|	СУММА(ТоварыНаСкладахОстаткиИОбороты.КоличествоНачальныйОстаток) КАК НачальныйОстаток,
	|	СУММА(ТоварыНаСкладахОстаткиИОбороты.КоличествоПриход) КАК Приход,
	|	СУММА(ТоварыНаСкладахОстаткиИОбороты.КоличествоРасход) КАК Расход,
	|	СУММА(ТоварыНаСкладахОстаткиИОбороты.КоличествоКонечныйОстаток) КАК КонечныйОстаток,
	|	СУММА(ТоварыНаСкладахОстаткиИОбороты.КоличествоОборот) КАК Оборот
	|ИЗ
	|	РегистрНакопления.ТоварыНаСкладах.ОстаткиИОбороты КАК ТоварыНаСкладахОстаткиИОбороты
	|СГРУППИРОВАТЬ ПО
	|	ТоварыНаСкладахОстаткиИОбороты.Склад,
	|	ТоварыНаСкладахОстаткиИОбороты.Номенклатура,
	|	ТоварыНаСкладахОстаткиИОбороты.Склад.Представление,
	|	ТоварыНаСкладахОстаткиИОбороты.Номенклатура.Представление
	|ИТОГИ СУММА(Приход),
	|		СУММА(Оборот),
	|		СУММА(Расход),
	|		СУММА(НачальныйОстаток),
	|		СУММА(КонечныйОстаток) ПО
	|	ОБЩИЕ,
	|	Склад ИЕРАРХИЯ,
	|	Номенклатура ИЕРАРХИЯ"";
	
КонецПроцедуры
"}
},
{0,
{"Листинг 13.87. Обработчик нажатия кнопки Выполнить",0,0,"13.87","// Обработчик события Нажатие кнопки Выполнить
// командной панели ОсновныеДействияФормы
// Настраивает, выполняет запрос и выводит результат
//  в поле табличного документа формы.
//
Процедура КнопкаВыполнитьНажатие(Элемент)

	Построитель.ЗаполнитьНастройки();

	// Заполнять расшифровки значениями группировок.
	Построитель.ЗаполнениеРасшифровки = ВидЗаполненияРасшифровкиПостроителяОтчета.Расшифровка;
	
	// Размещать измерения в одной колонке.
	Построитель.РазмещениеИзмеренийВСтроках = ТипРазмещенияИзмерений.Вместе;
	
	// Запретить вывод измерения склад и всех ресурсов,
	// кроме КонечныйОстаток.
	Построитель.ВыбранныеПоля.Удалить(Построитель.ВыбранныеПоля.Найти(""Склад""));
	Построитель.ВыбранныеПоля.Удалить(Построитель.ВыбранныеПоля.Найти(""НачальныйОстаток""));
	Построитель.ВыбранныеПоля.Удалить(Построитель.ВыбранныеПоля.Найти(""Приход""));
	Построитель.ВыбранныеПоля.Удалить(Построитель.ВыбранныеПоля.Найти(""Расход""));
	Построитель.ВыбранныеПоля.Удалить(Построитель.ВыбранныеПоля.Найти(""Оборот""));

	// Запретить группировку по измерению Склад.
	Построитель.ИзмеренияСтроки.Удалить(Построитель.ИзмеренияСтроки.Найти(""Склад""));

	// Задать заголовок отчета.
	Построитель.ТекстЗаголовка = ""Остатки товаров"";
	
	Построитель.Выполнить();
	
	// Вывести результат в поле табличного документа в форме.
	ЭлементыФормы.ПолеТабличногоДокумента1.Очистить();
	ЭлементыФормы.ПолеТабличногоДокумента1.ТекущаяОбласть = ЭлементыФормы.ПолеТабличногоДокумента1.Область(""R1C1"");	
	
	Построитель.Вывести(ЭлементыФормы.ПолеТабличногоДокумента1);
		
КонецПроцедуры
"}
},
{0,
{"Листинг 13.88. Обработчик события Обработка расшифровки",0,0,"13.88","// Обработчик события ОбработкаРасшифровки
// поля табличного документа ПолеТабличногоДокумента1
// Настраивает, выполняет запрос и выводит результат
// в поле табличного документа формы.
//
Процедура ПолеТабличногоДокумента1ОбработкаРасшифровки(Элемент, Расшифровка, СтандартнаяОбработка)
	
	// Запретить стандартную обработку расшифровки.
	СтандартнаяОбработка = Ложь;
	
	Построитель.ЗаполнитьНастройки();
	
	// Настроить расшифровку построителя, используя имеющуюся расшифровку
	// и установленный отбор.
	Построитель.НастроитьРасшифровку(Построитель, Расшифровка);
	
	// Запретить вывод измерения Номенклатура и группировку
	// по этому измерению.
	Построитель.ВыбранныеПоля.Удалить(Построитель.ВыбранныеПоля.Найти(""Номенклатура""));
	Построитель.ИзмеренияСтроки.Удалить(Построитель.ИзмеренияСтроки.Найти(""Номенклатура""));
	
	// Установить заголовок отчета.
	Построитель.ТекстЗаголовка = ""Ведомость по товару "" + Построитель.Отбор.Найти(""Номенклатура"").Значение;
	
	Построитель.Выполнить();
	
	// Вывести результат в поле табличного документа в форме.
	ЭлементыФормы.ПолеТабличногоДокумента1.Очистить();
	ЭлементыФормы.ПолеТабличногоДокумента1.ТекущаяОбласть = ЭлементыФормы.ПолеТабличногоДокумента1.Область(""R1C1"");
	Построитель.Вывести(ЭлементыФормы.ПолеТабличногоДокумента1);
	
КонецПроцедуры
"}
},
{0,
{"Листинг 13.89. Массивы для хранения истории",0,0,"13.89","Перем ИсторияВперед, ИсторияНазад; // Массивы структур.
// …
ИсторияВперед = Новый Массив;
ИсторияНазад = Новый Массив;
"}
},
{0,
{"Листинг 13.90. Сохранение истории расшифровки",0,0,"13.90","// Обработчик события ОбработкаРасшифровки
// поля табличного документа ПолеТабличногоДокумента1
// Настраивает, выполняет запрос и выводит результат
// в поле табличного документа формы.
//
Процедура ПолеТабличногоДокумента1ОбработкаРасшифровки(Элемент, Расшифровка, СтандартнаяОбработка)
	
	// Запретить стандартную обработку расшифровки.
	СтандартнаяОбработка = Ложь;

	// Очистить движения вперед
	ИсторияВперед.Очистить();
	ЭлементыФормы.ОсновныеДействияФормы.Кнопки.КнопкаВперед.Доступность = Ложь;
	
	// Запомнить текущее состояние для движения назад
	ИсторияНазад.Добавить(Новый Структура(""Настройки, Отчет, ТекущаяОбласть"", Построитель.ПолучитьНастройки(), ЭлементыФормы.ПолеТабличногоДокумента1.ПолучитьОбласть(), ЭлементыФормы.ПолеТабличногоДокумента1.ТекущаяОбласть));
	ЭлементыФормы.ОсновныеДействияФормы.Кнопки.КнопкаНазад.Доступность = Истина;	

	Построитель.ЗаполнитьНастройки();
	
	// Настроить расшифровку построителя, используя имеющуюся расшифровку
	// и установленный отбор.
	Построитель.НастроитьРасшифровку(Построитель, Расшифровка);
	
	// Запретить вывод измерения Номенклатура и группировку
	// по этому измерению.
	Построитель.ВыбранныеПоля.Удалить(Построитель.ВыбранныеПоля.Найти(""Номенклатура""));
	Построитель.ИзмеренияСтроки.Удалить(Построитель.ИзмеренияСтроки.Найти(""Номенклатура""));
	
	// Установить заголовок отчета.
	Построитель.ТекстЗаголовка = ""Ведомость по товару "" + Построитель.Отбор.Найти(""Номенклатура"").Значение;
	
	Построитель.Выполнить();
	
	// Вывести результат в поле табличного документа в форме.
	ЭлементыФормы.ПолеТабличногоДокумента1.Очистить();
	ЭлементыФормы.ПолеТабличногоДокумента1.ТекущаяОбласть = ЭлементыФормы.ПолеТабличногоДокумента1.Область(""R1C1"");
	Построитель.Вывести(ЭлементыФормы.ПолеТабличногоДокумента1);
	
КонецПроцедуры
"}
},
{0,
{"Листинг 13.91. Обработчик нажатия кнопки Вперед",0,0,"13.91","// Действие кнопки Вперед командной панели ОсновныеДействияФормы
// Отображает предыдущее состояние расшифровки отчета.
//
Процедура ОсновныеДействияФормыКнопкаВперед(Кнопка)
	
	// Запомнить текущее состояние для движения назад.
	ИсторияНазад.Добавить(Новый Структура(""Настройки, Отчет, ТекущаяОбласть"", Построитель.ПолучитьНастройки(), ЭлементыФормы.ПолеТабличногоДокумента1.ПолучитьОбласть(), ЭлементыФормы.ПолеТабличногоДокумента1.ТекущаяОбласть));
	ЭлементыФормы.ОсновныеДействияФормы.Кнопки.КнопкаНазад.Доступность = Истина;
	
	// Отобразить новое состояние отчета.
	ПрошлаяИстория = ИсторияВперед[ИсторияВперед.ВГраница()];
	Построитель.УстановитьНастройки(ПрошлаяИстория[""Настройки""]);
	ЭлементыФормы.ПолеТабличногоДокумента1.Очистить();
	ЭлементыФормы.ПолеТабличногоДокумента1.ТекущаяОбласть = ЭлементыФормы.ПолеТабличногоДокумента1.Область(""R1C1"");
	ЭлементыФормы.ПолеТабличногоДокумента1.Вывести(ПрошлаяИстория[""Отчет""]);
	ЭлементыФормы.ПолеТабличногоДокумента1.ТекущаяОбласть = ПрошлаяИстория[""ТекущаяОбласть""];
	
	// Удалить отображенное состояние из движений вперед.
	ИсторияВперед.Удалить(ИсторияВперед.ВГраница());
	Если ИсторияВперед.ВГраница() = -1 Тогда
		ЭлементыФормы.ОсновныеДействияФормы.Кнопки.КнопкаВперед.Доступность = Ложь;
	КонецЕсли;	
	
КонецПроцедуры
"}
},
{0,
{"Листинг 13.92. Обработчик нажатия кнопки Назад",0,0,"13.92","// Действие кнопки Назад командной панели ОсновныеДействияФормы
// Отображает предыдущее состояние отчета.
//
Процедура ОсновныеДействияФормыКнопкаНазад(Кнопка)
	
	// Запомнить текущее состояние для движения вперед.
	ИсторияВперед.Добавить(Новый Структура(""Настройки, Отчет, ТекущаяОбласть"", Построитель.ПолучитьНастройки(), ЭлементыФормы.ПолеТабличногоДокумента1.ПолучитьОбласть(), ЭлементыФормы.ПолеТабличногоДокумента1.ТекущаяОбласть));
	ЭлементыФормы.ОсновныеДействияФормы.Кнопки.КнопкаВперед.Доступность = Истина;
	
	// Отобразить новое состояние отчета.
	ПредыдущаяИстория = ИсторияНазад[ИсторияНазад.ВГраница()];
	Построитель.УстановитьНастройки(ПредыдущаяИстория[""Настройки""]);
	ЭлементыФормы.ПолеТабличногоДокумента1.Очистить();
	ЭлементыФормы.ПолеТабличногоДокумента1.ТекущаяОбласть = ЭлементыФормы.ПолеТабличногоДокумента1.Область(""R1C1"");
	ЭлементыФормы.ПолеТабличногоДокумента1.Вывести(ПредыдущаяИстория[""Отчет""]);
	ЭлементыФормы.ПолеТабличногоДокумента1.ТекущаяОбласть = ПредыдущаяИстория[""ТекущаяОбласть""];

	// Удалить отображенное состояние из движений назад.
	ИсторияНазад.Удалить(ИсторияНазад.ВГраница());
	Если ИсторияНазад.ВГраница() = -1 Тогда
		ЭлементыФормы.ОсновныеДействияФормы.Кнопки.КнопкаНазад.Доступность = Ложь;
	КонецЕсли;	
		
КонецПроцедуры
"}
},
{0,
{"Листинг 13.93. Назначение источника данных",0,0,"13.93","ПостроительОтчета.ИсточникДанных = Новый ОписаниеИсточникаДанных(ТаблицаЗначенийДанные);
"}
},
{0,
{"Листинг 13.94. Пример настройки источника данных",0,0,"13.94","ДанныеИсточника = Новый ОписаниеИсточникаДанных(ТаблицаЗначенийДанные);
ДанныеИсточника.Колонки.Номенклатура.Измерение = Истина;
ДанныеИсточника.Колонки.Склад.Измерение = Истина;
ДанныеИсточника.Колонки.КоличествоРасход.Итог = ""СУММА(КоличествоРасход)"";
Построитель.ИсточникДанных = ДанныеИсточника;
"}
},
{0,
{"Листинг 13.95. Задание кодировки",0,0,"13.95","ТекстДок = Новый ТекстовыйДокумент();
ТекстДок.Прочитать(""C:\Price.txt"", КодировкаТекста.UTF16);
"}
},
{0,
{"Листинг 13.96. Просмотр текстового документа",0,0,"13.96","ТекстДок = Новый ТекстовыйДокумент();
ТекстДок.Прочитать(""C:\Price.txt"");
ТекстДок.ТолькоПросмотр = Истина;
ТекстДок.Показать();
"}
},
{0,
{"Листинг 13.97. Задание имени сохраняемого файла",0,0,"13.97","ТекстДок = Новый ТекстовыйДокумент();
ТекстДок.Прочитать(""C:\Price.txt"");
ТекстДок.Показать(""Прайс-лист поставщика"", ""C:\Price_New.txt"");
"}
},
{0,
{"Листинг 13.98. Получение текста из текстового документа",0,0,"13.98","ТекстДок = Новый ТекстовыйДокумент();
ТекстДок.Прочитать(""C:\Price.txt"");
ТекстДляОбработки = ТекстДок.ПолучитьТекст();
"}
},
{0,
{"Листинг 13.99. Пример записи текстового документа",0,0,"13.99","ТекстДокумента = ТекстДляОбработки;
ТекстДок = Новый ТекстовыйДокумент();
ТекстДок.УстановитьТекст(ТекстДокумента);
ТекстДок.Записать(""C:\СписокТоваров.txt"", КодировкаТекста.ANSI);
"}
},
{0,
{"Листинг 13.100. Добавление строки в текстовый документ",0,0,"13.100","ТекстДок = Новый ТекстовыйДокумент();
ТекстДок.Прочитать(""C:\Price.txt"");
ТекстДок.ДобавитьСтроку(""Новая строка"");
"}
},
{0,
{"Листинг 13.101. Вставка строки в текстовый документ",0,0,"13.101","ТекстДок = Новый ТекстовыйДокумент();
ТекстДок.Прочитать(""C:\Price.txt"");
ТекстДок.ВставитьСтроку(4, ""Новая строка"");
"}
},
{0,
{"Листинг 13.102. Замена строки текстового документа",0,0,"13.102","ТекстДок = Новый ТекстовыйДокумент();
ТекстДок.Прочитать(""C:\Price.txt"");
ТекстДок.ЗаменитьСтроку(2, ""новая строка"");
"}
},
{0,
{"Листинг 13.103. Обход строк текстового документа",0,0,"13.103","ТекстДок = Новый ТекстовыйДокумент();
ТекстДок.Прочитать(""C:\Price.txt"");
КоличествоСтрокДокумента = ТекстДок.КоличествоСтрок();

Для НомерСтроки = 1 По КоличествоСтрокДокумента Цикл
	ОчереднаяСтрока = ТекстДок.ПолучитьСтроку(НомерСтроки);
КонецЦикла;
"}
},
{0,
{"Листинг 13.104. Пример описания области",0,0,"13.104","#Область Шапка
…
#КонецОбласти
"}
},
{0,
{"Листинг 13.105. Пример описания вариантов области",0,0,"13.105","#Область Шапка RU
…
#КонецОбласти

#Область Шапка EN
…
#КонецОбласти
"}
},
{0,
{"Листинг 13.106. Пример нескольких вариантов области",0,0,"13.106","#Область Шапка RU
…
#КонецОбласти

#Область Шапка
…
#КонецОбласти

#Область Шапка EN
…
#КонецОбласти
"}
},
{0,
{"Листинг 13.107. Служебная часть области",0,0,"13.107","#Область Строка
	#Поле Остаток
		#Формат ""ЧЦ=10; ЧДЦ=3; ЧРД=.""
-------------------------------------------------------------------
|[Склад ]|[Номенклатура ]|[ Остаток]|
|        |<Номенклатура >|          |
#КонецОбласти
"}
},
{0,
{"Листинг 13.108. Замена символа",0,0,"13.108","#Область Шапка RU
#ЗаменаСимвола ""@"" ""#""
Отчет

-------------------------------------------------------------------
@ Склад @ Номенклатура @ Остаток @
#КонецОбласти
"}
},
{0,
{"Листинг 13.109. Описание поля",0,0,"13.109","#Область Строка
	#Поле Остаток
		#Выравнивание Право
		#Забивать Истина
		#Формат ""ЧЦ=10; ЧДЦ=3; ЧРД=.""
-------------------------------------------------------------------
|[Склад ]|[Номенклатура ]|[ Остаток]|
|        |<Номенклатура >|          |
#КонецОбласти
"}
},
{0,
{"Листинг 13.110. Использование ключевого слова Поля",0,0,"13.110","#Область Строка
	#Поле Остаток
		#Формат ""ЧЦ=10; ЧДЦ=3; ЧРД=.""
-------------------------------------------------------------------
|[ ]|[ ]|[ ]| #Поля Склад Номенклатура Остаток
#КонецОбласти
"}
},
{0,
{"Листинг 13.111. Описание полей макета",0,0,"13.111","#Область Строка
	#Поле Остаток
		#Формат ""ЧЦ=10; ЧДЦ=3; ЧРД=.""
-------------------------------------------------------------------
|[Склад ]|[Номенклатура ]|[ Остаток]|
#КонецОбласти
"}
},
{0,
{"Листинг 13.112. Описание полей макета",0,0,"13.112","#Область Строка
	#Поле Остаток
		#Выравнивание Право
		#Забивать Истина
		#Формат ""ЧЦ=10; ЧДЦ=3; ЧРД=.""
-------------------------------------------------------------------
|[Склад ]|[Номенклатура ]|[ Остаток]|
|        |{Номенклатура }|          |
|        |<Номенклатура >|          |
#КонецОбласти
"}
},
{0,
{"Листинг 13.113. Получение области",0,0,"13.113","ОбластьШапка = Макет.ПолучитьОбласть(""Шапка"");"}
},
{0,
{"Листинг 13.114. Пример заполнения параметров области",0,0,"13.114","Пока Выборка.Следующий() Цикл
	ОбластьСтроки = Макет.ПолучитьОбласть(""Строка"");
	ОбластьСтроки.Параметры.Заполнить(Выборка);
	ИтоговыйДокумент.Вывести(ОбластьСтроки);
КонецЦикла;
"}
},
{0,
{"Листинг 13.115. Пример заполнения параметров области",0,0,"13.115","Пока Выборка.Следующий() Цикл
	ОбластьСтроки = Макет.ПолучитьОбласть(""Строка"");

	ОбластьСтроки.Параметры.Склад = Выборка.СкладПредставление;
	ОбластьСтроки.Параметры.Номенклатура = Выборка.НоменклатураПредставление;
	ОбластьСтроки.Параметры.Остаток = Выборка.КоличествоОстаток;

	ИтоговыйДокумент.Вывести(ОбластьСтроки);
КонецЦикла;
"}
},
{0,
{"Листинг 13.116. Макет текстового документа",0,0,"13.116","#Область Шапка RU
Отчет

-------------------------------------------------------------------
| Склад | Номенклатура | Остаток |
#КонецОбласти

#Область Шапка EN
Report

-------------------------------------------------------------------
| Warehouse | Product | Quantity |
#КонецОбласти

#Область Строка
	#Поле Остаток
	 #Формат ""ЧЦ=10; ЧДЦ=3; ЧРД=.""
-------------------------------------------------------------------
|[Склад ]|[Номенклатура ]|[ Остаток]|
|        |<Номенклатура >|          |
#КонецОбласти


#Область Подвал
-------------------------------------------------------------------
#КонецОбласти
"}
},
{0,
{"Листинг 13.117. Пример процедуры, формирующей текстовый документ на основе макета",0,0,"13.117","// Получить данные из базы данных	
Запрос = новый Запрос;
Запрос.Текст = ""ВЫБРАТЬ
|	ТоварыНаСкладахОстатки.Склад.Представление КАК Склад,
|	ТоварыНаСкладахОстатки.Номенклатура.Представление КАК Номенклатура,
|	ТоварыНаСкладахОстатки.КоличествоОстаток КАК Остаток
|ИЗ
|	РегистрНакопления.ТоварыНаСкладах.Остатки КАК ТоварыНаСкладахОстатки
|АВТОУПОРЯДОЧИВАНИЕ"";
Выборка = Запрос.Выполнить().Выбрать();

// Создать новый текстовый документ, в который будет осуществляться вывод
ИтоговыйДокумент = Новый ТекстовыйДокумент();

// Получить макет текстового документа
Макет = ПолучитьМакет(""ТекстовыйМакет"");

// Установить код языка макета, если в этом есть необходимость
//Макет.КодЯзыкаМакета = ""EN"";

// Вывести область Шапка
ИтоговыйДокумент.Вывести(Макет.ПолучитьОбласть(""Шапка""));

// В цикле перебрать выборку из результата запроса
// и для каждого элемента выборки получить область макета,
// заполнить ее данными выборки и вывести
Пока Выборка.Следующий() Цикл
	ОбластьСтроки = Макет.ПолучитьОбласть(""Строка"");
	ОбластьСтроки.Параметры.Заполнить(Выборка);
	ИтоговыйДокумент.Вывести(ОбластьСтроки);
КонецЦикла;

// Вывести область Подвал
ИтоговыйДокумент.Вывести(Макет.ПолучитьОбласть(""Подвал""));

// Открыть итоговый текстовый документ для просмотра
ИтоговыйДокумент.Показать();
"}
},
{0,
{"Листинг 13.118. Пример сравнения текстовых файлов",0,0,"13.118","Сравнение = Новый СравнениеФайлов();
	
Сравнение.ПервыйФайл = ""C:\Sample1.txt"";
Сравнение.ВторойФайл = ""C:\Sample2.txt"";

Сравнение.СпособСравнения = СпособСравненияФайлов.ТекстовыйДокумент;
Сравнение.ИгнорироватьПустоеПространство = Истина;
Сравнение.УчитыватьРегистр = Ложь;

РезультатСравнения = Сравнение.Сравнить();
"}
},
{0,
{"Листинг 13.119. Отображение заголовков и сетки табличного документа",0,0,"13.119","ТабДок = Новый ТабличныйДокумент();
ТабДок.Показать();
"}
},
{0,
{"Листинг 13.120. Отображение заголовков табличного документа",0,0,"13.120","ТабДок = Новый ТабличныйДокумент();
ТабДок.ОтображатьСетку = Ложь;
ТабДок.Показать();
"}
},
{0,
{"Листинг 13.121. Отображение сетки табличного документа",0,0,"13.121","ТабДок = Новый ТабличныйДокумент();
ТабДок.ОтображатьЗаголовки = Ложь;
ТабДок.Показать();
"}
},
{0,
{"Листинг 13.122. Табличный документ без отображения заголовков и сетки",0,0,"13.122","ТабДок = Новый ТабличныйДокумент();
ТабДок.ОтображатьЗаголовки = Ложь;
ТабДок.ОтображатьСетку = Ложь;
ТабДок.Показать();
"}
},
{0,
{"Листинг 13.123. Использование горизонтальной и вертикальной фиксации в табличном документе",0,0,"13.123","ТабДок = Новый ТабличныйДокумент();
ТабДок.ОтображатьСетку = Ложь;
ТабДок.ФиксацияСверху = 3;
ТабДок.ФиксацияСлева = 4;
ТабДок.Показать();
"}
},
{0,
{"Листинг 13.124. Использование фиксированной фоновой картинки в табличном документе",0,0,"13.124","ТабДок = Новый ТабличныйДокумент();
Картинка = Новый Картинка(""C:\Pict.png"");
ТабДок.ФоноваяКартинка = Картинка;
ТабДок.ФиксированныйФон = Истина;
ТабДок.Показать();
"}
},
{0,
{"Листинг 13.125. Открытие табличного документа без активизации окна",0,0,"13.125","ТабДок = Новый ТабличныйДокумент();
ТабДок.Прочитать(""C:\Price.mxl"");
ТабДок.Показать(""Прайст-лист поставщика"", ""C:\Price_New.mxl"" , Ложь);
"}
},
{0,
{"Листинг 13.126. Использование имени сохранения положения окна",0,0,"13.126","ТабДок = Новый ТабличныйДокумент();
ТабДок.ИмяСохраненияПоложенияОкна = ""ОтчетАнализПродаж"";
ТабДок.Показать(""Отчет"", ""C:\SaleRep.mxl"");
"}
},
{0,
{"Листинг 13.127. Использование сохраненного положения окна при открытии другого табличного документа",0,0,"13.127","ТабДок = Новый ТабличныйДокумент();
ТабДок.Прочитать(""C:\SaleRep.mxl"");
ТабДок.ИмяСохраненияПоложенияОкна = ""ОтчетАнализПродаж"";
ТабДок.Показать(); 
"}
},
{0,
{"Листинг 13.128. Синтаксис получения области по номерам строк и колонок",0,0,"13.128","Область(<номер первой строки>, <номер первой колонки>, <номер последней строки>, <номер последней колонки>)
"}
},
{0,
{"Листинг 13.129. Получение прямоугольной области табличного документа",0,0,"13.129","ТабДок = Новый ТабличныйДокумент();
ТабДок.ОтображатьСетку = Ложь;
НоваяОбласть = ТабДок.Область(2, 2, 4, 4);
НоваяОбласть.Имя = ""НоваяОбласть"";
"}
},
{0,
{"Листинг 13.130. Получение области, состоящей из строк табличного документа",0,0,"13.130","ТабДок = Новый ТабличныйДокумент();
ТабДок.ОтображатьСетку = Ложь;
НоваяОбласть = ТабДок.Область(2, , 4);
НоваяОбласть.Имя = ""НоваяОбласть"";
"}
},
{0,
{"Листинг 13.131. Получение области, состоящей из колонок табличного документа",0,0,"13.131","ТабДок = Новый ТабличныйДокумент();
ТабДок.ОтображатьСетку = Ложь;
НоваяОбласть = ТабДок.Область( , 2, , 4);
НоваяОбласть.Имя = ""НоваяОбласть"";
"}
},
{0,
{"Листинг 13.132. Получение области, состоящей из одной ячейки табличного документа",0,0,"13.132","ТабДок = Новый ТабличныйДокумент();
ТабДок.ОтображатьСетку = Ложь;
НоваяОбласть = ТабДок.Область(2, 4);
НоваяОбласть.Имя = ""Новая область"";
"}
},
{0,
{"Листинг 13.133. Синтаксис получения области по адресу",0,0,"13.133","Область(<адрес области>)"}
},
{0,
{"Листинг 13.134. Получение прямоугольной области табличного документа",0,0,"13.134","ТабДок = Новый ТабличныйДокумент();
НоваяОбласть = ТабДок.Область(""R2C2:R4C4"");
"}
},
{0,
{"Листинг 13.135. Получение области, состоящей из строк табличного документа",0,0,"13.135","ТабДок = Новый ТабличныйДокумент();
НоваяОбласть = ТабДок.Область(""R2:R4"");
"}
},
{0,
{"Листинг 13.136. Получение области, состоящей из колонок табличного документа",0,0,"13.136","ТабДок = Новый ТабличныйДокумент();
НоваяОбласть = ТабДок.Область(""C2:C4"");
"}
},
{0,
{"Листинг 13.137. Получение области, состоящей из одной ячейки табличного документа",0,0,"13.137","ТабДок = Новый ТабличныйДокумент();
НоваяОбласть = ТабДок.Область(""R2C4"");
"}
},
{0,
{"Листинг 13.138. Получение области табличного документа по имени",0,0,"13.138","ТабДок = ПолучитьМакет(""Макет"");
НоваяОбласть = ТабДок.Область(""НоваяОбласть"");
"}
},
{0,
{"Листинг 13.139. Перебор именованных областей табличного документа",0,0,"13.139","ТабДок = ПолучитьМакет(""Макет"");
ИменованныеОбласти = ТабДок.Области;
Для Каждого Область из ИменованныеОбласти Цикл
	Сообщить(Область.Имя);
КонецЦикла;
"}
},
{0,
{"Листинг 13.140. Синтаксис получения области как пересечения именованных областей",0,0,"13.140","Область(<имя области 1>|<имя области 2>)"}
},
{0,
{"Листинг 13.141. Получение области табличного документа на пересечении двух областей",0,0,"13.141","ТабДок = ПолучитьМакет(""Макет"");
НоваяОбласть = ТабДок.Область(""ГоризонтальнаяОбласть|ВертикальнаяОбласть"");
"}
},
{0,
{"Листинг 13.142. Скрытие колонок табличного документа",0,0,"13.142","ТабДок = Новый ТабличныйДокумент();
ТабДок.ОтображатьСетку = Ложь;
НоваяОбласть = ТабДок.Область( , 2, ,4);
НоваяОбласть.Видимость = Ложь;
ТабДок.Показать();
"}
},
{0,
{"Листинг 13.143. Установка ширины колонок табличного документа",0,0,"13.143","ТабДок = Новый ТабличныйДокумент();
ТабДок.Область(2, 2, 4, 4).ШиринаКолонки = 15;
ТабДок.Показать();
"}
},
{0,
{"Листинг 13.144. Установка ширины колонок для выбранной области табличного документа",0,0,"13.144","ТабДок = Новый ТабличныйДокумент();
	
Область = ТабДок.Область(2, 2, 4, 4);
Область.СоздатьФорматСтрок();
	
Область = ТабДок.Область(2, 2, 4, 4);
Область.ШиринаКолонки = 15;
	
ТабДок.Показать();
"}
},
{0,
{"Листинг 13.145. Пример объединения ячеек области табличного документа",0,0,"13.145","ТабДок = Новый ТабличныйДокумент();
Область = ТабДок.Область(2, 2, 4, 4);
Область.Объединить();
ТабДок.Показать();
"}
},
{0,
{"Листинг 13.146. Пример группировки строк табличного документа",0,0,"13.146","ТабДок = Новый ТабличныйДокумент();
ТабДок.Область(2, , 4).Сгруппировать();
ТабДок.Показать();
"}
},
{0,
{"Листинг 13.147. Пример оформления областей табличного документа линиями",0,0,"13.147","ТабДок = Новый ТабличныйДокумент();
ТабДок.ОтображатьСетку = Ложь;

ЛинияСОтступом = Новый Линия(ТипЛинииЯчейкиТабличногоДокумента.Двойная, 1, Истина);
ЛинияБезОтступа = Новый Линия(ТипЛинииЯчейкиТабличногоДокумента.Двойная, 1);

Область = ТабДок.Область(2, 4, 3, 5);
Область.ГраницаСверху = ЛинияСОтступом;
Область.ГраницаСлева = ЛинияСОтступом;
Область.ГраницаСнизу = ЛинияСОтступом;
Область.ГраницаСправа = ЛинияСОтступом;

Область = ТабДок.Область(5, 2, 6, 3);
Область.Обвести(ЛинияБезОтступа, ЛинияБезОтступа, ЛинияБезОтступа, ЛинияБезОтступа);

ТабДок.Показать();
"}
},
{0,
{"Листинг 13.148. Установка текста примечания для области ячеек табличного документа",0,0,"13.148","ТабДок = Новый ТабличныйДокумент();
ТабДок.Область(2, 2, 4, 4).Примечание.Текст = ""Текст примечания области"";
ТабДок.Показать();
"}
},
{0,
{"Листинг 13.149. Использование выравнивания по выделенным колонкам",0,0,"13.149","ТабДок = ПолучитьМакет(""Макет"");
Область = ТабДок.Область(2, 2, 2, 7);
Область.ГоризонтальноеПоложение = ГоризонтальноеПоложение.Центр;
Область.ПоВыделеннымКолонкам = Истина;
ТабДок.Показать();
"}
},
{0,
{"Листинг 13.150. Получение области с типом Таблица",0,0,"13.150","ТабДок = Новый ТабличныйДокумент();
ОбластьВесьДокумент = ТабДок.Область();
Сообщить(ОбластьВесьДокумент.ТипОбласти);
"}
},
{0,
{"Листинг 13.151. Назначение текущей области табличного документа",0,0,"13.151","ТабДок = Новый ТабличныйДокумент();
ТабДок.ТекущаяОбласть = ТабДок.Область(2, 2, 4, 4);
ТабДок.Показать();	
"}
},
{0,
{"Листинг 13.152. Выделение нескольких областей",0,0,"","ТабДок = Новый ТабличныйДокумент();
ТабДок.ВыделенныеОбласти.Добавить( ТабДок.Область(2, 2, 3, 3));
ТабДок.ВыделенныеОбласти.Добавить( ТабДок.Область(1, 5, 4, 5));
ТабДок.Показать();	
"}
},
{0,
{"Листинг 13.153. Вставка области со сдвигом по горизонтали",0,0,"13.153","ТабДок = ПолучитьМакет(""Макет"");
ОбластьИсточник = ТабДок.Область(2, 2);
ОбластьПриемник = ТабДок.Область(3, 3);
ТабДок.ВставитьОбласть(ОбластьИсточник, ОбластьПриемник, ТипСмещенияТабличногоДокумента.ПоГоризонтали);
ТабДок.Показать();	
"}
},
{0,
{"Листинг 13.154. Вставка области со сдвигом по вертикали",0,0,"13.154","ТабДок = ПолучитьМакет(""Макет"");
ОбластьИсточник = ТабДок.Область(2, 2);
ОбластьПриемник = ТабДок.Область(3, 3);
ТабДок.ВставитьОбласть(ОбластьИсточник, ОбластьПриемник, ТипСмещенияТабличногоДокумента.ПоВертикали);
ТабДок.Показать();	
"}
},
{0,
{"Листинг 13.155. Вставка области без сдвига",0,0,"13.155","ТабДок = ПолучитьМакет(""Макет"");
ОбластьИсточник = ТабДок.Область(2, 2);
ОбластьПриемник = ТабДок.Область(3, 3);
ТабДок.ВставитьОбласть(ОбластьИсточник, ОбластьПриемник);
ТабДок.Показать();	
"}
},
{0,
{"Листинг 13.156. Вставка области без указания области приемника",0,0,"13.156","ТабДок = ПолучитьМакет(""Макет"");
ОбластьИсточник = ТабДок.Область(2, 2);
ОбластьПриемник = ТабДок.Область(3, 3);
ТабДок.ВставитьОбласть(ОбластьИсточник);
ТабДок.Показать();	
"}
},
{0,
{"Листинг 13.157. Пример поиска текста в табличном документе",0,0,"13.157","ТабДок = ПолучитьМакет(""Макет"");
НайденнаяОбласть = ТабДок.НайтиТекст(""Остатки"");
"}
},
{0,
{"Листинг 13.158. Добавление рисунка в табличный документ",0,0,"13.158","ТабДок = Новый ТабличныйДокумент;
НовыйРисунок = ТабДок.Рисунки.Добавить(ТипРисункаТабличногоДокумента.Картинка);
"}
},
{0,
{"Листинг 13.159. Назначение имени рисунку",0,0,"13.159","ТабДок = Новый ТабличныйДокумент;
НовыйРисунок = ТабДок.Рисунки.Добавить(ТипРисункаТабличногоДокумента.Картинка);

Сообщить(НовыйРисунок.Имя);

НовыйРисунок.Имя = ""Логотип"";
Сообщить(ТабДок.Области.Логотип.Имя);
Сообщить(ТабДок.Рисунки.Логотип.Имя);
"}
},
{0,
{"Листинг 13.160. Установка размеров рисунка",0,0,"13.160","ТабДок = Новый ТабличныйДокумент;
НовыйРисунок = ТабДок.Рисунки.Добавить(ТипРисункаТабличногоДокумента.Текст);
НовыйРисунок.Текст = ""Текст рисунка"";
НовыйРисунок.Верх = 10;
НовыйРисунок.Лево = 10;
НовыйРисунок.Высота = 5;
НовыйРисунок.Ширина = 30;
ТабДок.Показать();
"}
},
{0,
{"Листинг 13.161. Использование отрицательных значений ширины и высоты рисунка",0,0,"13.161","ТабДок = Новый ТабличныйДокумент;
НовыйРисунок = ТабДок.Рисунки.Добавить(ТипРисункаТабличногоДокумента.Текст);
НовыйРисунок.Текст = ""Текст рисунка"";
НовыйРисунок.Верх = 15;
НовыйРисунок.Лево = 40;
НовыйРисунок.Высота = -5;
НовыйРисунок.Ширина = -30;
ТабДок.Показать();
"}
},
{0,
{"Листинг 13.162. Пример использования свойства Линия",0,0,"13.162","ТабДок = Новый ТабличныйДокумент;
НовыйРисунок = ТабДок.Рисунки.Добавить(ТипРисункаТабличногоДокумента.Эллипс);
НовыйРисунок.Верх = 10;
НовыйРисунок.Лево = 10;
НовыйРисунок.Высота = 5;
НовыйРисунок.Ширина = 30;
НовыйРисунок.Линия = Новый Линия(ТипЛинииРисункаТабличногоДокумента.Точечная);
ТабДок.Показать();
"}
},
{0,
{"Листинг 13.163. Пример скрытия границы рисунка",0,0,"13.163","ТабДок = Новый ТабличныйДокумент;
НовыйРисунок = ТабДок.Рисунки.Добавить(ТипРисункаТабличногоДокумента.Прямоугольник);
НовыйРисунок.Верх = 10;
НовыйРисунок.Лево = 10;
НовыйРисунок.Высота = 5;
НовыйРисунок.Ширина = 30;
НовыйРисунок.ГраницаСверху = Ложь;
ТабДок.Показать();
"}
},
{0,
{"Листинг 13.164. Использование узора рисунка табличного документа",0,0,"13.164","ТабДок = Новый ТабличныйДокумент;
НовыйРисунок = ТабДок.Рисунки.Добавить(ТипРисункаТабличногоДокумента.Прямоугольник);
НовыйРисунок.Верх = 10;
НовыйРисунок.Лево = 10;
НовыйРисунок.Высота = 5;
НовыйРисунок.Ширина = 30;
НовыйРисунок.Узор = ТипУзораТабличногоДокумента.Узор5;
ТабДок.Показать();
"}
},
{0,
{"Листинг 13.165. Добавление рисунка типа Текст",0,0,"13.165","ТабДок = Новый ТабличныйДокумент;
РисунокТекст = ТабДок.Рисунки.Добавить(ТипРисункаТабличногоДокумента.Текст);
"}
},
{0,
{"Листинг 13.166. Установка примечания",0,0,"13.166","ТабДок = Новый ТабличныйДокумент;
ТабДок.Область(2, 2).Примечание.Текст = ""Текст примечания"";
"}
},
{0,
{"Листинг 13.167. Установка размеров примечания",0,0,"13.167","ТабДок = Новый ТабличныйДокумент;
Примечание = ТабДок.Область(2, 2).Примечание;
Примечание.Текст = ""Текст примечания"";
Примечание.АвтоРазмер = Ложь;
Примечание.Ширина = 50;
Примечание.Высота = 50;
ТабДок.Показать();
"}
},
{0,
{"Листинг 13.168. Добавление рисунка типа Картинка",0,0,"13.168","ТабДок = Новый ТабличныйДокумент;
РисунокКартинка = ТабДок.Рисунки.Добавить(ТипРисункаТабличногоДокумента.Картинка);
РисунокКартинка.Картинка = Новый Картинка(""C:/Logo.tif"");
	
РисунокКартинка.Верх = 10;
РисунокКартинка.Лево = 10;
РисунокКартинка.Высота = 45;
РисунокКартинка.Ширина = 60;
	
РисунокКартинка.РазмерКартинки = РазмерКартинки.АвтоРазмер;
	
РисунокКартинка.ГраницаСверху = Ложь;
РисунокКартинка.ГраницаСлева  = Ложь;
РисунокКартинка.ГраницаСнизу = Ложь;
РисунокКартинка.ГраницаСправа = Ложь;
	
ТабДок.Показать();
"}
},
{0,
{"Листинг 13.169. Пример вывода результатов отчета в диаграмму, расположенную в табличном документе",0,0,"13.169","Построитель = Новый ПостроительОтчета();
Построитель.Текст =
""ВЫБРАТЬ
|	ТоварыНаСкладахОстаткиИОбороты.Склад КАК Склад,
|	ТоварыНаСкладахОстаткиИОбороты.Склад.Представление,
|	ТоварыНаСкладахОстаткиИОбороты.Номенклатура КАК Номенклатура,
|	ТоварыНаСкладахОстаткиИОбороты.Номенклатура.Представление,
|	СУММА(ТоварыНаСкладахОстаткиИОбороты.КоличествоПриход) КАК КоличествоПриход,
|	СУММА(ТоварыНаСкладахОстаткиИОбороты.КоличествоОборот)  КАК КоличествоОборот,
|	СУММА(ТоварыНаСкладахОстаткиИОбороты.КоличествоРасход)  КАК КоличествоРасход
|ИЗ
|	РегистрНакопления.ТоварыНаСкладах.ОстаткиИОбороты КАК ТоварыНаСкладахОстаткиИОбороты
|СГРУППИРОВАТЬ ПО
|	ТоварыНаСкладахОстаткиИОбороты.Склад,
|	ТоварыНаСкладахОстаткиИОбороты.Номенклатура,
|	ТоварыНаСкладахОстаткиИОбороты.Склад.Представление,
|	ТоварыНаСкладахОстаткиИОбороты.Номенклатура.Представление
|ИТОГИ СУММА(КоличествоПриход),
|		СУММА(КоличествоОборот),
|		СУММА(КоличествоРасход) ПО
|	ОБЩИЕ,
|	Номенклатура ИЕРАРХИЯ""
;

Построитель.ЗаполнитьНастройки();

ТабДок = Новый ТабличныйДокумент;

// Добавить рисунок типа Диаграмма и задать его размеры
РисунокДиаграмма = ТабДок.Рисунки.Добавить(ТипРисункаТабличногоДокумента.Диаграмма);
РисунокДиаграмма.Верх = 5;
РисунокДиаграмма.Лево = 5;
РисунокДиаграмма.Ширина = 150;
РисунокДиаграмма.Высота = 70;

// Получить объект Диаграмма, отображаемый в рисунке
Диаграмма = РисунокДиаграмма.Объект;

Диаграмма.ОбластьЗаголовка.Текст = ""Приход товаров"";

Построитель.Выполнить();
Построитель.Вывести(Диаграмма);

ТабДок.Показать();
"}
},
{0,
{"Листинг 13.170. Пример рисования линии",0,0,"13.170","ТабДок = Новый ТабличныйДокумент;
	
Для ВысотаПрямой = 0 По 50 Цикл
	Прямая = ТабДок.Рисунки.Добавить(ТипРисункаТабличногоДокумента.Прямая);
	Прямая.Лево = 5;
	Прямая.Верх = 5;
	Прямая.Ширина =  50;
	Прямая.Высота = ВысотаПрямой;
	ВысотаПрямой = ВысотаПрямой + 4;
КонецЦикла;
	
Для ШиринаПрямой = 0 По 50 Цикл
	Прямая = ТабДок.Рисунки.Добавить(ТипРисункаТабличногоДокумента.Прямая);
	Прямая.Лево = 5;
	Прямая.Верх = 5;
	Прямая.Ширина =  ШиринаПрямой;
	Прямая.Высота = 50;
	ШиринаПрямой = ШиринаПрямой + 4;
КонецЦикла;
	
ТабДок.ОтображатьСетку = Ложь;
ТабДок.Показать();
"}
},
{0,
{"Листинг 13.171. Пример рисования линий",0,0,"13.171","ТабДок = Новый ТабличныйДокумент;

ПрямаяОбычная = ТабДок.Рисунки.Добавить(ТипРисункаТабличногоДокумента.Прямая);
ПрямаяОбычная.Линия = Новый Линия(ТипЛинииРисункаТабличногоДокумента.Сплошная, 2);
ПрямаяОбычная.Верх = 30;
ПрямаяОбычная.Лево = 55;
ПрямаяОбычная.Ширина = 50;
ПрямаяОбычная.Высота = 25;

ПрямаяОтображениеВертикально = ТабДок.Рисунки.Добавить(ТипРисункаТабличногоДокумента.Прямая);
ПрямаяОтображениеВертикально.Линия = Новый Линия(ТипЛинииРисункаТабличногоДокумента.Пунктир);
ПрямаяОтображениеВертикально.Верх = 30;
ПрямаяОтображениеВертикально.Лево = 55;
ПрямаяОтображениеВертикально.Ширина = 50;
ПрямаяОтображениеВертикально.Высота = -25;

ПрямаяОтображениеГоризонтально = ТабДок.Рисунки.Добавить(ТипРисункаТабличногоДокумента.Прямая);
ПрямаяОтображениеВертикально.Линия = Новый Линия(ТипЛинииРисункаТабличногоДокумента.Точечная);
ПрямаяОтображениеГоризонтально.Верх = 30;
ПрямаяОтображениеГоризонтально.Лево = 55;
ПрямаяОтображениеГоризонтально.Ширина = -50;
ПрямаяОтображениеГоризонтально.Высота = 25;

Надпись1 = ТабДок.Рисунки.Добавить(ТипРисункаТабличногоДокумента.Текст);
Надпись1.Текст = ""Исходная прямая"";
Надпись1.АвтоРазмер = Истина;
Надпись1.Верх = 50;
Надпись1.Лево = 70;

Надпись2 = ТабДок.Рисунки.Добавить(ТипРисункаТабличногоДокумента.Текст);
Надпись2.Текст = ""Отражение вверх"";
Надпись2.АвтоРазмер = Истина;
Надпись2.Верх = 5;
Надпись2.Лево = 70;

Надпись3 = ТабДок.Рисунки.Добавить(ТипРисункаТабличногоДокумента.Текст);
Надпись3.Текст = ""Отражение влево"";
Надпись3.АвтоРазмер = Истина;
Надпись3.Верх = 50;
Надпись3.Лево = 14;

ТабДок.ОтображатьСетку  = Ложь;
ТабДок.Показать();
"}
},
{0,
{"Листинг 13.172. Пример шаблона",0,0,"13.172","Налогоплательщик:  [НазваниеОрганизации]"}
},
{0,
{"Листинг 13.173. Обращение к параметрам области макета по имени",0,0,"13.173","ТабМакет = ПолучитьМакет(""Макет"");
ОбластьШапки = ТабМакет.ПолучитьОбласть(""Шапка"");
ОбластьШапки.Параметры.НачалоПериода = НачальнаяДата;
ОбластьШапки.Параметры.КонецПериода = КонечнаяДата;
"}
},
{0,
{"Листинг 13.174. Пример заполнения значения параметров области макета",0,0,"13.174","Запрос = Новый Запрос;
Запрос.Текст = 
""ВЫБРАТЬ
|	ТоварыНаСкладахОбороты.Номенклатура.Представление КАК Номенклатура,
|	ТоварыНаСкладахОбороты.КоличествоРасход КАК КоличествоРасход
|ИЗ
|	РегистрНакопления.ТоварыНаСкладах.Обороты КАК ТоварыНаСкладахОбороты
|АВТОУПОРЯДОЧИВАНИЕ""
;

Выборка = Запрос.Выполнить().Выбрать();
// …
// Получить макет
ТабМакет = ПолучитьМакет(""Макет"");

// Получить область макета для вывода данных запроса
СекцияСтрока = ТабМакет.ПолучитьОбласть(""Строка"");

Пока Выборка.Следующий() Цикл
	
	// Заполнить значения параметров области
	СекцияСтрока.Параметры.Заполнить(Выборка);
	// …
КонецЦикла;
"}
},
{0,
{"Листинг 13.175. Пример использования метода Вывести()",0,0,"13.175","ТабДок = Новый ТабличныйДокумент;
ТабМакет = ПолучитьМакет(""Макет"");
ОбластьСтрока = ТабМакет.ПолучитьОбласть(""Строка"");

ОбластьСтрока.Параметры.Название = ""Первая область"";
ТабДок.Вывести(ОбластьСтрока);

ОбластьСтрока.Параметры.Название = ""Вторая область"";
ТабДок.Вывести(ОбластьСтрока);

ОбластьСтрока.Параметры.Название = ""Третья область"";
ТабДок.Вывести(ОбластьСтрока);

ТабДок.Показать();
"}
},
{0,
{"Листинг 13.176. Пример использования метода Присоединить()",0,0,"13.176","ТабДок = Новый ТабличныйДокумент;

ТабМакет = ПолучитьМакет(""Макет"");
ОбластьСтрока = ТабМакет.ПолучитьОбласть(""Строка"");

ОбластьСтрока.Параметры.Название = ""Первая область"";
ТабДок.Вывести(ОбластьСтрока);

ОбластьСтрока.Параметры.Название = ""Вторая область"";
ТабДок.Вывести(ОбластьСтрока);

ОбластьСтрока.Параметры.Название = ""Третья область"";
ТабДок.Присоединить(ОбластьСтрока);

ОбластьСтрока.Параметры.Название = ""Четвертая область"";
ТабДок.Присоединить(ОбластьСтрока);

ТабДок.Показать();
"}
},
{0,
{"Листинг 13.177. Пример использования автогруппировки строк",0,0,"13.177","Запрос = Новый Запрос;
Запрос.Текст = 
""ВЫБРАТЬ
|	ТоварыНаСкладахОбороты.Склад.Представление КАК Склад,
|	ТоварыНаСкладахОбороты.Номенклатура.Представление КАК Номенклатура,
|	СУММА(ТоварыНаСкладахОбороты.КоличествоРасход) КАК КоличествоРасход
|ИЗ
|	РегистрНакопления.ТоварыНаСкладах.Обороты КАК ТоварыНаСкладахОбороты
|
|СГРУППИРОВАТЬ ПО
|	ТоварыНаСкладахОбороты.Склад,
|	ТоварыНаСкладахОбороты.Номенклатура,
|	ТоварыНаСкладахОбороты.Склад.Представление,
|	ТоварыНаСкладахОбороты.Номенклатура.Представление
|ИТОГИ
|	СУММА(КоличествоРасход)
|ПО
|	Склад,
|	Номенклатура
|""
;

Выборка = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);

ТабДок = Новый ТабличныйДокумент;
ТабМакет = ПолучитьМакет(""Макет"");

ОбластьСклад = ТабМакет.ПолучитьОбласть(""Склад"");
ОбластьНоменклатура = ТабМакет.ПолучитьОбласть(""Номенклатура"");

ТабДок.НачатьАвтогруппировкуСтрок();

Пока Выборка.Следующий() Цикл
	ОбластьСклад.Параметры.Заполнить( Выборка);
	ТабДок.Вывести(ОбластьСклад, Выборка.Уровень());
	
	ВыборкаНоменклатура = Выборка.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);

	Пока ВыборкаНоменклатура.Следующий() Цикл
		ОбластьНоменклатура.Параметры.Заполнить(ВыборкаНоменклатура);
		ТабДок.Вывести(ОбластьНоменклатура, ВыборкаНоменклатура.Уровень());
	КонецЦикла;
КонецЦикла;

ТабДок.ЗакончитьАвтогруппировкуСтрок();

ТабДок.Показать();
"}
},
{0,
{"Листинг 13.178. Пример использования имен групп",0,0,"13.178","Запрос = Новый Запрос;
Запрос.Текст = 
""ВЫБРАТЬ
|	ТоварыНаСкладахОбороты.Склад.Представление КАК Склад,
|	ТоварыНаСкладахОбороты.Номенклатура.Представление КАК Номенклатура,
|	СУММА(ТоварыНаСкладахОбороты.КоличествоРасход) КАК КоличествоРасход
|ИЗ
|	РегистрНакопления.ТоварыНаСкладах.Обороты КАК ТоварыНаСкладахОбороты
|
|СГРУППИРОВАТЬ ПО
|	ТоварыНаСкладахОбороты.Склад,
|	ТоварыНаСкладахОбороты.Номенклатура,
|	ТоварыНаСкладахОбороты.Склад.Представление,
|	ТоварыНаСкладахОбороты.Номенклатура.Представление
|ИТОГИ
|	СУММА(КоличествоРасход)
|ПО
|	Склад,
|	Номенклатура
|""
;

Выборка = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);

ТабДок = Новый ТабличныйДокумент;
ТабМакет = ПолучитьМакет(""Макет"");

ОбластьСклад = ТабМакет.ПолучитьОбласть(""Склад"");
ОбластьНоменклатура = ТабМакет.ПолучитьОбласть(""Номенклатура"");

ТабДок.НачатьАвтогруппировкуСтрок();

Пока Выборка.Следующий() Цикл
	ОбластьСклад.Параметры.Заполнить( Выборка);
	ТабДок.Вывести(ОбластьСклад, Выборка.Уровень());
	
	ВыборкаНоменклатура = Выборка.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);

	Пока ВыборкаНоменклатура.Следующий() Цикл
		ОбластьНоменклатура.Параметры.Заполнить(ВыборкаНоменклатура);
		ТабДок.Вывести(ОбластьНоменклатура, ВыборкаНоменклатура.Уровень(), ""Номенклатура на складе "" + Выборка.Склад);
	КонецЦикла;
КонецЦикла;

ТабДок.ЗакончитьАвтогруппировкуСтрок();

ТабДок.Показать();
"}
},
{0,
{"Листинг 13.179. Пример управления видом создаваемых группировок",0,0,"13.179","Запрос = Новый Запрос;
Запрос.Текст = 
""ВЫБРАТЬ
|	ТоварыНаСкладахОбороты.Склад.Представление КАК Склад,
|	ТоварыНаСкладахОбороты.Номенклатура.Представление КАК Номенклатура,
|	СУММА(ТоварыНаСкладахОбороты.КоличествоРасход) КАК КоличествоРасход
|ИЗ
|	РегистрНакопления.ТоварыНаСкладах.Обороты КАК ТоварыНаСкладахОбороты
|
|СГРУППИРОВАТЬ ПО
|	ТоварыНаСкладахОбороты.Склад,
|	ТоварыНаСкладахОбороты.Номенклатура,
|	ТоварыНаСкладахОбороты.Склад.Представление,
|	ТоварыНаСкладахОбороты.Номенклатура.Представление
|ИТОГИ
|	СУММА(КоличествоРасход)
|ПО
|	Склад,
|	Номенклатура
|""
;

Выборка = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);

ТабДок = Новый ТабличныйДокумент;
ТабМакет = ПолучитьМакет(""Макет"");
ОбластьСклад = ТабМакет.ПолучитьОбласть(""Склад"");
ОбластьНоменклатура = ТабМакет.ПолучитьОбласть(""Номенклатура"");

ТабДок.НачатьАвтогруппировкуСтрок();

Пока Выборка.Следующий() Цикл
	ОбластьСклад.Параметры.Заполнить( Выборка);
	ТабДок.Вывести(ОбластьСклад, Выборка.Уровень());
	
	ВыборкаНоменклатура = Выборка.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	Пока ВыборкаНоменклатура.Следующий() Цикл
		ОбластьНоменклатура.Параметры.Заполнить(ВыборкаНоменклатура);
		ТабДок.Вывести(ОбластьНоменклатура, ВыборкаНоменклатура.Уровень(), , Ложь);
	КонецЦикла;
КонецЦикла;

ТабДок.ЗакончитьАвтогруппировкуСтрок();

ТабДок.Показать();
"}
},
{0,
{"Листинг 13.180. Пример использования группировки строк табличного документа",0,0,"13.180","ТабМакет = ПолучитьМакет(""Макет"");
ОбластьСтрока = ТабМакет.ПолучитьОбласть(""Строка"");
 
ТабДок = Новый ТабличныйДокумент;

// Вывести одну строку верхнего уровня 
ОбластьСтрока.Параметры.Название = ""Строка верхнего уровня"";
ТабДок.Вывести(ОбластьСтрока);
 
ТабДок.НачатьГруппуСтрок();

// Вывести три строки группы первого уровня 
ОбластьСтрока.Параметры.Название = ""Группировка первого уровня"";
ТабДок.Вывести(ОбластьСтрока);
ТабДок.Вывести(ОбластьСтрока);
ТабДок.Вывести(ОбластьСтрока);
 
ТабДок.НачатьГруппуСтрок();
// Вывести две строки группы второго уровня
ОбластьСтрока.Параметры.Название = ""Группировка второго уровня"";
ТабДок.Вывести(ОбластьСтрока);
ТабДок.Вывести(ОбластьСтрока);

ТабДок.ЗакончитьГруппуСтрок(); // закончить группировку строк второго уровня
ТабДок.ЗакончитьГруппуСтрок(); // закончить группировку строк первого уровня

ТабДок.Показать();
"}
},
{0,
{"Листинг 13.181. Управление цветом фона и текста области группировок",0,0,"13.181","// …
ТабДок.ЦветФонаГруппировки = WebЦвета.Черный;
ТабДок.ЦветТекстаГруппировки = WebЦвета.Белый;
// …
"}
},
{0,
{"Листинг 13.182. Получение области на указанном языке",0,0,"13.182","ТабМакет = ПолучитьМакет(""Макет"");
ТабДок = Новый ТабличныйДокумент;

ОбластьСтрока = ТабМакет.ПолучитьОбласть(""Строка"");

// Вывести строки, содержащиеся в области, на русском языке
ОбластьСтрока.КодЯзыкаМакета = ""ru"";
ТабДок.Вывести(ОбластьСтрока);                           
 
// Вывести строки, содержащиеся в области, на английском языке
ОбластьСтрока.КодЯзыкаМакета = ""en"";
ТабДок.Вывести(ОбластьСтрока);
 
ТабДок.Показать();
"}
},
{0,
{"Листинг 13.183. Пример использования расшифровки",0,0,"13.183","Запрос = Новый Запрос;
Запрос.Текст = 
""ВЫБРАТЬ
|	ТоварыНаСкладахОбороты.Склад КАК Склад,
|	ТоварыНаСкладахОбороты.Склад.Представление КАК СкладПредставление,
|	ТоварыНаСкладахОбороты.Номенклатура КАК Номенклатура,
|	ТоварыНаСкладахОбороты.Номенклатура.Представление КАК НоменклатураПредставление,
|	СУММА(ТоварыНаСкладахОбороты.КоличествоРасход) КАК КоличествоРасход
|ИЗ
|	РегистрНакопления.ТоварыНаСкладах.Обороты КАК ТоварыНаСкладахОбороты
|
|СГРУППИРОВАТЬ ПО
|	ТоварыНаСкладахОбороты.Склад,
|	ТоварыНаСкладахОбороты.Номенклатура
|ИТОГИ
|	СУММА(КоличествоРасход)
|ПО
|	Склад,
|	Номенклатура""
;

Выборка = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);

ТабДок = Новый ТабличныйДокумент;
ТабМакет = ПолучитьМакет(""Макет"");

ОбластьСклад = ТабМакет.ПолучитьОбласть(""Склад"");
ОбластьНоменклатура = ТабМакет.ПолучитьОбласть(""Номенклатура"");

ТабДок.НачатьАвтогруппировкуСтрок();

Пока Выборка.Следующий() Цикл
	ОбластьСклад.Параметры.Заполнить( Выборка);
	
	// Установить расшифровку поля Склад группировки Склад
	ОбластьСклад.Параметры.РасшифровкаСклада = Выборка.Склад;
	
	ТабДок.Вывести(ОбластьСклад, Выборка.Уровень());
	
	ВыборкаНоменклатура = Выборка.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);

	Пока ВыборкаНоменклатура.Следующий() Цикл
		ОбластьНоменклатура.Параметры.Заполнить(ВыборкаНоменклатура);
		
		// Установить расшифровку полей Склад и Номенклатура 
		// группировки Номенклатура
		ОбластьНоменклатура.Параметры.РасшифровкаСклада = ВыборкаНоменклатура.Склад;
		ОбластьНоменклатура.Параметры.РасшифровкаНоменклатуры = ВыборкаНоменклатура.Номенклатура;
		
		ТабДок.Вывести(ОбластьНоменклатура, ВыборкаНоменклатура.Уровень());
	КонецЦикла;
КонецЦикла;

ТабДок.ЗакончитьАвтогруппировкуСтрок();

// Установить режим просмотра документа
ТабДок.ТолькоПросмотр = Истина;

ТабДок.Показать();
"}
},
{0,
{"Листинг 13.184. Печать табличного документа с использованием диалога печати",0,0,"13.184","ТабДок = ПолучитьМакет(""Макет"");
ТабДок.Напечатать(Ложь);	
"}
},
{0,
{"Листинг 13.185. Печать на указанный принтер",0,0,"13.185","ТабДок = ПолучитьМакет(""Макет"");
ТабДок.ИмяПринтера = ""HP LaserJet 6L"";
ТабДок.Напечатать();	
"}
},
{0,
{"Листинг 13.186. Пример использования колонтитулов",0,0,"13.186","ТабДок = Новый ТабличныйДокумент;
// …
ВерхнийКолонтитул = ТабДок.ВерхнийКолонтитул;
ВерхнийКолонтитул.Выводить = Истина;
ВерхнийКолонтитул.ТекстСлева = ""Отчет составлен [&Дата] в [&Время]"";

НижнийКолонтитул = ТабДок.НижнийКолонтитул;
НижнийКолонтитул.Выводить = Истина;
НижнийКолонтитул.ТекстВЦентре = ""Страница [&НомерСтраницы] из [&СтраницВсего]"";
// …
ТабДок.Напечатать();
"}
},
{0,
{"Листинг 13.187. Пример использования метода ПроверитьВывод()",0,0,"13.187","ТабМакет = ПолучитьМакет(""Макет"");
ОбластьШапка = ТабМакет.ПолучитьОбласть(""Шапка"");
ОбластьСтрока = ТабМакет.ПолучитьОбласть(""Строка"");
ОбластьПодвал = ТабМакет.ПолучитьОбласть(""Подвал"");

// Сформировать массив областей для проверки
СтрокаСПодвалом = Новый Массив;
СтрокаСПодвалом.Добавить(ОбластьСтрока);
СтрокаСПодвалом.Добавить(ОбластьПодвал);

ТабДок = Новый ТабличныйДокумент();

// заполнение параметров области Шапка
//...

ТабДок.Вывести(ОбластьШапка);

// Цикл обхода данных, выводимых в результирующий документ
Пока Выборка.Следующий() Цикл
	Если ТабДок.ПроверитьВывод(СТрокаСПодвалом) Тогда

		// заполнение значений параметров области Строка
		// ...
		ТабДок.Вывести(ОбластьСтрока);
	Иначе

		// заполнение значений параметров области Подвал
		// ...
		
		ТабДок.Вывести(ОбластьПодвал);
		ТабДок.ВывестиГоризонтальныйРазделительСтраниц();

		// заполнение параметров области Шапка
		// ...
		
		ТабДок.Вывести(ОбластьШапка);

		// заполнение параметров области Строка
		// ...
		
		ТабДок.Вывести(ОбластьСтрока);
	КонецЕсли;
КонецЦикла;

// заполнение параметров области Подвал
// ...

ТабДок.Вывести(ОбластьПодвал);

ТабДок.Напечатать();
"}
},
{0,
{"Листинг 13.188. Пример добавления сводной таблицы в табличный документ",0,0,"13.188","ТабДок = Новый ТабличныйДокумент;
Таблица = ТабДок.ВстроенныеТаблицы.Добавить(Тип(""СводнаяТаблица""), ТабДок.Область(2, 2));
ТабДок.Показать();
"}
},
{0,
{"Листинг 13.189. Пример установки источника данных сводной таблицы",0,0,"13.189","Построитель = Новый ПостроительОтчета();
Построитель.Текст =
""ВЫБРАТЬ
|	ТоварыНаСкладахОстаткиИОбороты.Склад КАК Склад,
|	ТоварыНаСкладахОстаткиИОбороты.Склад.Код КАК КодСклада,
|	ТоварыНаСкладахОстаткиИОбороты.Склад.Представление,
|	ТоварыНаСкладахОстаткиИОбороты.Номенклатура КАК Номенклатура,
|	ТоварыНаСкладахОстаткиИОбороты.Номенклатура.Представление,
|	СУММА(ТоварыНаСкладахОстаткиИОбороты.КоличествоПриход) КАК КоличествоПриход,
|	СУММА(ТоварыНаСкладахОстаткиИОбороты.КоличествоОборот) КАК КоличествоОборот,
|	СУММА(ТоварыНаСкладахОстаткиИОбороты.КоличествоРасход) КАК КоличествоРасход
|ИЗ
|	РегистрНакопления.ТоварыНаСкладах.ОстаткиИОбороты КАК ТоварыНаСкладахОстаткиИОбороты
|СГРУППИРОВАТЬ ПО
|	ТоварыНаСкладахОстаткиИОбороты.Склад,
|	ТоварыНаСкладахОстаткиИОбороты.Номенклатура,
|	ТоварыНаСкладахОстаткиИОбороты.Склад.Представление,
|	ТоварыНаСкладахОстаткиИОбороты.Номенклатура.Представление
|ИТОГИ СУММА(КоличествоПриход),
|		СУММА(КоличествоОборот),
|		СУММА(КоличествоРасход) ПО
|	ОБЩИЕ,
|	Номенклатура ИЕРАРХИЯ,
|	Склад Иерархия"";

Построитель.ЗаполнитьНастройки();

ТабДок = Новый ТабличныйДокумент;
Таблица = ТабДок.ВстроенныеТаблицы.Добавить(Тип(""СводнаяТаблица""), ТабДок.Область(2, 2));
Таблица.ИсточникДанных = Построитель;
"}
},
{0,
{"Листинг 13.190. Пример отображения окна полей сводной таблицы",0,0,"13.190","Построитель = Новый ПостроительОтчета();
Построитель.Текст =
// …
// см. листинг 13.191
// …
;

Построитель.ЗаполнитьНастройки();

ТабДок = Новый ТабличныйДокумент;
Таблица = ТабДок.ВстроенныеТаблицы.Добавить(Тип(""СводнаяТаблица""),  ТабДок.Область(2, 2));
Таблица.ИсточникДанных = Построитель;
Таблица.ОтображатьПоля = Истина;
ТабДок.Показать();
"}
},
{0,
{"Листинг 13.191. Пример формирования полей сводной таблицы, когда в качестве источника данных используется результат запроса",0,0,"13.191","Запрос = Новый Запрос;
Запрос.Текст =
""ВЫБРАТЬ
|	ТоварыНаСкладахОстаткиИОбороты.Склад КАК Склад,
|	ТоварыНаСкладахОстаткиИОбороты.Склад.Код КАК КодСклада,
|	ТоварыНаСкладахОстаткиИОбороты.Склад.Представление,
|	ТоварыНаСкладахОстаткиИОбороты.Номенклатура КАК Номенклатура,
|	ТоварыНаСкладахОстаткиИОбороты.Номенклатура.Представление,
|	СУММА(ТоварыНаСкладахОстаткиИОбороты.КоличествоПриход) КАК КоличествоПриход,
|	СУММА(ТоварыНаСкладахОстаткиИОбороты.КоличествоОборот) КАК КоличествоОборот,
|	СУММА(ТоварыНаСкладахОстаткиИОбороты.КоличествоРасход) КАК КоличествоРасход
|ИЗ
|	РегистрНакопления.ТоварыНаСкладах.ОстаткиИОбороты КАК ТоварыНаСкладахОстаткиИОбороты
|СГРУППИРОВАТЬ ПО
|	ТоварыНаСкладахОстаткиИОбороты.Склад,
|	ТоварыНаСкладахОстаткиИОбороты.Номенклатура,
|	ТоварыНаСкладахОстаткиИОбороты.Склад.Представление,
|	ТоварыНаСкладахОстаткиИОбороты.Номенклатура.Представление
|ИТОГИ СУММА(КоличествоПриход),
|		СУММА(КоличествоОборот),
|		СУММА(КоличествоРасход) ПО
|	ОБЩИЕ,
|	Номенклатура Иерархия,
|	Склад Иерархия""
;

ТабДок = Новый ТабличныйДокумент;
Таблица = ТабДок.ВстроенныеТаблицы.Добавить(Тип(""СводнаяТаблица""), ТабДок.Область(2, 2));

Таблица.ИсточникДанных = Запрос.Выполнить();
Таблица.ОтображатьПоля = Истина;
ТабДок.Показать();
"}
},
{0,
{"Листинг 13.192. Пример формирования полей сводной таблицы, когда в качестве источника данных используется построитель отчета",0,0,"13.192","Построитель = Новый ПостроительОтчета();
Построитель.Текст =
""ВЫБРАТЬ
|	ТоварыНаСкладахОстаткиИОбороты.Склад КАК Склад,
|	ТоварыНаСкладахОстаткиИОбороты.Склад.Код КАК КодСклада,
|	ТоварыНаСкладахОстаткиИОбороты.Склад.Представление,
|	ТоварыНаСкладахОстаткиИОбороты.Номенклатура КАК Номенклатура,
|	ТоварыНаСкладахОстаткиИОбороты.Номенклатура.Представление,
|	СУММА(ТоварыНаСкладахОстаткиИОбороты.КоличествоПриход) КАК КоличествоПриход,
|	СУММА(ТоварыНаСкладахОстаткиИОбороты.КоличествоОборот) КАК КоличествоОборот,
|	СУММА(ТоварыНаСкладахОстаткиИОбороты.КоличествоРасход) КАК КоличествоРасход
|ИЗ
|	РегистрНакопления.ТоварыНаСкладах.ОстаткиИОбороты КАК ТоварыНаСкладахОстаткиИОбороты
|СГРУППИРОВАТЬ ПО
|	ТоварыНаСкладахОстаткиИОбороты.Склад,
|	ТоварыНаСкладахОстаткиИОбороты.Номенклатура,
|	ТоварыНаСкладахОстаткиИОбороты.Склад.Представление,
|	ТоварыНаСкладахОстаткиИОбороты.Номенклатура.Представление
|ИТОГИ СУММА(КоличествоПриход),
|		СУММА(КоличествоОборот),
|		СУММА(КоличествоРасход) ПО
|	ОБЩИЕ,
|	Номенклатура Иерархия,
|	Склад Иерархия""
;

Построитель.ЗаполнитьНастройки();

ТабДок = Новый ТабличныйДокумент;
Таблица = ТабДок.ВстроенныеТаблицы.Добавить(Тип(""СводнаяТаблица""), ТабДок.Область(2, 2));

Таблица.ИсточникДанных = Построитель;
Таблица.ОтображатьПоля = Истина;
ТабДок.Показать();
"}
},
{0,
{"Листинг 13.193. Пример добавления полей сводной таблицы в строки/колонки и данные",0,0,"13.193","Построитель = Новый ПостроительОтчета();
Построитель.Текст =
""ВЫБРАТЬ
|	ТоварыНаСкладахОстаткиИОбороты.Склад КАК Склад,
|	ТоварыНаСкладахОстаткиИОбороты.Склад.Код КАК КодСклада,
|	ТоварыНаСкладахОстаткиИОбороты.Склад.Представление,
|	ТоварыНаСкладахОстаткиИОбороты.Номенклатура КАК Номенклатура,
|	ТоварыНаСкладахОстаткиИОбороты.Номенклатура.Представление,
|	СУММА(ТоварыНаСкладахОстаткиИОбороты.КоличествоПриход) КАК КоличествоПриход,
|	СУММА(ТоварыНаСкладахОстаткиИОбороты.КоличествоОборот) КАК КоличествоОборот,
|	СУММА(ТоварыНаСкладахОстаткиИОбороты.КоличествоРасход) КАК КоличествоРасход
|ИЗ
|	РегистрНакопления.ТоварыНаСкладах.ОстаткиИОбороты КАК ТоварыНаСкладахОстаткиИОбороты
|СГРУППИРОВАТЬ ПО
|	ТоварыНаСкладахОстаткиИОбороты.Склад,
|	ТоварыНаСкладахОстаткиИОбороты.Номенклатура,
|	ТоварыНаСкладахОстаткиИОбороты.Склад.Представление,
|	ТоварыНаСкладахОстаткиИОбороты.Номенклатура.Представление
|ИТОГИ СУММА(КоличествоПриход),
|		СУММА(КоличествоОборот),
|		СУММА(КоличествоРасход) ПО
|	ОБЩИЕ,
|	Номенклатура Иерархия,
|	Склад Иерархия""
;

Построитель.ЗаполнитьНастройки();

ТабДок = Новый ТабличныйДокумент;
Таблица = ТабДок.ВстроенныеТаблицы.Добавить(Тип(""СводнаяТаблица""), ТабДок.Область(2, 2));

Таблица.ИсточникДанных = Построитель;
Таблица.Обновление = Ложь;

Таблица.Строки.Добавить(""Номенклатура"");
Таблица.Колонки.Добавить(""Склад"");
Таблица.Данные.Добавить(""КоличествоПриход"");
Таблица.Данные.Добавить(""КоличествоРасход"");

Таблица.Обновление = Истина;

ТабДок.Показать();
"}
},
{0,
{"Листинг 13.194. Пример указания количества открытых уровней",0,0,"13.194","Построитель = Новый ПостроительОтчета();
Построитель.Текст =
""ВЫБРАТЬ
|	ТоварыНаСкладахОстаткиИОбороты.Склад КАК Склад,
|	ТоварыНаСкладахОстаткиИОбороты.Склад.Код КАК КодСклада,
|	ТоварыНаСкладахОстаткиИОбороты.Склад.Представление,
|	ТоварыНаСкладахОстаткиИОбороты.Номенклатура КАК Номенклатура,
|	ТоварыНаСкладахОстаткиИОбороты.Номенклатура.Представление,
|	СУММА(ТоварыНаСкладахОстаткиИОбороты.КоличествоПриход) КАК КоличествоПриход,
|	СУММА(ТоварыНаСкладахОстаткиИОбороты.КоличествоОборот) КАК КоличествоОборот,
|	СУММА(ТоварыНаСкладахОстаткиИОбороты.КоличествоРасход) КАК КоличествоРасход
|ИЗ
|	РегистрНакопления.ТоварыНаСкладах.ОстаткиИОбороты КАК ТоварыНаСкладахОстаткиИОбороты
|СГРУППИРОВАТЬ ПО
|	ТоварыНаСкладахОстаткиИОбороты.Склад,
|	ТоварыНаСкладахОстаткиИОбороты.Номенклатура,
|	ТоварыНаСкладахОстаткиИОбороты.Склад.Представление,
|	ТоварыНаСкладахОстаткиИОбороты.Номенклатура.Представление
|ИТОГИ СУММА(КоличествоПриход),
|		СУММА(КоличествоОборот),
|		СУММА(КоличествоРасход) ПО
|	ОБЩИЕ,
|	Номенклатура Иерархия,
|	Склад Иерархия""
;

Построитель.ЗаполнитьНастройки();
  
ТабДок = Новый ТабличныйДокумент;
Таблица = ТабДок.ВстроенныеТаблицы.Добавить(Тип(""СводнаяТаблица""), ТабДок.Область(2, 2));

Таблица.ИсточникДанных = Построитель;
Таблица.Обновление = Ложь;

Таблица.Строки.Добавить(""Номенклатура"");
Таблица.Колонки.Добавить(""Склад"");
Таблица.Данные.Добавить(""КоличествоПриход"");

Таблица.Строки.Номенклатура.КоличествоОткрытыхУровней = Таблица.Строки.Номенклатура.КоличествоУровней();

Таблица.Обновление = Истина;

ТабДок.Показать();
"}
},
{0,
{"Листинг 13.195. Изменение количества открытых уровней поля",0,0,"13.195","Построитель = Новый ПостроительОтчета();
Построитель.Текст =
// …
// см. листинг 13.194
// …
;

Построитель.ЗаполнитьНастройки();
  
ТабДок = Новый ТабличныйДокумент;
Таблица = ТабДок.ВстроенныеТаблицы.Добавить(Тип(""СводнаяТаблица""), ТабДок.Область(2, 2));

Таблица.ИсточникДанных = Построитель;
Таблица.Обновление = Ложь;

Таблица.Поля.Номенклатура.КоличествоОткрытыхУровней = 2;
Таблица.Колонки.Добавить(""Склад"");
Таблица.Данные.Добавить(""КоличествоПриход"");

Таблица.Обновление = Истина;

ТабДок.Показать();
"}
},
{0,
{"Листинг 13.196. Использование оформления сводной таблицы",0,0,"13.196","Построитель = Новый ПостроительОтчета();
Построитель.Текст =
// …
// см. листинг 13.194
// …
;

Построитель.ЗаполнитьНастройки();
  
ТабДок = Новый ТабличныйДокумент;
Таблица = ТабДок.ВстроенныеТаблицы.Добавить(Тип(""СводнаяТаблица""), ТабДок.Область(2, 2));

Таблица.ИсточникДанных = Построитель;
Таблица.Обновление = Ложь;

Таблица.Строки.Добавить(""Номенклатура"");
Таблица.Колонки.Добавить(""Склад"");
Таблица.Данные.Добавить(""КоличествоПриход"");

Таблица.МакетОформления = СтандартноеОформление.Лед;

Таблица.Обновление = Истина;

ТабДок.Показать();
"}
},
{0,
{"Листинг 13.197. Установка положения итогов строк",0,0,"13.197","Построитель = Новый ПостроительОтчета();
Построитель.Текст =
// …
// см. листинг 13.194
// …
;

Построитель.ЗаполнитьНастройки();
  
ТабДок = Новый ТабличныйДокумент;
Таблица = ТабДок.ВстроенныеТаблицы.Добавить(Тип(""СводнаяТаблица""), ТабДок.Область(2, 2));

Таблица.ИсточникДанных = Построитель;
Таблица.Обновление = Ложь;

Таблица.Строки.Добавить(""Номенклатура"");
Таблица.Колонки.Добавить(""Склад"");
Таблица.Данные.Добавить(""КоличествоПриход"");

Таблица.МакетОформления = СтандартноеОформление.Лед;
Таблица.ПоложениеИтоговСтрок = ПоложениеИтоговСтрокСводнойТаблицы.Низ;

Таблица.Обновление = Истина;

ТабДок.Показать();
"}
},
{0,
{"Листинг 13.198. Пример размещения измерений отдельно",0,0,"13.198","Построитель = Новый ПостроительОтчета();
Построитель.Текст =
// …
// см. листинг 13.194
// …
;

Построитель.ЗаполнитьНастройки();
  
ТабДок = Новый ТабличныйДокумент;
Таблица = ТабДок.ВстроенныеТаблицы.Добавить(Тип(""СводнаяТаблица""), ТабДок.Область(2, 2));

Таблица.ИсточникДанных = Построитель;
Таблица.Обновление = Ложь;

Таблица.Строки.Добавить(""Склад"");
Таблица.Строки.Добавить(""Номенклатура"");
Таблица.Данные.Добавить(""КоличествоПриход"");

Таблица.МакетОформления = СтандартноеОформление.Лед;
Таблица.Обновление = Истина;
ТабДок.Показать();
"}
},
{0,
{"Листинг 13.199. Пример размещения измерений вместе",0,0,"13.199","Построитель = Новый ПостроительОтчета();
Построитель.Текст =
// …
// см. листинг 13.194
// …
;

Построитель.ЗаполнитьНастройки();
  
ТабДок = Новый ТабличныйДокумент;
Таблица = ТабДок.ВстроенныеТаблицы.Добавить(Тип(""СводнаяТаблица""), ТабДок.Область(2, 2));

Таблица.ИсточникДанных = Построитель;
Таблица.Обновление = Ложь;

Таблица.Строки.Добавить(""Склад"");
Таблица.Строки.Добавить(""Номенклатура"");
Таблица.Данные.Добавить(""КоличествоПриход"");

Таблица.РазмещениеИзмеренийВСтроках = ТипРазмещенияИзмерений.Вместе;

Таблица.МакетОформления = СтандартноеОформление.Лед;
Таблица.Обновление = Истина;
ТабДок.Показать();
"}
},
{0,
{"Листинг 13.200. Пример вывода реквизита как отдельного измерения",0,0,"13.200","Построитель = Новый ПостроительОтчета();
Построитель.Текст =
// …
// см. листинг 13.194
// …
;

Построитель.ЗаполнитьНастройки();
  
ТабДок = Новый ТабличныйДокумент;
Таблица = ТабДок.ВстроенныеТаблицы.Добавить(Тип(""СводнаяТаблица""), ТабДок.Область(2, 2));

Таблица.ИсточникДанных = Построитель;
Таблица.Обновление = Ложь;

Таблица.Строки.Добавить(""Номенклатура"");
Таблица.Строки.Добавить(""Номенклатура.Код"");

Таблица.Колонки.Добавить(""Склад"");
Таблица.Данные.Добавить(""КоличествоПриход"");

Таблица.МакетОформления = СтандартноеОформление.Лед;

Таблица.Обновление = Истина;

ТабДок.Показать();
"}
},
{0,
{"Листинг 13.201. Пример вывода реквизита измерения",0,0,"13.201","Построитель = Новый ПостроительОтчета();
Построитель.Текст =
// …
// см. листинг 13.194
// …
;

Построитель.ЗаполнитьНастройки();
  
ТабДок = Новый ТабличныйДокумент;
Таблица = ТабДок.ВстроенныеТаблицы.Добавить(Тип(""СводнаяТаблица""), ТабДок.Область(2, 2));

Таблица.ИсточникДанных = Построитель;
Таблица.Обновление = Ложь;

Таблица.Строки.Добавить(""Номенклатура"");
Таблица.Реквизиты.Добавить(""Номенклатура.Код"");

Таблица.Колонки.Добавить(""Склад"");
Таблица.Данные.Добавить(""КоличествоПриход"");

Таблица.МакетОформления = СтандартноеОформление.Лед;

Таблица.Обновление = Истина;

ТабДок.Показать();
"}
},
{0,
{"Листинг 13.202. Пример вывода реквизитов измерений",0,0,"13.202","Построитель = Новый ПостроительОтчета();
Построитель.Текст =
// …
// см. листинг 13.194
// …
;

Построитель.ЗаполнитьНастройки();
  
ТабДок = Новый ТабличныйДокумент;
Таблица = ТабДок.ВстроенныеТаблицы.Добавить(Тип(""СводнаяТаблица""), ТабДок.Область(2, 2));

Таблица.ИсточникДанных = Построитель;
Таблица.Обновление = Ложь;

Таблица.Строки.Добавить(""Номенклатура"");
Таблица.Колонки.Добавить(""Склад"");

Таблица.Реквизиты.Добавить(""Номенклатура.Код"");
Таблица.Реквизиты.Добавить(""Склад.Код"");

Таблица.Данные.Добавить(""КоличествоПриход"");

Таблица.МакетОформления = СтандартноеОформление.Лед;

Таблица.Обновление = Истина;

ТабДок.Показать();
"}
},
{0,
{"Листинг 13.203. Пример размещения реквизитов измерений отдельно",0,0,"13.203","Построитель = Новый ПостроительОтчета();
Построитель.Текст =
// …
// см. листинг 13.194
// …
;

Построитель.ЗаполнитьНастройки();
  
ТабДок = Новый ТабличныйДокумент;
Таблица = ТабДок.ВстроенныеТаблицы.Добавить(Тип(""СводнаяТаблица""), ТабДок.Область(2, 2));

Таблица.ИсточникДанных = Построитель;
Таблица.Обновление = Ложь;

Таблица.Строки.Добавить(""Склад"");
Таблица.Строки.Добавить(""Номенклатура"");

Таблица.Реквизиты.Добавить(""Номенклатура.Код"");
Таблица.Реквизиты.Добавить(""Склад.Код"");

Таблица.Данные.Добавить(""КоличествоПриход"");

Таблица.РазмещениеИзмеренийВСтроках = ТипРазмещенияИзмерений.Вместе;

Таблица.МакетОформления = СтандартноеОформление.Лед;

Таблица.Обновление = Истина;

ТабДок.Показать();
"}
},
{0,
{"Листинг 13.204. Пример размещения реквизитов вместе",0,0,"13.204","Построитель = Новый ПостроительОтчета();
Построитель.Текст =
// …
// см. листинг 13.194
// …
;

Построитель.ЗаполнитьНастройки();
  
ТабДок = Новый ТабличныйДокумент;
Таблица = ТабДок.ВстроенныеТаблицы.Добавить(Тип(""СводнаяТаблица""), ТабДок.Область(2, 2));

Таблица.ИсточникДанных = Построитель;
Таблица.Обновление = Ложь;

Таблица.Строки.Добавить(""Склад"");
Таблица.Строки.Добавить(""Номенклатура"");

Таблица.Реквизиты.Добавить(""Номенклатура.Код"");
Таблица.Реквизиты.Добавить(""Склад.Код"");

Таблица.Данные.Добавить(""КоличествоПриход"");

Таблица.РазмещениеИзмеренийВСтроках = ТипРазмещенияИзмерений.Вместе;
Таблица.РазмещениеРеквизитовИзмеренийВСтроках = ТипРазмещенияРеквизитовИзмерений.Вместе;

Таблица.МакетОформления = СтандартноеОформление.Лед;

Таблица.Обновление = Истина;

ТабДок.Показать();
"}
},
{0,
{"Листинг 13.205. Пример размещения реквизитов вместе с измерениями",0,0,"13.205","Построитель = Новый ПостроительОтчета();
Построитель.Текст =
// …
// см. листинг 13.194
// …
;

Построитель.ЗаполнитьНастройки();
  
ТабДок = Новый ТабличныйДокумент;
Таблица = ТабДок.ВстроенныеТаблицы.Добавить(Тип(""СводнаяТаблица""), ТабДок.Область(2, 2));

Таблица.ИсточникДанных = Построитель;
Таблица.Обновление = Ложь;

Таблица.Строки.Добавить(""Номенклатура"");
Таблица.Колонки.Добавить(""Склад"");

Таблица.Реквизиты.Добавить(""Номенклатура.Код"");
Таблица.Реквизиты.Добавить(""Склад.Код"");

Таблица.Данные.Добавить(""КоличествоПриход"");

Таблица.РазмещениеРеквизитовИзмеренийВСтроках = ТипРазмещенияРеквизитовИзмерений.ВместеСИзмерениями;
Таблица.РазмещениеРеквизитовИзмеренийВКолонках = ТипРазмещенияРеквизитовИзмерений.ВместеСИзмерениями;

Таблица.МакетОформления = СтандартноеОформление.Лед;

Таблица.Обновление = Истина;

ТабДок.Показать();
"}
},
{0,
{"Листинг 13.206. Вывод нескольких ресурсов в сводную таблицу",0,0,"13,206","Построитель = Новый ПостроительОтчета();
Построитель.Текст =
// …
// см. листинг 13.194
// …
;

Построитель.ЗаполнитьНастройки();
  
ТабДок = Новый ТабличныйДокумент;
Таблица = ТабДок.ВстроенныеТаблицы.Добавить(Тип(""СводнаяТаблица""), ТабДок.Область(2, 2));

Таблица.ИсточникДанных = Построитель;
Таблица.Обновление = Ложь;

Таблица.Строки.Добавить(""Номенклатура"");
Таблица.Колонки.Добавить(""Склад"");

Таблица.Данные.Добавить(""КоличествоПриход"");
Таблица.Данные.Добавить(""КоличествоОборот"");
Таблица.Данные.Добавить(""КоличествоРасход"");

Таблица.МакетОформления = СтандартноеОформление.Лед;

Таблица.Обновление = Истина;

ТабДок.Показать();
"}
},
{0,
{"Листинг 13.207. Добавление данных в строки сводной таблицы",0,0,"13.207","Построитель = Новый ПостроительОтчета();
Построитель.Текст =
// …
// см. листинг 13.194
// …
;

Построитель.ЗаполнитьНастройки();
  
ТабДок = Новый ТабличныйДокумент;
Таблица = ТабДок.ВстроенныеТаблицы.Добавить(Тип(""СводнаяТаблица""), ТабДок.Область(2, 2));

Таблица.ИсточникДанных = Построитель;
Таблица.Обновление = Ложь;

Таблица.Строки.Добавить(""Номенклатура"");
Таблица.Колонки.Добавить(""Склад"");

Таблица.Данные.Добавить(""КоличествоПриход"");
Таблица.Данные.Добавить(""КоличествоОборот"");
Таблица.Данные.Добавить(""КоличествоРасход"");

Таблица.Строки.Добавить(Таблица.Данные);

Таблица.МакетОформления = СтандартноеОформление.Лед;

Таблица.Обновление = Истина;

ТабДок.Показать();
"}
},
{0,
{"Листинг 13.208. Пример вывода только данных в строки сводной таблицы",0,0,"13.208","Построитель = Новый ПостроительОтчета();
Построитель.Текст =
// …
// см. листинг 13.194
// …
;

Построитель.ЗаполнитьНастройки();
  
ТабДок = Новый ТабличныйДокумент;
Таблица = ТабДок.ВстроенныеТаблицы.Добавить(Тип(""СводнаяТаблица""), ТабДок.Область(2, 2));

Таблица.ИсточникДанных = Построитель;
Таблица.Обновление = Ложь;

Таблица.Колонки.Добавить(""Склад"");

Таблица.Данные.Добавить(""КоличествоПриход"");
Таблица.Данные.Добавить(""КоличествоОборот"");
Таблица.Данные.Добавить(""КоличествоРасход"");

Таблица.Строки.Добавить(Таблица.Данные);

Таблица.МакетОформления = СтандартноеОформление.Лед;

Таблица.Обновление = Истина;

ТабДок.Показать();
"}
},
{0,
{"Листинг 13.209. Пример оформления областей заголовков строк/колонок и области данных",0,0,"13.209","Построитель = Новый ПостроительОтчета();
Построитель.Текст =
// …
// см. листинг 13.194
// …
;

Построитель.ЗаполнитьНастройки();
  
ТабДок = Новый ТабличныйДокумент;
Таблица = ТабДок.ВстроенныеТаблицы.Добавить(Тип(""СводнаяТаблица""), ТабДок.Область(2, 2));

Таблица.ИсточникДанных = Построитель;
Таблица.Обновление = Ложь;

Таблица.Строки.Добавить(""Номенклатура"");
Таблица.Колонки.Добавить(""Склад"");
Таблица.Данные.Добавить(""КоличествоПриход"");

ШрифтНаклонный =  Новый Шрифт( , , , Истина);

ЗаголовкиКолонок = Таблица.ОбластьЗаголовковКолонок;
ЗаголовкиКолонок.ЦветФона = WebЦвета.Пшеничный;
ЗаголовкиКолонок.Шрифт =  ШрифтНаклонный;

ЗаголовкиСтрок = Таблица.ОбластьЗаголовковСтрок;
ЗаголовкиСтрок.ЦветФона = WebЦвета.Пшеничный;
ЗаголовкиСтрок.Шрифт =  ШрифтНаклонный;

Таблица.ОбластьДанных.ЦветФона = WebЦвета.СветлоЖелтый;

Таблица.Обновление = Истина;

ТабДок.Показать();
"}
},
{0,
{"Листинг 13.210 Пример формирования табличного документа в форме",0,0,"13.210","Запрос = Новый Запрос;
Запрос.Текст = 
""ВЫБРАТЬ
|	ТоварыНаСкладахОбороты.Склад КАК Склад,
|	ТоварыНаСкладахОбороты.Склад.Представление КАК СкладПредставление,
|	ТоварыНаСкладахОбороты.Номенклатура КАК Номенклатура,
|	ТоварыНаСкладахОбороты.Номенклатура.Представление КАК НоменклатураПредставление,
|	СУММА(ТоварыНаСкладахОбороты.КоличествоРасход) КАК КоличествоРасход
|ИЗ
|	РегистрНакопления.ТоварыНаСкладах.Обороты КАК ТоварыНаСкладахОбороты
|
|СГРУППИРОВАТЬ ПО
|	ТоварыНаСкладахОбороты.Склад,
|	ТоварыНаСкладахОбороты.Номенклатура
|ИТОГИ
|	СУММА(КоличествоРасход)
|ПО
|	Склад,
|	Номенклатура""
;

Выборка = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);

ТабМакет = ПолучитьМакет(""Макет"");

ОбластьСклад = ТабМакет.ПолучитьОбласть(""Склад"");
ОбластьНоменклатура = ТабМакет.ПолучитьОбласть(""Номенклатура"");

ЭлементыФормы.ПолеТабличногоДокумента.НачатьАвтогруппировкуСтрок();

Пока Выборка.Следующий() Цикл
	ОбластьСклад.Параметры.Заполнить( Выборка);
	
	// Установить расшифровку поля Склад группировки Склад
	ОбластьСклад.Параметры.РасшифровкаСклада = Выборка.Склад;
	
	ЭлементыФормы.ПолеТабличногоДокумента.Вывести(ОбластьСклад, Выборка.Уровень());
	
	ВыборкаНоменклатура = Выборка.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);

	Пока ВыборкаНоменклатура.Следующий() Цикл
		ОбластьНоменклатура.Параметры.Заполнить(ВыборкаНоменклатура);
		
		// Установить расшифровку полей Склад и Номенклатура 
		// группировки Номенклатура
		ОбластьНоменклатура.Параметры.РасшифровкаСклада = ВыборкаНоменклатура.Склад;
		ОбластьНоменклатура.Параметры.РасшифровкаНоменклатуры = ВыборкаНоменклатура.Номенклатура;
		
		ЭлементыФормы.ПолеТабличногоДокумента.Вывести(ОбластьНоменклатура, ВыборкаНоменклатура.Уровень());
	КонецЦикла;
КонецЦикла;

ЭлементыФормы.ПолеТабличногоДокумента.ЗакончитьАвтогруппировкуСтрок();

// Установить режим просмотра документа
ЭлементыФормы.ПолеТабличногоДокумента.ТолькоПросмотр = Истина;
"}
},
{0,
{"Листинг 13.211. Показ табличного документа содержащегося в форме, в отдельном окне",0,0,"13.211","ТабДок = Новый ТабличныйДокумент;
ТабДок.Вывести(ЭлементыФормы.ПолеТабличногоДокумента);
ТабДок.Показать();
"}
},
{0,
{"Листинг 13.212. Пример использования обработчика события ПриАктивизацииОбласти поля табличного документа",0,0,"13.212","Процедура ПолеТабличногоДокументаПриАктивизацииОбласти(Элемент)
	
	ТекОбласть = Элемент.ТекущаяОбласть;
	
	Если ТипЗнч(ТекОбласть) = Тип(""ОбластьЯчеекТабличногоДокумента"")  Тогда
		 // алгоритм обработки
		 // ...
		
	ИначеЕсли ТипЗнч(ТекОбласть) = Тип(""РисунокТабличногоДокумента"") Тогда
		 // алгоритм обработки
		 // ...
		
	КонецЕсли;
	
КонецПроцедуры
"}
},
{0,
{"Листинг 13.213. Пример использования обработчика события Выбор поля табличного документа",0,0,"13.213","Процедура ПолеТабличногоДокументаВыбор(Элемент, Область, СтандартнаяОбработка)
	
	Если ТипЗнч(Область) = Тип(""РисунокТабличногоДокумента"")  Тогда
		Если Область.ТипРисунка = ТипРисункаТабличногоДокумента.Картинка Тогда
			
			// Организовать диалог выбора файла для сохранения картинки
			Диалог = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Сохранение);
			Диалог.Заголовок = ""Сохраненение рисунка"";
			
			// Получить строковое представление формата картинки
			ФорматРисунка = НРег(Строка(Область.Картинка.Формат()));
			
			Если ФорматРисунка = ФорматКартинки.НеизвестныйФормат Тогда
				Предупреждение(""Формат картинки неизвестен,
				| задайте расширение сохраняемого файла самостоятельно"");
			Иначе
				Диалог.Фильтр = ""Рисунок (*."" + ФорматРисунка + "")|*."" + ФорматРисунка;
			КонецЕсли;	 
			
			// Сохранить картинку в в файл
			Если Диалог.Выбрать() Тогда
				Область.Картинка.Записать(Диалог.ПолноеИмяФайла + Диалог.Расширение);
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры
"}
},
{0,
{"Листинг 13.214. Пример заполнения расшифровки при выводе в поле табличного документа",0,0,"13.214","Запрос = Новый Запрос;
Запрос.Текст = 
""ВЫБРАТЬ
|	ТоварыНаСкладахОбороты.Склад КАК Склад,
|	ТоварыНаСкладахОбороты.Склад.Представление КАК СкладПредставление,
|	ТоварыНаСкладахОбороты.Номенклатура КАК Номенклатура,
|	ТоварыНаСкладахОбороты.Номенклатура.Представление КАК НоменклатураПредставление,
|	СУММА(ТоварыНаСкладахОбороты.КоличествоРасход) КАК КоличествоРасход
|ИЗ
|	РегистрНакопления.ТоварыНаСкладах.Обороты КАК ТоварыНаСкладахОбороты
|
|СГРУППИРОВАТЬ ПО
|	ТоварыНаСкладахОбороты.Склад,
|	ТоварыНаСкладахОбороты.Номенклатура
|ИТОГИ
|	СУММА(КоличествоРасход)
|ПО
|	Склад,
|	Номенклатура""
;

Выборка = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);

ТабМакет = ПолучитьМакет(""Макет"");

ОбластьСклад = ТабМакет.ПолучитьОбласть(""Склад"");
ОбластьНоменклатура = ТабМакет.ПолучитьОбласть(""Номенклатура"");

ЭлементыФормы.ПолеТабличногоДокумента.НачатьАвтогруппировкуСтрок();

Пока Выборка.Следующий() Цикл
	ОбластьСклад.Параметры.Заполнить( Выборка);
	
	// Установить расшифровку поля Склад группировки Склад
	СтруктураРасшифровки = Новый Структура;
	СтруктураРасшифровки.Вставить(""Склад"", Выборка.Склад);
	СтруктураРасшифровки.Вставить(""Номенклатура"", Неопределено);
	СтруктураРасшифровки.Вставить(""КоличествоРасход"", Неопределено);
	ОбластьСклад.Параметры.РасшифровкаСклада = СтруктураРасшифровки;
	
	// Установить расшифровку поля КоличествоПриход группировки Склад
	СтруктураРасшифровки = Новый Структура;
	СтруктураРасшифровки.Вставить(""Склад"", Выборка.Склад);
	СтруктураРасшифровки.Вставить(""Номенклатура"", Неопределено);
	СтруктураРасшифровки.Вставить(""КоличествоРасход"", Выборка.КоличествоРасход);
	ОбластьСклад.Параметры.РасшифровкаКоличества = СтруктураРасшифровки;
	
	ЭлементыФормы.ПолеТабличногоДокумента.Вывести(ОбластьСклад, Выборка.Уровень());
	
	ВыборкаНоменклатура = Выборка.
	Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	Пока ВыборкаНоменклатура.Следующий() Цикл
		ОбластьНоменклатура.Параметры.Заполнить(ВыборкаНоменклатура);
		
		// Установить расшифровку поля Склад группировки Номенклатура
		СтруктураРасшифровки = Новый Структура;
		СтруктураРасшифровки.Вставить(""Склад"", ВыборкаНоменклатура.Склад);
		СтруктураРасшифровки.Вставить(""Номенклатура"", Неопределено);
		СтруктураРасшифровки.Вставить(""КоличествоРасход"", Неопределено);
		ОбластьНоменклатура.Параметры.РасшифровкаСклада = СтруктураРасшифровки;
		
		// Установить расшифровку поля Номенклатура группировки Номенклатура
		СтруктураРасшифровки = Новый Структура;
		СтруктураРасшифровки.Вставить(""Склад"", ВыборкаНоменклатура.Склад);
		СтруктураРасшифровки.Вставить(""Номенклатура"", ВыборкаНоменклатура.Номенклатура);
		СтруктураРасшифровки.Вставить(""КоличествоРасход"", Неопределено);
		ОбластьНоменклатура.Параметры.РасшифровкаНоменклатуры = СтруктураРасшифровки;
		
		// Установить расшифровку поля КоличествоПриход 
		// группировки Номенклатура
		СтруктураРасшифровки = Новый Структура;
		СтруктураРасшифровки.Вставить(""Склад"", ВыборкаНоменклатура.Склад);
		СтруктураРасшифровки.Вставить(""Номенклатура"", ВыборкаНоменклатура.Номенклатура);
		СтруктураРасшифровки.Вставить(""КоличествоРасход"", ВыборкаНоменклатура.КоличествоРасход);
		ОбластьНоменклатура.Параметры.РасшифровкаКоличества = СтруктураРасшифровки;
		
		ЭлементыФормы.ПолеТабличногоДокумента.Вывести(ОбластьНоменклатура, ВыборкаНоменклатура.Уровень());
	КонецЦикла;
КонецЦикла;

ЭлементыФормы.ПолеТабличногоДокумента.ЗакончитьАвтогруппировкуСтрок();

// Установить режим просмотра документа
ЭлементыФормы.ПолеТабличногоДокумента.ТолькоПросмотр = Истина;
"}
},
{0,
{"Листинг 13.215. Пример процедуры обработки события ОбработкаРасшифровки",0,0,"13.215","Процедура ПолеТабличногоДокументаОбработкаРасшифровки(Элемент, Расшифровка, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	
	Склад = Расшифровка.Склад;
	Номенклатура = Расшифровка.Номенклатура;
	Количество = Расшифровка.КоличествоРасход;
	ПоказатьПоступлениеТоваров(Склад, Номенклатура, Количество);
	
КонецПроцедуры
"}
},
{0,
{"Листинг 13.216. Вывод сводной таблицы в поле табличного документа",0,0,"13.216","Построитель = Новый ПостроительОтчета();
Построитель.Текст =
""ВЫБРАТЬ
|	ТоварыНаСкладахОстаткиИОбороты.Склад КАК Склад,
|	ТоварыНаСкладахОстаткиИОбороты.Склад.Код КАК КодСклада,
|	ТоварыНаСкладахОстаткиИОбороты.Склад.Представление,
|	ТоварыНаСкладахОстаткиИОбороты.Номенклатура КАК Номенклатура,
|	ТоварыНаСкладахОстаткиИОбороты.Номенклатура.Представление,
|	СУММА(ТоварыНаСкладахОстаткиИОбороты.КоличествоПриход) КАК КоличествоПриход,
|	СУММА(ТоварыНаСкладахОстаткиИОбороты.КоличествоОборот) КАК КоличествоОборот,
|	СУММА(ТоварыНаСкладахОстаткиИОбороты.КоличествоРасход) КАК КоличествоРасход
|ИЗ
|	РегистрНакопления.ТоварыНаСкладах.ОстаткиИОбороты КАК ТоварыНаСкладахОстаткиИОбороты
|СГРУППИРОВАТЬ ПО
|	ТоварыНаСкладахОстаткиИОбороты.Склад,
|	ТоварыНаСкладахОстаткиИОбороты.Номенклатура,
|	ТоварыНаСкладахОстаткиИОбороты.Склад.Представление,
|	ТоварыНаСкладахОстаткиИОбороты.Номенклатура.Представление
|ИТОГИ СУММА(КоличествоПриход),
|		СУММА(КоличествоОборот),
|		СУММА(КоличествоРасход) ПО
|	ОБЩИЕ,
|	Номенклатура Иерархия,
|	Склад Иерархия""
;

Построитель.ЗаполнитьНастройки();

Таблица = ЭлементыФормы.ПолеТабличногоДокумента.ВстроенныеТаблицы.Добавить(Тип(""СводнаяТаблица""), ЭлементыФормы.ПолеТабличногоДокумента.Область(2, 2));

Таблица.ИсточникДанных = Построитель;
Таблица.Обновление = Ложь;

Таблица.Строки.Добавить(""Номенклатура"");
Таблица.Колонки.Добавить(""Склад"");
Таблица.Данные.Добавить(""КоличествоПриход"");
Таблица.Данные.Добавить(""КоличествоРасход"");

Таблица.Обновление = Истина;
"}
},
{0,
{"Листинг 13.217. Обработчик события Выбор для сводной таблицы",0,0,"13.217","Процедура ПолеТабличногоДокументаВыбор(Элемент, Область, СтандартнаяОбработка)
	
	Если ТипЗнч(Область) = Тип(""ОбластьЯчеекТабличногоДокумента"") Тогда
		
		Структура = Элемент.ВстроенныеТаблицы.СводнаяТаблица1.ПолучитьЗначения(Область);
		Если Структура <> Неопределено Тогда
			Если Структура.Свойство(""Номенклатура"") И Структура.Свойство(""Склад"") Тогда			
				ЗначениеСклад = Структура.Склад;
				ЗначениеНоменклатура = Структура.Номенклатура;
				ЗначениеПриход = Структура.КоличествоПриход;
				ЗначениеОборот = Структура.КоличествоОборот;
				ЗначениеРасход = Структура.КоличествоРасход;
			
				// алгоритм расшифровки
				// …
			
			КонецЕсли;	
		КонецЕсли;	
	КонецЕсли;

КонецПроцедуры
"}
},
{0,
{"Листинг 13.218. Обработчик события ПриИзмененииСодержимогоОбласти",0,0,"13.218","Процедура ПолеТабличногоДокументаПриИзмененииСодержимогоОбласти(Элемент, Область)
	
	ПолеТабДок = ЭлементыФормы.ПолеТабличногоДокумента;
	
	Для СчетчикСтрок = 6 по 8 Цикл
		Итог = 0;
		
		Для СчетчикКолонок = 4 по 10  Цикл
			Область = ПолеТабДок.Область(СчетчикСтрок, СчетчикКолонок);
			Итог = Итог + Область.Значение; 
		КонецЦикла;
		
		ПолеТабДок.Область(СчетчикСтрок, 11).Значение = Итог;
	КонецЦикла;
	
КонецПроцедуры
"}
},
{0,
{"Листинг 13.219. Изменение свойств элемента управления и назначение обработчика события ",0,0,"13.219","Область = ЭлементыФормы.ПолеТабличногоДокумента.Область(2, 2);
Область.СодержитЗначение = Истина;
Область.ТипЗначения = Новый ОписаниеТипов(""Дата"");
Область.ЭлементУправления.КнопкаВыбора = Истина;
Область.ЭлементУправления.УстановитьДействие(""ПриИзменении"", Новый Действие(""ПолеВводаТабличногоДокументаПриИзменении""));
"}
},
{0,
{"Листинг 13.220. Размещение элемента управления в поле табличного документа",0,0,"13.220","НовоеПолеВвода = ЭлементыФормы.Добавить(Тип(""ПолеВвода""), ""ПолеВводаТабличногоДокумента"", , ЭлементыФормы.ПолеТабличногоДокумента);
НовоеПолеВвода.Лево = 10;
НовоеПолеВвода.Верх = 10;
НовоеПолеВвода.Высота = 5;
НовоеПолеВвода.Ширина = 30;
НовоеПолеВвода.Данные = ""ПолеВводаТабличногоДокумента"";
НовоеПолеВвода.УстановитьДействие(""ПриИзменении"", Новый Действие(""ПолеВводаТабличногоДокументаПриИзменении""));
"}
},
{0,
{"Листинг 13.221. Размещение элемента управления в поле табличного документа",0,0,"13.221","НовоеПолеВвода = ЭлементыФормы.Добавить(Тип(""ПолеВвода""), ""ПолеВводаТабличногоДокумента"", , ЭлементыФормы.ПолеТабличногоДокумента);
НовоеПолеВвода.Расположить(ЭлементыФормы.ПолеТабличногоДокумента.Область(3, 2, 4, 3));
НовоеПолеВвода.Данные = ""ПолеВводаТабличногоДокумента"";
НовоеПолеВвода.УстановитьДействие(""ПриИзменении"", Новый Действие(""ПолеВводаТабличногоДокументаПриИзменении""));
"}
},
{0,
{"Листинг 13.222. Встраивание элемента управления в ячейку поля табличного документа",0,0,"13.222","НовоеПолеВвода = ЭлементыФормы.Добавить(Тип(""ПолеВвода""), ""ПолеВводаТабличногоДокумента"", , ЭлементыФормы.ПолеТабличногоДокумента);
	  НовоеПолеВвода.Расположить(ЭлементыФормы.ПолеТабличногоДокумента.Область(3, 2, 4, 3));
	  НовоеПолеВвода.ВстроенВЯчейку = Истина;
	  НовоеПолеВвода.Видимость = Истина;
	  НовоеПолеВвода.Данные = ""ПолеВводаТабличногоДокумента"";
	  НовоеПолеВвода.УстановитьДействие(""ПриИзменении"", Новый Действие(""ПолеВводаТабличногоДокументаПриИзменении""));
"}
},
{0,
{"Листинг 13.223. Обработчик события НачалоПеретаскивания",0,0,"13.223","Процедура ПолеТабличногоДокументаНачалоПеретаскивания(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка)
	
	Если ПараметрыПеретаскивания.Значение.ТекущаяОбласть.СодержитЗначение = Ложь Тогда
		СтандартнаяОбработка = Ложь;
	КонецЕсли;
	
КонецПроцедуры
"}
},
{0,
{"Листинг 13.224. Обработчик события ПроверкаПеретаскивания",0,0,"13.224","Процедура НоменклатураПроверкаПеретаскивания(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Строка, Колонка)

	СтандартнаяОбработка = Ложь;
	Если Строка <> Неопределено И ДокументОбъект.Номенклатура.Количество() <> 0 Тогда
		ПараметрыПеретаскивания.Действие = ДействиеПеретаскивания.Отмена;
	иначе
		ПараметрыПеретаскивания.Действие = ДействиеПеретаскивания.Копирование;
	КонецЕсли;
	
КонецПроцедуры
"}
},
{0,
{"Листинг 13.225. Обработчик события Перетаксивание",0,0,"13.225","Процедура НоменклатураПеретаскивание(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Строка, Колонка)
	
	ПараметрыПеретаскивания.Действие = ДействиеПеретаскивания.Копирование;
	ТабДок = ПараметрыПеретаскивания.Значение;
	Значение = ТабДок.ТекущаяОбласть.Значение;

	НоваяСтрока = ДокументОбъект.Номенклатура.Добавить();
	НоваяСтрока.Номенклатура = Значение;
	НоваяСтрока.Количество = 1;
	
КонецПроцедуры
"}
}
},
{122,
{"Глава 14. Интеграция с другими информационными системами",1,0,"",""},
{0,
{"Листинг 14.1. Пример файла обмена",0,0,"14.1","ООО ""Быстрее Выше Сильнее""              20.01.2006
""7"",""Атлант МХМ 1704-00"",""14000"",""шт""
"}
},
{0,
{"Листинг 14.2. Функция ЭлементВСтроку",0,0,"14.2","Функция ЭлементВСтроку(Элемент)

	Результат = СтрЗаменить(Элемент.Наименование, "","", ""\,"");
	
	// Заменить символы "" и , на \"" и \,
	Результат = СтрЗаменить(Результат, Символ(34), ""\"" + Символ(34));
	
	Результат = Символ(34) + Строка(Элемент.Код) + Символ(34) + "","" + Символ(34) + Результат + Символ(34);
	
	// Убирать пробелы из строкового представления числа
	Цена = СтрЗаменить(Строка(Элемент.ЗакупочнаяЦена), "" "", """");

	Результат = Результат + "","" + Символ(34) + Цена + Символ(34) + "","" + Символ(34) + Строка(Элемент.ЕдиницаИзмерения) + Символ(34);

	Возврат Результат;	

КонецФункции
"}
},
{0,
{"Листинг 14.3. Функция СформироватьЗаголовок",0,0,"14.3","Функция СформироватьЗаголовок(НаименованиеКомпании)
	
	Результат = СокрЛП(НаименованиеКомпании);
	КоличествоСимволов = СтрДлина(Результат);
	Для Счетчик = КоличествоСимволов По 38 Цикл
		Результат = Результат + "" "";
	КонецЦикла;	
	СтрокаДаты = Формат(РабочаяДата, ""ДЛФ=D"");
	Результат = Результат + СтрокаДаты;

	Возврат Результат;	

КонецФункции	
"}
},
{0,
{"Листинг 14.4. Процедура Записать",0,0,"14.4","Процедура Записать(Кнопка)

	// Необходимо установить реальный путь
	Путь = ""c:\"";
	ТД = Новый ТекстовыйДокумент;
	
	// Кодировка UTF8 является кодировкой по умолчанию
	ТД.УстановитьТипФайла(КодировкаТекста.UTF8);
	
	ТД.ДобавитьСтроку(СформироватьЗаголовок(""Наименование компании""));
	
	Выборка = Справочники.Номенклатура.Выбрать();
	Пока Выборка.Следующий() Цикл
		
		// Выгрузить только элементы справочника
		Если Не Выборка.ЭтоГруппа Тогда
			ТД.ДобавитьСтроку(ЭлементВСтроку(Выборка));
		КонецЕсли;	
	КонецЦикла;	
	
	ТД.Записать(Путь + ""nomen.txt"");

КонецПроцедуры
"}
},
{0,
{"Листинг 14.5. Функция РазобратьСтроку",0,0,"14.5","Функция РазобратьСтроку(СтрокаДляРазбора)

	Результат = Новый Структура(""Код, Наименование, Цена, ЕдиницаИзмерения"");
	
	// Прочитать код
	Позиция = Найти(СтрокаДляРазбора, "","");
	Код = Сред(СтрокаДляРазбора, 2, Позиция - 3);
	Результат.Код = Код;
		
	// Отрезать прочитанный фрагмент
	СтрокаДалее = Сред(СтрокаДляРазбора, Позиция + 2);
	
	// Прочитать наименование
	Позиция = Найти(СтрокаДалее, "","");
	Наименование = Сред(СтрокаДалее, 1, Позиция - 2);
	Результат.Наименование = Наименование;
	
	// И т.д.
	// …
	Возврат Результат;

КонецФункции	
"}
},
{0,
{"Листинг 14.6. Процедура Прочитать",0,0,"14.6","Процедура Прочитать(Кнопка)

	// Необходимо установить реальный путь
	Путь= ""c:\"";
	
	ТД = Новый ТекстовыйДокумент;
	ТД.Прочитать(Путь + ""nomen.txt"");
	
	Заголовок = ТД.ПолучитьСтроку(1);
	НазваниеОтправителя = СокрЛП(Сред(Заголовок, 1, 39));
	ДатаТекстом = СокрЛП(Сред(Заголовок, 40));
	
	Для ТекущаяСтрока = 2 По ТД.КоличествоСтрок() Цикл
		ПрочитаннаяСтрока = ТД.ПолучитьСтроку(ТекущаяСтрока);
		Значение = РазобратьСтроку(ПрочитаннаяСтрока);
	КонецЦикла;

КонецПроцедуры 
"}
},
{0,
{"Листинг 14.7. Процедура Просмотр",0,0,"14.7","Процедура Просмотр(Кнопка)

	// Необходимо установить реальный путь
	Путь = ""c:\"";
	ЭлементыФормы.ПолеТД.Очистить();
	ЭлементыФормы.ПолеТД.Прочитать(Путь + ""nomen.txt"");
	ЭлементыФормы.ПолеТД.ВставитьСтроку(1, ""Показывается в оригинальном виде"");

КонецПроцедуры
"}
},
{0,
{"Листинг 14.8. Процедура записи результата в файл",0,0,"14.8","Процедура ЗаписьИзПоля(Кнопка)
	
	// Необходимо установить реальный путь
	Путь = ""c:\"";
	ЭлементыФормы.ПолеТД.Записать(Путь + ""result.txt"");
	ЭлементыФормы.ПолеТД.Очистить();

КонецПроцедуры
"}
},
{0,
{"Листинг 14.9. Пример записи текста",0,0,"14.9","Процедура ПоследовательнаяЗапись(Кнопка)

	// Необходимо установить реальный путь
	Путь = ""c:\"";
	ЗаписьТекста = Новый ЗаписьТекста(Путь + ""nomen.txt"", КодировкаТекста.UTF8);
	
	ЗаписьТекста.ЗаписатьСтроку(СформироватьЗаголовок(""Наименование компании""));	
		
	Выборка = Справочники.Номенклатура.Выбрать();
	Пока Выборка.Следующий() Цикл
		ЗаписьТекста.ЗаписатьСтроку(ЭлементВСтроку(Выборка));	
	КонецЦикла;	
	ЗаписьТекста.Закрыть();

КонецПроцедуры
"}
},
{0,
{"Листинг 14.10. Пример чтения текста",0,0,"14.10","Процедура ПоследовательноеЧтение(Кнопка)

	// Необходимо установить реальный путь
	Путь = ""c:\"";
	
	Текст = Новый ЧтениеТекста(Путь + ""nomen.txt"", КодировкаТекста.UTF8);
	
	// Считаь первую строку
	ПрочитаннаяСтрока = Текст.ПрочитатьСтроку();
	НазваниеОтправителя = СокрЛП(Сред(ПрочитаннаяСтрока, 1, 39));
	ДатаТекстом = СокрЛП(Сред(ПрочитаннаяСтрока, 40));
	
	// Цикл выполняется пока не будет достигнут конец файла
	Пока ПрочитаннаяСтрока <> Неопределено Цикл
		ПрочитаннаяСтрока = Текст.ПрочитатьСтроку();
		Значение = РазобратьСтроку(ПрочитаннаяСтрока);
	КонецЦикла;	
	
КонецПроцедуры
"}
},
{0,
{"Листинг 14.11. Пример записи данных в файл DBF",0,0,"14.11","Путь = ""c:\"";
БД = Новый XBase;
БД.Поля.Добавить(""CODE"", ""S"", 5);
БД.Поля.Добавить(""NAME"", ""S"", 40);
БД.Поля.Добавить(""COST"", ""N"", 5, 0);
БД.Поля.Добавить(""ED"", ""S"", 10);
	
БД.СоздатьФайл(Путь + ""nomen.dbf"", Путь + ""index.cdx"");
БД.Индексы.Добавить(""IDXCODE"", ""CODE"");
ИБД = БД.СоздатьИндексныйФайл(Путь + ""index.cdx"");
БД.АвтоСохранение = Истина;
Выборка = Справочники.Номенклатура.Выбрать();
Пока Выборка.Следующий() Цикл
	БД.Добавить();
	БД.CODE = Выборка.Код;
	БД.NAME = Выборка.Наименование;
	БД.COST = Выборка.ЗакупочнаяЦена;
	БД.ED = Выборка.ЕдиницаИзмерения;
КонецЦикла;
БД.ЗакрытьФайл();
"}
},
{0,
{"Листинг 14.12. Пример чтения данных из файла DBF",0,0,"14.12","Путь = ""c:\"";
БД = Новый XBase;
БД.ОткрытьФайл(Путь + ""nomen.dbf"", Путь + ""index.cdx""); 
Пока БД.Следующая() Цикл
	Сообщить(БД.CODE + БД.Name);
КонецЦикла;	
БД.ЗакрытьФайл();
"}
},
{0,
{"Листинг 14.13. Порядок отображения данных",0,0,"14.13","6	ELECTROLUX ER 9007 B                    
3	Indesit WS 105 TX                       
7	Атлант МХМ 1704-00                      
2	СтиральнArdo TL 1000 EX-1               
1	Стиральные машины                       
4	Холодильники                            
"}
},
{0,
{"Листинг 14.14. Пример чтения данных из файла DBF",0,0,"14.14","Путь = ""c:\"";
БД = Новый XBase;
БД.ОткрытьФайл(Путь + ""nomen.dbf"", Путь + ""index.cdx""); 
БД.ТекущийИндекс = БД.Индексы.IDXCODE;
Пока БД.Следующая() Цикл
	Сообщить(БД.CODE + БД.Name);
КонецЦикла;	
БД.ЗакрытьФайл();
"}
},
{0,
{"Листинг 14.15. Полученные записи",0,0,"14.15","6	ELECTROLUX ER 9007 B                    
7	Атлант МХМ 1704-00                      
"}
},
{0,
{"Листинг 14.16. Пример использования метода Первая()",0,0,"14.16","Путь = ""c:\"";
БД = Новый XBase;
БД.ОткрытьФайл(Путь + ""nomen.dbf"", Путь + ""index.cdx""); 
БД.ТекущийИндекс = БД.Индексы.IDXCODE;
Если БД.Первая() Тогда
	Сообщить(БД.CODE + БД.Name);
КонецЕсли;	
Пока БД.Следующая() Цикл
	Сообщить(БД.CODE + БД.Name);
КонецЦикла;	
БД.ЗакрытьФайл();
"}
},
{0,
{"Листинг 14.17. Пример чтения данных из файла DBF",0,0,"14.17","Путь = ""c:\"";
БД = Новый XBase;
БД.ОткрытьФайл(Путь + ""nomen.dbf"", Путь + ""index.cdx""); 
Если БД.Найти(""5"", "">="") Тогда
	Пока БД.Следующая() Цикл
		Сообщить(БД.Name);
	КонецЦикла;	
КонецЕсли;	
БД.ЗакрытьФайл();
"}
},
{0,
{"Листинг 14.18. Полученные записи",0,0,"14.18","6	ELECTROLUX ER 9007 B                    
3	Indesit WS 105 TX                       
7	Атлант МХМ 1704-00                      
2	СтиральнArdo TL 1000 EX-1               
1	Стиральные машины                       
4	Холодильники                            
"}
},
{0,
{"Листинг 14.19. Пример чтения данных из файла DBF",0,0,"14.19","Путь = ""c:\"";
БД = Новый XBase;
БД.ОткрытьФайл(Путь + ""nomen.dbf"", Путь + ""index.cdx""); 
БД.ТекущийИндекс = БД.Индексы.IDXCODE;
Если БД.Найти(""5"", "">="") Тогда
	Пока БД.Следующая() Цикл
		Сообщить(БД.Name);
	КонецЦикла;	
КонецЕсли;	
БД.ЗакрытьФайл();
"}
},
{0,
{"Листинг 14.20. Полученные записи",0,0,"14.20","6	ELECTROLUX ER 9007 B                    
7	Атлант МХМ 1704-00                      
"}
},
{0,
{"Листинг 14.21. Пример элемента XML",0,0,"14.21","<Товар ИмяСправочника = «Номенклатура» Код = «14»>Ardo TL 1000 EX-1</Товар>"}
},
{0,
{"Листинг 14.22. Пример элемента XML",0,0,"14.22","<Товар Код = «14» Наименование = «Ardo TL 1000 EX-1»/>"}
},
{0,
{"Листинг 14.23. Пример XML-документа",0,0,"14.23","<?xml version=""1.0"" ?> 
<Корневой>
<DocumentObject.Приходная>
	<Ref>4c0a4c73-905d-11d8-92a4-00030d0ca645</Ref> 
	<DeletionMark>false</DeletionMark> 
	<Date>2004-04-17T14:52:43</Date> 
	<Number>1</Number> 
	<Posted>true</Posted> 
	<Контрагент>4c0a4c72-905d-11d8-92a4-00030d0ca645</Контрагент> 
	<Товары>
		<Row>
			<Номенклатура>efbfeaf4-831d-11d8-957e-00c026abdd5e</Номенклатура> 
			<Количество>10</Количество> 
			<Цена>900</Цена> 
			<Сумма>1000</Сумма> 
		</Row>
		<Row>
			<Номенклатура>efbfeaf6-831d-11d8-957e-00c026abdd5e</Номенклатура> 
			<Количество>10</Количество> 
			<Цена>1000</Цена> 
			<Сумма>10000</Сумма> 
		</Row>
	</Товары>
</DocumentObject.Приходная>
</Корневой>
"}
},
{0,
{"Листинг 14.24. Пример записи XML-документа",0,0,"14.24","ЗаписьXML = Новый ЗаписьXML;
ЗаписьXML.ОткрытьФайл(""c:\document.xml"");

// Записать директиву
ЗаписьXML.ЗаписатьОбъявлениеXML();

// Записать начало корневого элемента
ЗаписьXML.ЗаписатьНачалоЭлемента(""Корневой"");

// Записать атрибут корневого элемента
ЗаписьXML.ЗаписатьАтрибут(""ИмяСправочника"", ""Номенклатура"");

ЗаписьXML.ЗаписатьКомментарий(""Выгрузка элементов справочника"");
Выборка = Справочники.Номенклатура.Выбрать();
Пока Выборка.Следующий() Цикл
	Если Не Выборка.ЭтоГруппа Тогда
		ЗаписьXML.ЗаписатьНачалоЭлемента(""ЭлементСправочника"");
		
			ЗаписьXML.ЗаписатьНачалоЭлемента(""Код"");
			ЗаписьXML.ЗаписатьТекст(Строка(Выборка.Код));
			ЗаписьXML.ЗаписатьКонецЭлемента();
			
			ЗаписьXML.ЗаписатьНачалоЭлемента(""Наименование"");
			ЗаписьXML.ЗаписатьТекст(Выборка.Наименование);
			ЗаписьXML.ЗаписатьКонецЭлемента();
			
			ЗаписьXML.ЗаписатьНачалоЭлемента(""ЗакупочнаяЦена"");
			ЗаписьXML.ЗаписатьТекст(Строка(Выборка.ЗакупочнаяЦена));
			ЗаписьXML.ЗаписатьКонецЭлемента();
			
		ЗаписьXML.ЗаписатьКонецЭлемента();
	КонецЕсли;
КонецЦикла;	
ЗаписьXML.ЗаписатьКонецЭлемента();
ЗаписьXML.Закрыть();
"}
},
{0,
{"Листинг 14.25. Полученный XML-документ",0,0,"14.25","<?xml version=""1.0""?>
<Корневой ИмяСправочника=""Номенклатура"">
	<!--Выгрузка элементов справочника-->
	<ЭлементСправочника>
		<Код>5</Код>
		<Наименование>BOSCH KGS 3760 IE </Наименование>
		<ЗакупочнаяЦена>24 000</ЗакупочнаяЦена>
	</ЭлементСправочника>
	<ЭлементСправочника>
		<Код>6</Код>
		<Наименование>ELECTROLUX ER 9007 B</Наименование>
		<ЗакупочнаяЦена>38 000</ЗакупочнаяЦена>
	</ЭлементСправочника>
	<ЭлементСправочника>
		<Код>3</Код>
		<Наименование>Indesit WS 105 TX</Наименование>
		<ЗакупочнаяЦена>10 000</ЗакупочнаяЦена>
	</ЭлементСправочника>
	<ЭлементСправочника>
		<Код>7</Код>
		<Наименование>Атлант МХМ 1704-00</Наименование>
		<ЗакупочнаяЦена>14 000</ЗакупочнаяЦена>
	</ЭлементСправочника>
	<ЭлементСправочника>
		<Код>2</Код>
		<Наименование>Ardo TL 1000 EX-1</Наименование>
		<ЗакупочнаяЦена>8 000</ЗакупочнаяЦена>
	</ЭлементСправочника>
</Корневой>
"}
},
{0,
{"Листинг 14.26. Узлы элемента XML",0,0,"14.26","<ИМЯ  АТРИБУТ=Значение>
Содержимое (Текст или описание другого элемента)
</ИМЯ>
"}
},
{0,
{"Листинг 14.27. Пример записи элемента XML",0,0,"14.27","ЗаписьXML.ЗаписатьНачалоЭлемента(""ИМЯ"");
ЗаписьXML.ЗаписатьАтрибут(""АТРИБУТ"", ""Значение"");
ЗаписьXML.ЗаписатьТекст(""Содержимое (Текст или описание другого элемента)"");
ЗаписьXML.ЗаписатьКонецЭлемента();
"}
},
{0,
{"Листинг 14.28. Читаемый XML-документ",0,0,"14.28","<?xml version=""1.0""?>
<Корневой ИмяСправочника=""Номенклатура"">
	<!--Выгрузка элементов справочника-->
	<ЭлементСправочника>
		<Код>5</Код>
		<Наименование>BOSCH KGS 3760 IE </Наименование>
		<ЗакупочнаяЦена>24 000</ЗакупочнаяЦена>
	</ЭлементСправочника>
	<ЭлементСправочника>
		<Код>6</Код>
		<Наименование>ELECTROLUX ER 9007 B</Наименование>
		<ЗакупочнаяЦена>38 000</ЗакупочнаяЦена>
	</ЭлементСправочника>
	<ЭлементСправочника>
		<Код>3</Код>
		<Наименование>Indesit WS 105 TX</Наименование>
		<ЗакупочнаяЦена>10 000</ЗакупочнаяЦена>
	</ЭлементСправочника>
	<ЭлементСправочника>
		<Код>7</Код>
		<Наименование>Атлант МХМ 1704-00</Наименование>
		<ЗакупочнаяЦена>14 000</ЗакупочнаяЦена>
	</ЭлементСправочника>
	<ЭлементСправочника>
		<Код>2</Код>
		<Наименование>Ardo TL 1000 EX-1</Наименование>
		<ЗакупочнаяЦена>8 000</ЗакупочнаяЦена>
	</ЭлементСправочника>
</Корневой>
"}
},
{0,
{"Листинг 14.29. Чтение XML-документа",0,0,"14.29","Файл = Новый ЧтениеXML;
Файл.ОткрытьФайл(""c:\document.xml"");

// Прочитать фрагменты элемента 
Пока Файл.Прочитать() Цикл
	
	// После чтения проверить тип уза
	Если Файл.ТипУзла = ТипУзлаXML.НачалоЭлемента Тогда
  		Сообщить(Файл.Имя);

		// Прочитать атрибуты
		Пока Файл.ПрочитатьАтрибут() Цикл
			Сообщить(""атрибут:"" + Файл.Имя + ""="" + Файл.Значение);	  
		КонецЦикла;	  
	КонецЕсли;	

	Если Файл.ТипУзла = ТипУзлаXML.Текст Тогда
  		Сообщить(Файл.Значение);
	КонецЕсли;	

	Если Файл.ТипУзла = ТипУзлаXML.КонецЭлемента Тогда
  		Сообщить(""/"" + Файл.Имя);
	КонецЕсли;	
КонецЦикла;	
Файл.Закрыть();
"}
},
{0,
{"Листинг 14.30. Пример сериализации значения ссылки на справочник",0,0,"14.30","<CatalogRef.Номенклатура>178a492a-3fd4-11da-a1f2-0011d8388a5d</CatalogRef.Номенклатура>
"}
},
{0,
{"Листинг 14.31. Пример сериализации значения типа УдалениеОбъекта",0,0,"14.31","<v8:ObjectDeletion xmlns=""http://v8.1c.ru/data"">
	<v8:Ref xsi:type=""CatalogRef.Банки"">60c5cec3-7f6f-4ec3-9620-e757fe3614ca</v8:Ref>
</v8:ObjectDeletion>
"}
},
{0,
{"Листинг 14.32. Варианты представления значения типа Число - 3.14156",0,0,"14.32","<!-- Не задано явно имя корневого элемента -->
<decimal>3.14156</decimal>

<!-- Явно задано имя корневого элемента XML -->
<Amount>3.14156</Amount>

<!-- Явно указан тип данных XML -->
<Data xsi:type=""xsd:decimal"">3.14156</Data>
"}
},
{0,
{"Листинг 14.33. Варианты представления значений типа Строка",0,0,"14.33","<!-- Не задано явно имя корневого элемента -->
<string>Это такая строка</string>

<!-- Явно задано имя корневого элемента XML -->
<Name>Иванов</Name>

<!-- Явно указан тип данных XML -->
<Data xsi:type=""xsd:string"">Это такая строка</Data>
"}
},
{0,
{"Листинг 14.34. Варианты представления значений типа Дата ",0,0,"14.34","<!-- Не задано явно имя корневого элемента -->
<dateTime>2003-11-21T12:00:00</dateTime>

<!-- Явно задано имя корневого элемента XML -->
<Started>2001-10-30T19:00:00</Started>

<!-- Явно указан тип данных XML -->
<Data xsi:type=""xsd:dateTime"">1980-08-25T10:00:00</Data>
"}
},
{0,
{"Листинг 14.35. Варианты представления значений типа Булево",0,0,"14.35","<!-- Не задано явно имя корневого элемента -->
<boolean>false</boolean>

<!-- Явно задано имя корневого элемента XML -->
<Posted>true</Posted>

<!-- Явно указан тип данных XML -->
<Data xsi:type=""xsd:boolean"">true</Data>
"}
},
{0,
{"Листинг 14.36. Варианты представления значений типа ДвоичныеДанные",0,0,"14.36","<!-- Не задано явно имя корневого элемента -->
<base64Binary>YWJjZGVm</base64Binary>

<!-- Явно задано имя корневого элемента XML -->
<BinaryData>YWJjZGVm</BinaryData>

<!-- Явно указан тип данных XML -->
<Data xsi:type=""xsd:base64Binary"">YWJjZGVm</Data>
"}
},
{0,
{"Листинг 14.37. Варианты представления значения типа Null",0,0,"14.37","<!-- Не задано явно имя корневого элемента -->
<v8:Null/>

<!-- Явно задано имя корневого элемента XML -->
<Selected/> 

<!-- Явно указан тип данных XML -->
<Data xsi:type=""v8:Null""/>
"}
},
{0,
{"Листинг 14.38. Варианты представления значений типа УникальныйИдентификатор",0,0,"14.38","<!-- Не задано явно имя корневого элемента -->
<v8:UUID>3294be0f-c039-41a9-bd65-596da0dcfe68</v8:UUID>

<!-- Явно задано имя корневого элемента XML -->
<Id>da035e32-3f7a-4d87-9c6d-accf7db8cb4b</Id>

<!-- Явно указан тип данных XML -->
<Data xsi:type=""v8:UUID""> 08893b0b-5ec3-4a53-a9f5-173312316919</Data>
"}
},
{0,
{"Листинг 14.39. Варианты представления значений типа ХранилищеЗначения",0,0,"14.39","<!-- Не задано явно имя корневого элемента -->
<v8:ValueStorage>AQEOAAAAAAAAAO+7v3siUyIsIjHQoSJ9</v8:ValueStorage>

<!-- Явно задано имя корневого элемента XML -->
<Data>AQEOAAAAAAAAAO+7v3siUyIsIjHQoSJ9</Data>

<!-- Явно указан тип данных XML -->
<Data xsi:type=""v8:ValueStorage"">AQEOAAAAAAAAAO+7v3siUyIsIjHQoSJ9</Data>
"}
},
{0,
{"Листинг 14.40. Варианты представления значений типа ссылки на объект базы данных",0,0,"14.40","<!-- Не задано явно имя корневого элемента -->
<CatalogRef.Банки>911b5b8b-11f5-4993-9673-2c9a7a8995d5</CatalogRef.Банки>

<!-- Явно задано имя корневого элемента XML -->
<Ref>911b5b8b-11f5-4993-9673-2c9a7a8995d5</Ref>

<!-- Явно указан тип данных XML -->
<Data xsi:type=""CatalogRef.Банки"">911b5b8b-11f5-4993-9673-2c9a7a8995d5</Data>
"}
},
{0,
{"Листинг 14.41. Варианты представления значений типа ссылки на значение перечисления",0,0,"14.41","<!-- Не задано явно имя корневого элемента -->
<EnumRef.ВидыАдресов>Юридический</EnumRef.ВидыАдресов >

<!-- Явно задано имя корневого элемента XML -->
<Ref>Юридический</Ref>

<!-- Явно указан тип данных XML -->
<Data xsi:type=""EnumRef.ВидыАдресов"">Физический</Data>
"}
},
{0,
{"Листинг 14.42. Пример ",0,0,"14.42","Файл = Новый ЗаписьXML;
Файл.ОткрытьФайл(""с:\my_xml.xml"");
Файл.ЗаписатьОбъявлениеXML();
Файл.ЗаписатьНачалоЭлемента(""Корневой"");

	// Получить значение ""ТипДанныхXML"" для числа
	ТипXML = XMLТипЗнч(1000);

	// Создать элемент, имя которого совпадает с именем типа XML,
	// при этом записать и пространство имен типа XML
	Файл.ЗаписатьНачалоЭлемента(ТипXML.ИмяТипа, ТипXML.URIПространстваИмен);
	
	Файл.ЗаписатьТекст(XMLСтрока(1000));
	Файл.ЗаписатьКонецЭлемента();
	
	// Получить значение ""ТипДанныхXML"" для ссылки на номенклатуру
	ТипXML = XMLТипЗнч(СсылкаНаНоменклатуру);
	Файл.ЗаписатьНачалоЭлемента(ТипXML.ИмяТипа, ТипXML.URIПространстваИмен);

	Файл.ЗаписатьТекст(XMLСтрока(СсылкаНаНоменклатуру));
	Файл.ЗаписатьКонецЭлемента();
	
	Файл.ЗаписатьНачалоЭлемента(ТипXML.ИмяТипа, ТипXML.URIПространстваИмен);
	Файл.ЗаписатьТекст(Строка(СсылкаНаНоменклатуру));
	Файл.ЗаписатьКонецЭлемента();

Файл.ЗаписатьКонецЭлемента();
Файл.Закрыть();
"}
},
{0,
{"Листинг 14.43. Пример сформированного XML-документа",0,0,"14.43","<?xml version=""1.0""?>
	<Корневой>
		<decimal xmlns=""http://www.w3.org/2001/XMLSchema"">1000</decimal>
		<CatalogRef.Номенклатура>178a492a-3fd4-11da-a1f2-0011d8388a5d</CatalogRef.Номенклатура>
		<CatalogRef.Номенклатура>Ardo TL 1000 EX-1</CatalogRef.Номенклатура>
	</Корневой>
"}
},
{0,
{"Листинг 14.44. Пример чтения XML-документа",0,0,"14.44","Файл = Новый ЧтениеXML;
Файл.ОткрытьФайл(""с:\my_xml.xml"");

// Спозиционироваться на начале элемента ""Корневой""
Файл.Прочитать();

// Спозиционироваться на начале элемента ""decimal""
Файл.Прочитать();

// Из имени элемента (совпадающего с именем типа) 
// и URI пространства имен получить тип 1С:Предприятия
ТипЗначения = ИзXMLТипа(Файл.Имя, Файл.URIПространстваИмен);

// Спозиционироваться на тексте
Файл.Прочитать();

// Прочитать значение не указав тип нельзя
ПолученноеЗначение = XMLЗначение(ТипЗначения, Файл.Значение);

// Конец элемента ""decimal"" 
Файл.Прочитать();

// Начало элемента ""CatalogRef.Номенклатура""
Файл.Прочитать();

// Из имени элемента и URI пространства имен получить тип 1С:Предприятия
ТипЗначения = ИзXMLТипа(Файл.Имя,Файл.URIПространстваИмен);

Файл.Прочитать();

// Получить ссылку на номенклатурную позицию
ПолученноеЗначение = XMLЗначение(ТипЗначения, Файл.Значение);

// Конец элемента ""CatalogRef.Номенклатура"" 
Файл.Прочитать();

// Начало элемента ""CatalogRef.Номенклатура""
Файл.Прочитать();

// Из имени элемента и URI пространства имен получить тип 1С:Предприятия
ТипЗначения = ИзXMLТипа(Файл.Имя, Файл.URIПространстваИмен);

Файл.Прочитать();

// Попытка выполнить следующий оператор приведет к ошибке
// т.к. в документе содержится строковое значение, 
// попытка преобразовать его к ссылке и приведет к ошибке
//ПолученноеЗначение = XMLЗначение(ТипЗначения, Файл.Значение);

// Конец элемента ""CatalogRef.Номенклатура"" 
Файл.Прочитать();

Файл.Закрыть();
"}
},
{0,
{"Листинг 14.45. Варианты представления значений типа Тип",0,0,"14.45","<!-- Не задано явно имя корневого элемента -->
<v8:Type>v8:ValueStorage</v8:Type>

<!-- Явно задано имя корневого элемента XML -->
<Tp>xsd:string</Tp>

<!-- Явно указан тип данных XML -->
<Data xsi:type=""v8:Type"">v8:ValueStorage<Data>
"}
},
{0,
{"Листинг 14.46. Пример представления значений типа ОписаниеТипов",0,0,"14.46","<v8:TypeDescription>
	<v8:Types>
		<v8:Type>v8:UUID</v8:Type>
		<v8:Type>CatalogRef.Банки</v8:Type>
		<v8:Type>xsd:boolean</v8:Type>
		<v8:Type>xsd:decimal</v8:Type>
	</v8:Types>
	<v8:NumberQualifiers>
		<v8:Digits>10</v8:Digits>
		<v8:FractionDigits>2</v8:FractionDigits>
		<v8:AllowedSign>Any</v8:AllowedSign>
	</v8:NumberQualifiers>
	<v8:StringQualifiers>
		<v8:Length>30</v8:Length>
		<v8:AllowedLength>Variable</v8:AllowedLength>
	</v8:StringQualifiers>
	<v8:DateQualifiers>
		<v8:DateFractions>Date</v8:DateFractions>
	</v8:DateQualifiers>
</v8:TypeDescription>
"}
},
{0,
{"Листинг 14.47. Пример представления значения типа КонстантаМенеджерЗначения.НазваниеОрганизации",0,0,"14.47","<ConstantValueManager.НазваниеОрганизации>
	<Value>ООО ""Мебиус""</Value>
</ConstantValueManager.НазваниеОрганизации>
"}
},
{0,
{"Листинг 14.48. Пример представления значения типа Документ.ЗаказПокупателя",0,0,"14.48","<DocumentObject.ЗаказПокупателя>
	<Ref>8d106783-9726-11d7-9334-0050ba8480bd</Ref>
	<DeletionMark>false</DeletionMark>
	<Date>2003-04-15T12:00:00</Date>
	<Number>00000006</Number>
	<Posted>true</Posted>
	<ПодразделениеКомпании>317f130d-5a08-11d7-9324-0050ba8480bd</ПодразделениеКомпании>
	<СтруктурнаяЕдиница xsi:type=""CatalogRef.КассыКомпании"">317f12f4-5a08-11d7-9324-0050ba8480bd</СтруктурнаяЕдиница>
	<Контрагент>12952ac7-5a08-11d7-9324-0050ba8480bd</Контрагент>
	<ЮрФизЛицоКонтрагента xsi:type=""CatalogRef.ЮридическиеЛица"">0aadfe81-5a08-11d7-9324-0050ba8480bd</ЮрФизЛицоКонтрагента>
	<ВалютаДокумента>029156b4-5a08-11d7-9324-0050ba8480bd</ВалютаДокумента>
	<КурсДокумента>1</КурсДокумента>
	<УчитыватьНДС>true</УчитыватьНДС>
	<УчитыватьНП>false</УчитыватьНП>
	<СуммаВключаетНДС>false</СуммаВключаетНДС>
	<СуммаВключаетНП>false</СуммаВключаетНП>
	<Комментарий/>
	<СуммаДокумента>44077.14</СуммаДокумента>
	<ВидОперации>СчетНаОплату</ВидОперации>
	<ДоговорВзаиморасчетов>b0401f23-6e84-11d7-932c-0050ba8480bd</ДоговорВзаиморасчетов>
	<СкладКомпании>317f1317-5a08-11d7-9324-0050ba8480bd</СкладКомпании>
	<ТипЦен>317f1311-5a08-11d7-9324-0050ba8480bd</ТипЦен>
	<ДатаОплаты>2003-04-15T00:00:00</ДатаОплаты>
	<АвтоРезервирование>false</АвтоРезервирование>
	<АвтоРазмещение>false</АвтоРазмещение>
	<КурсВзаиморасчетов>33.4209</КурсВзаиморасчетов>
	<ТипСкидкиНаценки>00000000-0000-0000-0000-000000000000</ТипСкидкиНаценки>
	<Организация>317f1308-5a08-11d7-9324-0050ba8480bd</Организация>
	<ДатаОтгрузки>2003-04-15T00:00:00</ДатаОтгрузки>
	<Ответственный>4ff40e0b-5ac5-11d7-9325-0050ba8480bd</Ответственный>
	<КратностьДокумента>1</КратностьДокумента>
	<КратностьВзаиморасчетов>1</КратностьВзаиморасчетов>
	<Товары>
		<Row>
			<Номенклатура>297c6534-5a08-11d7-9324-0050ba8480bd</Номенклатура>
			<ЕдиницаИзмерения>297c6535-5a08-11d7-9324-0050ba8480bd</ЕдиницаИзмерения>
			<Цена>4537.56</Цена>
			<Сумма>13612.68</Сумма>
			<СтавкаНДС>НДС20</СтавкаНДС>
			<СуммаНДС>2722.54</СуммаНДС>
			<СтавкаНП>1ac73736-5a08-11d7-9324-0050ba8480bd</СтавкаНП>
			<СуммаНП>0</СуммаНП>
			<ХарактеристикаНоменклатуры>00000000-0000-0000-0000-000000000000</ХарактеристикаНоменклатуры>
			<Размещение xsi:nil=""true""/>
			<Коэффициент>1</Коэффициент>
			<Количество>3</Количество>
			<ПроцентСкидкиНаценки>0</ПроцентСкидкиНаценки>
		</Row>
		<Row>
			<Номенклатура>317f12d8-5a08-11d7-9324-0050ba8480bd</Номенклатура>
			<ЕдиницаИзмерения>317f12d9-5a08-11d7-9324-0050ba8480bd</ЕдиницаИзмерения>
			<Цена>4915.55</Цена>
			<Сумма>19662.2</Сумма>
			<СтавкаНДС>НДС20</СтавкаНДС>
			<СуммаНДС>3932.44</СуммаНДС>
			<СтавкаНП>1ac73736-5a08-11d7-9324-0050ba8480bd</СтавкаНП>
			<СуммаНП>0</СуммаНП>
			<ХарактеристикаНоменклатуры>00000000-0000-0000-0000-000000000000</ХарактеристикаНоменклатуры>
			<Размещение xsi:nil=""true""/>
			<Коэффициент>1</Коэффициент>
			 <Количество>4</Количество>
			<ПроцентСкидкиНаценки>0</ПроцентСкидкиНаценки>
		</Row>
	</Товары>
	<ВозвратнаяТара/>
</DocumentObject.ЗаказПокупателя>
"}
},
{0,
{"Листинг 14.49. Пример представления значения типа РгистрНакопленияНаборЗаписей.ОстаткиТоваровКомпании",0,0,"14.49","<AccumulationRegisterRecordSet.ОстаткиТоваровКомпании>
	<Filter>
		<Recorder xsi:type=""DocumentRef.РеализацияТоваров"">1725f36e-6f35-11d7-932d-0050ba8480bd</Recorder>
	</Filter>
	<Records>
		<Record>
			<Recorder xsi:type=""DocumentRef.РеализацияТоваров"">1725f36e-6f35-11d7-932d-0050ba8480bd</Recorder>
			<Period>2003-04-13T17:45:39</Period>
			<MovementType>Expense</MovementType>
			<Active>true</Active>
			<Номенклатура>297c6556-5a08-11d7-9324-0050ba8480bd</Номенклатура>
			<СкладКомпании>317f1317-5a08-11d7-9324-0050ba8480bd</СкладКомпании>
			<Заказ xsi:nil=""true""/>
			<ЦенаВРознице>0</ЦенаВРознице>
			<ХарактеристикаНоменклатуры>00000000-0000-0000-0000-000000000000</ХарактеристикаНоменклатуры>
			<Количество>2</Количество>
			<ПодразделениеКомпании>317f130d-5a08-11d7-9324-0050ba8480bd</ПодразделениеКомпании>
		</Record>
		<Record>
			<Recorder xsi:type=""DocumentRef.РеализацияТоваров"">1725f36e-6f35-11d7-932d-0050ba8480bd</Recorder>
			<Period>2003-04-13T17:45:39</Period>
			<MovementType>Expense</MovementType>
			<Active>true</Active>
			<Номенклатура>297c6558-5a08-11d7-9324-0050ba8480bd</Номенклатура>
			<СкладКомпании>317f1317-5a08-11d7-9324-0050ba8480bd</СкладКомпании>
			<Заказ xsi:nil=""true""/>
			<ЦенаВРознице>0</ЦенаВРознице>
			<ХарактеристикаНоменклатуры>ac47d77e-5ec7-11d7-9329-0050ba8480bd</ХарактеристикаНоменклатуры>
			<Количество>2</Количество>
			<ПодразделениеКомпании>317f130d-5a08-11d7-9324-0050ba8480bd</ПодразделениеКомпании>
		</Record>
	</Records>
</AccumulationRegisterRecordSet.ОстаткиТоваровКомпании>
"}
},
{0,
{"Листинг 14.50. Пример представления значения типа УдалениеОбъекта",0,0,"14.50","<v8:ObjectDeletion xmlns=""http://v8.1c.ru/data"">
	<v8:Ref xsi:type=""CatalogRef.Банки"">60c5cec3-7f6f-4ec3-9620-e757fe3614ca</v8:Ref>
</v8:ObjectDeletion>
"}
},
{0,
{"Листинг 14.51. Пример использования объекта ЗаписьXML",0,0,"14.51","Знач = ""Строка такая"";
ЗаписатьXML(Зп, Знач);
ЗаписатьXML(Зп, Знач, ""Root"", НазначениеТипаXML.Явное);
ЗаписатьXML(Зп, Знач, ""Root"", ""urn:some-namespace"");
"}
},
{0,
{"Листинг 14.52. Фрагмент XML-документа",0,0,"14.52","<string>Строка такая</string>
<Root xsi:type=""xsd:string"">Строка такая</Root>
<d1p1:Root xmlns:d1p1=""urn:some-namespace"">Строка такая</d1p1:Root>
"}
},
{0,
{"Листинг 14.53. Процедура СложныеЗаписать",0,0,"14.53","Процедура СложныеЗаписать(Элемент)

	Файл = Новый ЗаписьXML;
	Файл.ОткрытьФайл(""c:\doc_xml.xml"");
	Файл.ЗаписатьОбъявлениеXML();
	Объект = Документ.ПолучитьОбъект();
	ЗаписатьXML(Файл, Объект, НазначениеТипаXML.Явное);
	Файл.Закрыть();

КонецПроцедуры
"}
},
{0,
{"Листинг 14.54. Пример сформированного XML-документа",0,0,"14.54","<?xml version=""1.0""?>
	<DocumentObject.Расходная xmlns:xsi=""http://www.w3.org/2001/XMLSchema-instance"" xsi:type=""DocumentObject.Расходная"">
		<Ref>d5af75ed-8c6d-11d8-958a-00c026abdd5e</Ref>
		<DeletionMark>false</DeletionMark>
		<Date>2004-12-08T14:40:38</Date>
		<Number>1</Number>
		<Posted>true</Posted>
		<Контрагент>ebf9f318-a8d1-11d8-a063-00c026abdd5e</Контрагент>
		<Товары>
			<Row>
				<Номенклатура>efbfeaf4-831d-11d8-957e-00c026abdd5e</Номенклатура>
				<Количество>1</Количество>
				<Цена>100</Цена>
				<Сумма>100</Сумма>
			</Row>
			<Row>
				<Номенклатура>efbfeaf5-831d-11d8-957e-00c026abdd5e</Номенклатура>
				<Количество>1</Количество>
				<Цена>200</Цена>
				<Сумма>200</Сумма>
			</Row>
		</Товары>
	</DocumentObject.Расходная>
"}
},
{0,
{"Листинг 14.55. Процедура чтения данных",0,0,"14.55","Процедура СложныеПрочитать(Кнопка)

	Файл = Новый ЧтениеXML;
	Файл.ОткрытьФайл(""c:\doc_xml.xml"");
	
	// Позиционируемся на начале элемента, содержащего документ
	Если Файл.Прочитать() Тогда
	
		// Проверка на возможность чтения значения
		Если ВозможностьЧтенияXML(Файл) Тогда

			// Получается значение ДокументОбъект.Имя 
			// если значения с таким внутренним идентификатором нет, 
			// то создается новый
			Объект = ПрочитатьXML(Файл);
			Объект.Записать();
		КонецЕсли;	
	КонецЕсли;	
	Файл.Закрыть();   

КонецПроцедуры
"}
},
{0,
{"Листинг 14.56. Процедура ВыгрузкаДанных",0,0,"14.56","Процедура ВыгрузкаДанных(Кнопка)

	ЗаписьXML = Новый ЗаписьXML;
	ЗаписьXML.ОткрытьФайл(""c:\out.xml"");
	ЗаписьXML.ЗаписатьОбъявлениеXML();
	ЗаписьXML.ЗаписатьНачалоЭлемента(""Корневой"");
	
	// Для сокращения размера файла сообщения записываем 
	// соответствие пространств имен
	ЗаписьXML.ЗаписатьСоответствиеПространстваИмен(""xsd"", ""http://www.w3.org/2001/XMLSchema"");
	ЗаписьXML.ЗаписатьСоответствиеПространстваИмен(""xsi"", ""http://www.w3.org/2001/XMLSchema-instance"");
	ЗаписьXML.ЗаписатьСоответствиеПространстваИмен(""v8"", ""http://v8.1c.ru/data"");
	
	// Получаем выборку  данных из табличной части
	Для Каждого Элемент Из ВыгружаемыеДанные Цикл
		Данные = Элемент.СсылкаНаОбъект.ПолучитьОбъект();
		
		// Записываем данные 
		ЗаписатьДанные(ЗаписьXML, Данные);
	КонецЦикла;
	
	ЗаписьXML.ЗаписатьКонецЭлемента();
	ЗаписьXML.Закрыть();

КонецПроцедуры
"}
},
{0,
{"Листинг 14.57. Процедура ЗаписатьДанные",0,0,"14.57","Процедура ЗаписатьДанные(ЗаписьXML, Данные)
	
	Если ТипЗнч(Данные) = Тип(""СправочникОбъект.Номенклатура"") Тогда
		
		// Записываем элемент справочника вручную
		НоменклатураЗаписатьXML(ЗаписьXML, Данные);
	Иначе
		
		// Записываем данные с помощью стандартного метода
		ЗаписатьXML(ЗаписьXML, Данные);
	КонецЕсли
	
КонецПроцедуры 
"}
},
{0,
{"Листинг 14.58. Процедура НоменклатураЗаписатьXML",0,0,"14.58","Процедура НоменклатураЗаписатьXML(ЗаписьXML, Номенклатура)
	
	// Записываем начало элемента XML
	ЗаписьXML.ЗаписатьНачалоЭлемента(""CatalogObject.Номенклатура.Вручную"");
	
	// Ссылка
	ЗаписатьXML(ЗаписьXML, Номенклатура.Ссылка, ""Ref"", НазначениеТипаXML.Явное);

	// ЭтоГруппа
	ЗаписатьXML(ЗаписьXML, Номенклатура.ЭтоГруппа, ""IsFolder"", НазначениеТипаXML.Явное);

	// Родитель
	ЗаписатьXML(ЗаписьXML, Номенклатура.Родитель, ""Parent"", НазначениеТипаXML.Явное);

	// Код
	ЗаписатьXML(ЗаписьXML, Номенклатура.Код, ""Code"", НазначениеТипаXML.Явное);

	// Наименование
	ЗаписатьXML(ЗаписьXML, Номенклатура.Наименование, ""Description"", НазначениеТипаXML.Явное);

	// Реквизиты, выгружаемые только для элемента справочника, 
	// а не для группы
	Если Не Номенклатура.ЭтоГруппа Тогда 
		
		// ЗакупочнаяЦена
		ЗаписатьXML(ЗаписьXML, Номенклатура.ЗакупочнаяЦена, ""ЗакупочнаяЦена"", НазначениеТипаXML.Явное);

		// Картинка
		ЗаписатьXML(ЗаписьXML, Номенклатура.Картинка, ""Картинка"", НазначениеТипаXML.Явное);

		// ПолноеНаименование
		ЗаписатьXML(ЗаписьXML, Номенклатура.ПолноеНаименование, ""ПолноеНаименование"", НазначениеТипаXML.Явное);
	КонецЕсли;
	
	// Записываем конец элемента
	ЗаписьXML.ЗаписатьКонецЭлемента();

КонецПроцедуры
"}
},
{0,
{"Листинг 14.59. Пример сформированного XML-документа",0,0,"14.59","<?xml version=""1.0""?>
	<Корневой xmlns:xsd=""http://www.w3.org/2001/XMLSchema"" xmlns:xsi=""http://www.w3.org/2001/XMLSchema-instance"" xmlns:v8=""http://v8.1c.ru/data"">
		<CatalogObject.Контрагенты>
			<Ref>b5268606-4ae7-11da-a21c-000b0d063032</Ref>
			<IsFolder>false</IsFolder>
			<DeletionMark>false</DeletionMark>
			<Parent>00000000-0000-0000-0000-000000000000</Parent>
			<Code>0000001</Code>
			<Description>Контрагентов </Description>
			<Вид>Организация</Вид>
			<ТипЦен>00000000-0000-0000-0000-000000000000</ТипЦен>
		</CatalogObject.Контрагенты>
		<CatalogObject.Номенклатура.Вручную>
			<Ref xsi:type=""CatalogRef.Номенклатура"">178a492a-3fd4-11da-a1f2-0011d8388a5d</Ref>
			<IsFolder xsi:type=""xsd:boolean"">false</IsFolder>
			<Parent xsi:type=""CatalogRef.Номенклатура"">00000000-0000-0000-0000-000000000000</Parent>
			<Code xsi:type=""xsd:string"">0000014</Code>
			<Description xsi:type=""xsd:string"">Ardo TL 1000 EX-1</Description>
			<ЗакупочнаяЦена xsi:type=""xsd:decimal"">9000</ЗакупочнаяЦена>
			<Картинка xsi:type=""v8:ValueStorage"">AQEIAAAAAAAAAO+7v3siVSJ9</Картинка>
			<ПолноеНаименование xsi:type=""xsd:string"">Ardo TL 1000 EX-1</ПолноеНаименование>
		</CatalogObject.Номенклатура.Вручную>
	</Корневой>
"}
},
{0,
{"Листинг 14.60. Процедура ЗагрузкаДанных",0,0,"14.60","Процедура ЗагрузкаДанных(Кнопка)

	// Создаем объект чтения XML
	ЧтениеXML = Новый ЧтениеXML;
	ЧтениеXML.ОткрытьФайл(""c:\out.xml"");

	// Позиционируемся на корневом элементе
	ЧтениеXML.Прочитать();

	// Позиционируемся на первом элементе, содержащим данные
	ЧтениеXML.Прочитать();

	// Читаем данные  пока это возможно
	Пока ВозможностьЧтенияДанных(ЧтениеXML) Цикл

		// Читаем очередное значение
		Данные = ПрочитатьДанные(ЧтениеXML);

		// Записываем полученные данные
		Данные.Записать();
		
	КонецЦикла;
	ЧтениеXML.Закрыть();

КонецПроцедуры
"}
},
{0,
{"Листинг 14.61. Функция ВозможностьЧтенияДанных",0,0,"14.61","Функция ВозможностьЧтенияДанных(ЧтениеXML)
	
	// Получаем тип данных XML, который может быть считан в данный момент
	ТипXML = ПолучитьXMLТип(ЧтениеXML);
	Если ТипXML = Неопределено Тогда
		
		Возврат Ложь;
		
	КонецЕсли;
	
	Если ТипXML.ИмяТипа = ""CatalogObject.Номенклатура.Вручную"" И ТипXML.URIПространстваИмен = """" Тогда
		
		Возврат Истина;
		
	КонецЕсли;
	
	Возврат ВозможностьЧтенияXML(ЧтениеXML);
	
КонецФункции 
"}
},
{0,
{"Листинг 14.62. Функция ПрочитатьДанные",0,0,"14.62","Функция ПрочитатьДанные(ЧтениеXML)
	
	ТипXML = ПолучитьXMLТип(ЧтениеXML);
	Если ТипXML = Неопределено Тогда
		
		Возврат Неопределено;
		
	КонецЕсли;
	
	Если ТипXML.ИмяТипа = ""CatalogObject.Номенклатура.Вручную"" И ТипXML.URIПространстваИмен = """" Тогда
		
		// Пытаемся прочесть значение справочника Номеклатура
		Возврат НомеклатураПрочитатьXML(ЧтениеXML);
		
	КонецЕсли;
	
	// Пытаемся прочесть значени из объекта ЧтениеXML стандартным образом
	Возврат ПрочитатьXML(ЧтениеXML);
	
КонецФункции // ПрочитатьДанные(ЧтениеXML)
"}
},
{0,
{"Листинг 14.63. Функция НомеклатураПрочитатьXML",0,0,"14.63","Функция НомеклатураПрочитатьXML(ЧтениеXML)
	
	Перем Номенклатура;	// элемент справочника Номенклатура
	
	Если ЧтениеXML.ТипУзла <> ТипУзлаXML.НачалоЭлемента Тогда
		ВызватьИсключение ""Ошибка чтения XML"";
	КонецЕсли;
	
	// Чтение следующего узла
	ЧтениеXML.Прочитать();
	
	// Чтение ссылки на элемент справочника
	НомеклатураСсылка = ПрочитатьXML(ЧтениеXML);
	Если ТипЗнч(НомеклатураСсылка) <> Тип(""СправочникСсылка.Номенклатура"") Тогда
		ВызватьИсключение ""Ошибка чтения XML"";
	КонецЕсли;
	
	// Пытаемся создать объект по полученной ссылке
	Номенклатура = НомеклатураСсылка.ПолучитьОбъект();
	
	// Чтение признака группы
	ЭтоГруппа = ПрочитатьXML(ЧтениеXML);
	Если Номенклатура <> Неопределено Тогда
		
		Если Номенклатура.ЭтоГруппа <> ЭтоГруппа Тогда
			ВызватьИсключение ""Некорректные данные"";
		КонецЕсли;
		
	Иначе
		
		// Создаем элемент справочника
		Если ЭтоГруппа = Истина Тогда

			// Создаем группу
			Номенклатура = Справочники.Номенклатура.СоздатьГруппу();
		Иначе

			// Создаем элемент справочника
			Номенклатура = Справочники.Номенклатура.СоздатьЭлемент();
		КонецЕсли;
		
		// Устанавливаем значение ссылки для нового объекта
		Номенклатура.УстановитьСсылкуНового(НомеклатураСсылка);
	КонецЕсли;
	
	// Родитель
	Номенклатура.Родитель = ПрочитатьXML(ЧтениеXML);

	// Код
	Номенклатура.Код = ПрочитатьXML(ЧтениеXML);

	// Наименование
	Номенклатура.Наименование = ПрочитатьXML(ЧтениеXML);

	// Реквизиты, загружаемые только для элемента справочника, 
	// а не для группы
	Если Не Номенклатура.ЭтоГруппа Тогда 
		
		// ЗакупочнаяЦена
		Номенклатура.ЗакупочнаяЦена = ПрочитатьXML(ЧтениеXML);

		// Картинка
		Номенклатура.Картинка = ПрочитатьXML(ЧтениеXML);

		// ПолноеНаименование
		Номенклатура.ПолноеНаименование = ПрочитатьXML(ЧтениеXML);
		
	КонецЕсли;
	
	// Проверяем, что текущим узлом является КонецЭлемента
	Если ЧтениеXML.ТипУзла <> ТипУзлаXML.КонецЭлемента Тогда
		
		ВызватьИсключение ""Ошибка чтения XML"";
		
	КонецЕсли;
	
	// Чтение следующего узла для завершение чтения элемента
	ЧтениеXML.Прочитать();
	Возврат Номенклатура;

КонецФункции	// НомеклатураПрочитатьXML(ЧтениеXML)
"}
},
{0,
{"Листинг 14.64. Пример записи файла в ZIP архив",0,0,"14.64","Архив = Новый ЗаписьZIPФайла(""c:\архив.zip"", ""Пароль"", ""Комментарий"", МетодСжатияZIP.Сжатие, УровеньСжатияZIP.Максимальный, МетодШифрованияZIP.Zip20);
		
Архив.Добавить(""c:\file.xls"", РежимСохраненияПутейZIP.НеСохранятьПути);
Архив.Записать();
"}
},
{0,
{"Листинг 14.65. Пример использования неинициализированного объекта ЗаписьZIPФайла",0,0,"14.65","Архив = Новый ЗаписьZIPФайла();
Архив.Открыть(""c:\архив.zip"", ""Пароль"", ""Комментарий"", МетодСжатияZIP.Сжатие, УровеньСжатияZIP.Максимальный, МетодШифрованияZIP.Zip20);
"}
},
{0,
{"Листинг 14.66. Пример записи файлов в ZIP архив",0,0,"","Архив.Добавить(""c:\ZIP\file1.xls"", РежимСохраненияПутейZIP.СохранятьПолныеПути);
Архив.Добавить(""c:\ZIP\Test\file3.xls"", РежимСохраненияПутейZIP.СохранятьОтносительныеПути);
Архив.Добавить(""c:\ZIP\Test\file4.xls"", РежимСохраненияПутейZIP.НеСохранятьПути);
// и так далее
// …
"}
},
{0,
{"Листинг 14.67. Пример добавления файлов в ZIP архив",0,0,"14.67","Архив.Добавить(""c:\ZIP\*.xls"", РежимСохраненияПутейZIP.СохранятьОтносительныеПути, РежимОбработкиПодкаталоговZIP.НеОбрабатывать);
"}
},
{0,
{"Листинг 14.68. Пример добавления файлов из вложенных каталогов в ZIP архив",0,0,"","Архив.Добавить(""c:\ZIP\*.xls"", РежимСохраненияПутейZIP.СохранятьОтносительныеПути, РежимОбработкиПодкаталоговZIP.ОбрабатыватьРекурсивно);
"}
},
{0,
{"Листинг 14.69. Пример добавления файлов в ZIP архив",0,0,"14.69","Архив.Добавить(""c:\ZIP\file1.xls"", РежимСохраненияПутейZIP.СохранятьПолныеПути);
Архив.Добавить(""c:\ZIP\Test\file3.xls"", РежимСохраненияПутейZIP.СохранятьПолныеПути );
"}
},
{0,
{"Листинг 14.70. Пример добавления файлов в ZIP архив",0,0,"14.70","Архив.Добавить(""c:\ZIP\*.*"", РежимСохраненияПутейZIP.НеСохранятьПути, РежимОбработкиПодкаталоговZIP.ОбрабатыватьРекурсивно);
"}
},
{0,
{"Листинг 14.71. Пример добавления файлов в ZIP архив",0,0,"14.71","Архив.Добавить(""c:\ZIP\*.*"", РежимСохраненияПутейZIP.СохранятьОтносительныеПути, РежимОбработкиПодкаталоговZIP.ОбрабатыватьРекурсивно);
"}
},
{0,
{"Листинг 14.72. Пример использования объекта ЧтениеZipФайла",0,0,"14.72","Архив = Новый ЧтениеZipФайла(""c:\архив.zip"", ""Пароль"");"}
},
{0,
{"Листинг 14.73. Пример использования объекта ЧтениеZipФайла",0,0,"14.73","Архив=Новый ЧтениеZipФайла();
Архив.Открыть(""c:\архив.zip"", ""Пароль"");
"}
},
{0,
{"Листинг 14.74. Пример извлечения файлов из ZIP архива",0,0,"14.74","Архив.ИзвлечьВсе(""c:\Temp"", РежимВосстановленияПутейФайловZIP.НеВосстанавливать);
"}
},
{0,
{"Листинг 14.75. Пример извлечения файлов из ZIP архива",0,0,"14.75","Для Каждого Элемент Из Архив.Элементы Цикл
	Архив.Извлечь(Элемент, ""c:\Temp"", РежимВосстановленияПутейФайловZIP.НеВосстанавливать, ?(Элемент.Зашифрован, Пароль, """"));
КонецЦикла;	
"}
},
{0,
{"Листинг 14.76. Пример распаковки файлов из ZIP архива",0,0,"14.76","Пароль = """";
Подсказка = ""Введите пароль на архив"";

// Запросим пароль на архив
Если ВвестиСтроку(Пароль, Подсказка, 0, Ложь) Тогда
	Архив = Новый ЧтениеZipФайла(""c:\архив.zip"", Пароль);
	Сообщить(""Комментарий: "" + Архив.Комментарий);
	Для Каждого Элемент Из Архив.Элементы Цикл
		Сообщить(""Распаковывается файл: "" + Элемент.Имя + "" размер: "" + Элемент.РазмерНесжатого);
		Архив.Извлечь(Элемент, ""c:\Temp"", РежимВосстановленияПутейФайловZIP.НеВосстанавливать, ?(Элемент.Зашифрован, Пароль, """"));
	КонецЦикла;	
	Архив.Закрыть();
КонецЕсли;
"}
},
{0,
{"Листинг 14.77. Пример использования функции РазделитьФайл()",0,0,"14.77","Массив = РазделитьФайл(""c:\архив.zip"", 1024 * 1024, ""c:\"");"}
},
{0,
{"Листинг 14.78. Пример использования функции ОбъединитьФайлы()",0,0,"14.78","МассивИмен = Новый Массив(2);
МассивИмен.Добавить(""c:\архив.zip.001"");
МассивИмен.Добавить(""c:\архив.zip.002"");
ОбъединитьФайлы(МассивИмен, ""c:\архив.zip"");
"}
},
{0,
{"Листинг 14.79. Пример использования функции ОбъединитьФайлы()",0,0,"14.79","ОбъединитьФайлы(""c:\архив.zip.*"", ""c:\архив.zip"");"}
},
{0,
{"Листинг 14.80. Пример использования команды COPY",0,0,"14.80","C:\>COPY архив.zip.001 /B + архив.zip.002 /B архив.zip"}
},
{0,
{"Листинг 14.81. Основные теги, задающие структуру HTML-документа",0,0,"14.81","<html>
	<head>
		<meta content=""text/html; charset=windows-1251"">
		<title>Заголовок страницы</title>
	</head>
	<body bgcolor=lightyellow text=darkblue>
		«Тело» документа
	</body>
</html>
"}
},
{0,
{"Листинг 14.82. Пример «форматирующих» тегов",0,0,"14.82","<h1>Заголовок 1-го уровня (можно до 6-го)</h1>
<b>Полужирный<i> полужирный и наклонный </b> наклонный<i>
обычный текст <p> новый абзац.
"}
},
{0,
{"Листинг 14.83. Пример таблицы",0,0,"14.83","<table>
	<tr>
		<td>первое</td>
		<td>второе</td>
	</tr>
	<tr>
		<td>третье</td>
		<td>четвертое</td>
	</tr>
</table>
"}
},
{0,
{"Листинг 14.84. Пример использования гиперссылки",0,0,"14.84","<a href=“ресурс”>текст гиперссылки</a>"}
},
{0,
{"Листинг 14.85. Пример использования метода Перейти()",0,0,"14.85","ЭлементыФормы.ПолеHTML.Перейти(URL);"}
},
{0,
{"Листинг 14.86. Пример использования методов Вперед() и Назад()",0,0,"14.86","ЭлементыФормы.ПолеHTML.Вперед();
ЭлементыФормы.ПолеHTML.Назад();
"}
},
{0,
{"Листинг 14.87. Пример установки режима поля HTML документа",0,0,"14.87","ЭлементыФормы.ПолеHTML.УстановитьРежим(РежимПоляHTMLДокумента.Редактирование); 
"}
},
{0,
{"Листинг 14.88. Пример HTML-документа",0,0,"14.88","<html>
	<head>
		<title>Анкета</title></head>
	<body>
		<form name='anketa' action='input.asp'>
			<table>
				<tr>
					<td>Организация</td>
					<td><input type=text name='firma'></td>
				</tr>
				<tr>
					<td>Кому</td>
					<td>
						<input type=text name='to'>
					</td>
				</tr>
				<tr>
					<td>Пожелание</td>
					<td>
						<input type=text name='message'>
					</td>
				</tr>
				<tr>
					<td colspan=2 align=center>
						<input type=submit name='ok' value='Отправить'>
					</td>
				</tr>
			</table>
		</form>
	</body>
</html>
"}
},
{0,
{"Листинг 14.89. Пример заполнения анкеты",0,0,"14.89","Док = ЭлементыФормы.ПолеHTML.Документ;
Док.forms[""anketa""].firma.Value = ""ООО Вперед"";
Док.forms[""anketa""].to.Value = ""директору"";
Док.forms[""anketa""].message.Value = ""здоровья и счастья!"";
"}
},
{0,
{"Листинг 14.90. Пример работы с HTTP соединением",0,0,"14.90","Функция ЗапроситьФайлыССервера(СерверИсточник, СтрокаПараметраПолучения, ИмяВходящегоФайла, HTTP = Неопределено) Экспорт

	Если ТипЗнч(HTTP) <> Тип(""HTTPСоединение"") Тогда
		HTTP = Новый HTTPСоединение(СерверИсточник);
	КонецЕсли; 
	
	Попытка
		HTTP.Получить(СтрокаПараметраПолучения, ИмяВходящегоФайла);
		Возврат Истина;
	Исключение
		Если Найти(ОписаниеОшибки(), ""407"") <> 0 И Найти(НРег(ОписаниеОшибки()), ""authentication"") <> 0 Тогда

			// Скорее всего соединяемся через прокси
			HTTP = СоздатьСоединениеЧерезПрокси();

			Если ТипЗнч(HTTP) <> Тип(""HTTPСоединение"") Тогда
				Сообщить(""Соединение с сервером не установлено."");
				Возврат Ложь;
			Иначе
				Возврат Истина;
			КонецЕсли; 
		Иначе
			Возврат Ложь;
		КонецЕсли;
	КонецПопытки;

КонецФункции
"}
},
{0,
{"Листинг 14.91. Функция СоздатьСоединениеЧерезПрокси",0,0,"14.91","Функция СоздатьСоединениеЧерезПрокси()

	Перем HTTP;
	Перем ПроксиСервер;
	
	ПроксиСервер = Новый ИнтернетПрокси();
	ПроксиСервер.Пользователь = ИмяПользователя;
	ПроксиСервер.Пароль = ПарольПользователя;
	Попытка
		HTTP = Новый HTTPСоединение(СерверИсточник, , , , ПроксиСервер);
		HTTP.Получить(СтрокаПараметраПолучения, ИмяВходящегоФайла);
	Исключение
		HTTP = Неопределено;
	КонецПопытки;

	Возврат HTTP;
	
КонецФункции
"}
},
{0,
{"Листинг 14.92. Пример использования процедуры КопироватьФайл()",0,0,"14.92","// ИмяФайлаСообщения - параметр содержащий имя отправляемого файла. 
// В имени содержится № сообщения
// АдресОбмена - параметр, указывающий куда поместить файл
	
// Необходимо для использования схем http, https и ftp 
Путь = СтрЗаменить(АдресОбмена, ""\"", ""/"");

// Копируем файл в каталог, определенный для данного узла
Попытка
	КопироватьФайл(ИмяФайла, Путь + ?(Прав(Путь, 1) = ""/"", """", ""/"") + ИмяФайлаСообщения);
		
Исключение
	Сообщить("" - Ошибка публикации файла: "" + ИмяФайлаСообщения);
	Сообщить(ОписаниеОшибки());
	Возврат;
		
КонецПопытки;
	
Сообщить("" - Опубликован файл: "" + ИмяФайлаСообщения);
"}
},
{0,
{"Листинг 14.93. Пример использования процедуры КопироватьФайл()",0,0,"14.93","//МаскаФайлов - параметр, содержащий маску для файлов загрузки
//АдресОбмена - параметр, указывающий где смотрим файлы
	
ИмяФайлаСообщения = """";

// Ищем файлы по маске в каталоге загрузки
Файлы = НайтиФайлы(АдресОбмена, МаскаФайлов);

// Отбираем файл с максимальным номером в имени, т.е. последний выгруженный
Для Каждого Файл Из Файлы Цикл
	Если ПустаяСтрока(ИмяФайлаСообщения) ИЛИ Файл.ПолноеИмя > ИмяФайлаСообщения Тогда
		ИмяФайлаСообщения = Файл.ПолноеИмя;
	КонецЕсли;	
КонецЦикла;
	
Если Не ПустаяСтрока(ИмяФайлаСообщения) Тогда
	Сообщить("" - Считывается файл "" + ИмяФайлаСообщения);
	Попытка
			
		// Копируем файл с сообщением обмена в указанный файл
		КопироватьФайл(ИмяФайлаСообщения, ИмяФайла);
			
	Исключение
		Сообщить(""   "" + ОписаниеОшибки());
		Возврат;
	КонецПопытки;
		
	// Файл с сообщением обмена получен успешно
		
КонецЕсли;	
"}
},
{0,
{"Листинг 14.94. Пример использования объекта FTPСоединение",0,0,"14.94","Если ИспользуетсяПрокси = Истина Тогда
	ПроксиСервер = Новый ИнтернетПрокси();
	ПроксиСервер.Пользователь = ИмяПользователяНаПрокси;
	ПроксиСервер.Пароль = ПарольПользователяНаПрокси;
	Попытка
	    Сервер = Новый FTPСоединение(СерверОбмена, Порт, ИмяПользователяFTP, ПарольПользователяFTP, ПроксиСервер);
	Исключение
		Сообщить(""Не удалось соединиться с сервером"");
		Возврат;
	КонецПопытки;
Иначе
	Попытка
	    Сервер = Новый FTPСоединение(СерверОбмена, Порт, ИмяПользователяFTP, ПарольПользователяFTP);
	Исключение
		Сообщить(""Не удалось соединиться с сервером"");
		Возврат;
	КонецПопытки;
КонецЕсли;	

// Находим файлы в нужном каталоге по указанной маске
МассивФайлов = Сервер.НайтиФайлы(ПутьНаСервере, МаскаФайлов);
Для Каждого Файл Из МассивФайлов Цикл
	
	// Не каталог ли это
	Если Файл.ЭтоФайл() Тогда
		
		// Копируем файл в локальный каталог
		Сервер.Получить(Файл.Значение.ПолноеИмя, Путь + Файл.Значение.ПолноеИмя);	
	КонецЕсли;	
КонецЦикла;	
"}
},
{0,
{"Листинг 14.95. Пример отправки почтового сообщения",0,0,"14.95","Почта=Новый Почта;
	
// Создаем сообщение
Сообщ = Новый ПочтовоеСообщение;
Сообщ.Текст = ""Здравствуйте дорогая Катерина Матвеевна!..."";
Сообщ.Тема = ""Письмо c данными"";
Данные = Новый ДвоичныеДанные(""c:\out.zip"");
Сообщ.Вложения.Добавить(Данные,""data.zip"");
Сообщ.Получатели.Добавить(""получатель@почтовыйсервер.ru"");

Попытка
	// Попытка подключения к почтовому клиенту
	Почта.Подключиться(""user"", ""password"");

Исключение
	Сообщить(""Ошибка подключения к почтовому клиенту"");
	Возврат;
КонецПопытки;	
		
// Отсылка сообщения
Почта.Послать(Сообщ, Ложь);

Почта.Отключиться();
"}
},
{0,
{"Листинг 14.96. Пример получения почтового сообщения",0,0,"14.96","Почта = Новый Почта;
Попытка

	// Попытка подключения к почтовому клиенту
	Почта.Подключиться(""user"", ""password"");

Исключение
	Сообщить(""Ошибка подключения к почтовому клиенту"");
	Возврат;
КонецПопытки;	
	
// Истина - только непрочитанные, Ложь – конверты вместе в вложениями
мсвСообщений = Почта.Выбрать(Истина, Ложь);

Для Каждого Сообщение Из мсвСообщений Цикл
	Сообщить(""Тема: "" + Строка(Сообщение.Тема));	
	Сообщить(""Текст: "" + Строка(Сообщение.Текст));	
	Для Каждого Вложение Из Сообщение.Вложения Цикл
		Сообщить(""	Вложение: "" + Строка(Вложение.Наименование));	
	КонецЦикла;	
КонецЦикла;	
"}
},
{0,
{"Листинг 14.97. Пример отправки почтовых сообщений",0,0,"14.97","Профиль = Новый ИнтернетПочтовыйПрофиль;
Профиль.АдресСервераSMTP = СерверSMTP;
Профиль.ПользовательSMTP = Пользователь;
Профиль.ПарольSMTP = Пароль;
	
// Формируем сообщение обмена
Сообщение = Новый ИнтернетПочтовоеСообщение;
Сообщение.Тема = ""СООБЩЕНИЕ_ОБМЕНА: "" + ИмяФайлаСообщения;
Сообщение.Получатели.Добавить(ПочтовыйАдресОбмена);
	
ФайлСообщения = Новый Файл(ИмяФайлаСообщения);

// Создаем вложение с файлом обмена
Сообщение.Вложения.Добавить(ИмяФайла, ФайлСообщения.Имя);
	
Почта = Новый ИнтернетПочта;
	
Попытка
		
	Почта.Подключиться(Профиль);

	// Отправляем сообщение с файлом обмена
	Почта.Послать(Сообщение);
		
Исключение
		
	Сообщить("" - Ошибка при отправки файла: "" + ИмяФайлаСообщения);
	Сообщить(ОписаниеОшибки());
	Возврат;
		
КонецПопытки;
	
Сообщить("" - Отправлен файл "" + ИмяФайлаСообщения + "" на адрес "" + ПочтовыйАдресОбмена);
	
Почта.Отключиться();
"}
},
{0,
{"Листинг 14.98. Пример чтения почтовых сообщений",0,0,"14.98","Профиль = Новый ИнтернетПочтовыйПрофиль;
Профиль.АдресСервераPOP3 = СерверPOP3;
Профиль.Пользователь = Пользователь;
Профиль.Пароль = Пароль;
	
Попытка
	Почта = Новый ИнтернетПочта;
	Почта.Подключиться(Профиль);
		
	// Получаем все сообщения из почтового ящика
	МассивСообщений = Новый Массив;
	МассивСообщений = Почта.Выбрать(Ложь);
		
Исключение
		
	// Ошибка при подключении к серверу или при приеме сообщения обмена
	Сообщить("" - Ошибка при подключении или приеме"" + ОписаниеОшибки());
	Возврат Ложь;
КонецПопытки;
	
// Массив будет содержать сообщения, 
// которые в последствии будут удалены с сервера 
МассивСообщенийОбмена = Новый Массив;
	
Если МассивСообщений.Количество() = 0 Тогда
		
	// Сообщений в почтовом ящике нет
	Возврат Ложь;
		
КонецЕсли;
	
ИмяФайлаСообщения = """";
Для Индекс = 0 По МассивСообщений.Количество() - 1 Цикл
		
	// Отсеиваем только сообщения, которые содержат файлы обмена 
	// для участвующих в обмене узлов.
	ЧастьТемы = ""СООБЩЕНИЕ_ОБМЕНА: "" + ""Message"" + СокрП(Ссылка.Код) + ""_"" + СокрП(ПланыОбмена.УдаленныеСклады.ЭтотУзел().Код);
	Если Лев(МассивСообщений[Индекс].Тема, СтрДлина(ЧастьТемы)) = ЧастьТемы Тогда
			
		Если МассивСообщений[Индекс].Вложения[0].Имя > ИмяФайлаСообщения Тогда
				
			// Выбираем сообщение с последним номером сообщения обмена
			ИмяФайлаСообщения = МассивСообщений[Индекс].Вложения[0].Имя;
			ИндексСообщения = Индекс;
				
		КонецЕсли;	
		МассивСообщенийОбмена.Добавить(МассивСообщений[Индекс]);
	КонецЕсли;	
КонецЦикла;

Если ИндексСообщения <> Неопределено Тогда 
		
	// Записываем файл обмена во временный файл
	МассивСообщений[ИндексСообщения].Вложения[0].Данные.Записать(ИмяФайла);
		
	Сообщить("" - Принят файл обмена данными "" + ИмяФайлаСообщения + "" с адреса "" + ПочтовыйАдресОбмена);
		
	// Удаляем все сообщения обмена с сервера для узлов, 
	// участвующих в обмене
	Почта.УдалитьСообщения(МассивСообщенийОбмена);
	
	Почта.Отключиться();        
Иначе
		
	// Сообщений обмена в почтовом ящике нет
	Почта.Отключиться();        
	Возврат Ложь;
		
КонецЕсли;
"}
},
{0,
{"Листинг 14.99. Пример получения заголовков почтовых сообщений",0,0,"14.99","Профиль = Новый ИнтернетПочтовыйПрофиль;
Профиль.АдресСервераPOP3 = ""рорЗ.yandex.ru"";
Профиль Пользователь = ""user"";
Профиль Пароль = ""password"";

// Подключиться к почтовому серверу 
Почта = Новый ИнтернетПочта;
Почта.Подключиться(Профиль);

// Принять заголовки всех писем, находящихся на сервере
// ЗаголовкиСообщений - это массив с объектами типа  
// ИнтернетПочтовоеСообщение
ЗаголовкиСообщений = Почта.ПолучитьЗаголовки();
"}
},
{0,
{"Листинг 14.100. Пример получения почтовых сообщений",0,0,"14.100","Попытка

	// Получить   полные сообщения
	ПолученныеСообщения = Почта.Выбрать(Ложь, НужныеЗаголовкиСообщений),
Исключение
	Сообщить (ОписаниеОшибки());
КонецПопытки;
"}
},
{0,
{"Листинг 14.101. Пример размещения данных в очереди MSMQ",0,0,"14.101","Процедура КнопкаВыполнитьНажатие(Кнопка)

	// Флаги
	MQ_SEND_ACCESS = 2;
	MQ_DENY_NONE = 0;

	qinfo = Новый COMОбъект(""MSMQ.MSMQQueueInfo"");
	
	ОчередьОбменаMSMQ = "".\MyLocale"";
	ИмяФайлаСообщения = ""data.xml"";
	
	// Формируем путь к очереди на удаленном компьютере
	qinfo.PathName = ОчередьОбменаMSMQ + ""_"" + ""ЦентрОфис"";
	
	// Если очередь не создана, создаем
	Попытка
		qinfo.Create();
	Исключение
	КонецПопытки;
	
	// Открываем очередь на запись
	Очередь = qinfo.Open(MQ_SEND_ACCESS, MQ_DENY_NONE);
	
	ДанныеОбмена = Новый ЧтениеТекста;
	ДанныеОбмена.Открыть(""c:\out.xml"");
	
	// Создаем сообщение, содержащее данные обмена
	Сообщение = Новый COMОбъект(""MSMQ.MSMQMessage"");
	Сообщение.Label = ИмяФайлаСообщения;
	Сообщение.Body = ДанныеОбмена.Прочитать();
	Сообщение.ResponseQueueInfo = qinfo;
	
	// Помещаем сообщение в очередь
	Сообщение.Send(Очередь);
	
	Сообщить("" - Помещен файл "" + ИмяФайлаСообщения + "" в очередь "" + ОчередьОбменаMSMQ);
	
	Очередь.Close();
	ДанныеОбмена.Закрыть();

КонецПроцедуры
"}
},
{0,
{"Листинг 14.102. Получение данных из очереди MSMQ",0,0,"14.102","Процедура Загрузить(Кнопка)

	// Флаги
	MQ_DENY_NONE = 0;
	MQ_RECEIVE_ACCESS = 1;
	MQ_NO_TRANSACTION = 0;

	ОчередьОбменаMSMQ = "".\MyLocale"";
	
	qinfo = Новый COMОбъект(""MSMQ.MSMQQueueInfo"");
	
	// Находим позицию начала имени очереди в АдресОбменаMSMQ
	// Хотя в нашем случае могли установить Индекс=2
	Индекс = СтрДлина(ОчередьОбменаMSMQ);
	Пока (Индекс <> 0) Цикл
		
		Если Сред(ОчередьОбменаMSMQ, Индекс, 1) = ""\"" Тогда
			Прервать;
		КонецЕсли;
		
		Индекс = Индекс - 1;
		
	КонецЦикла;
	
	// Собираем путь к очереди для чтения данных обмена
	// В нашем случае qinfo.PathName = "".\MyLocale_ЦентрОфис"" 
	qinfo.PathName = "".\"" + Прав(ОчередьОбменаMSMQ, СтрДлина(ОчередьОбменаMSMQ) - Индекс) + ""_"" + ""ЦентрОфис"";
					 
	Попытка
		qinfo.Create();
	Исключение
	КонецПопытки;
	
	// Открываем очередь
	Очередь = qinfo.Open(MQ_RECEIVE_ACCESS, MQ_DENY_NONE);
	
	// Временный объект необходим для поиска последнего сообщения
	СообщениеВрем = Новый COMОбъект(""MSMQ.MSMQMessage"");

	// Читаем первое сообщение
	СообщениеВрем = Очередь.Receive(MQ_NO_TRANSACTION, , , 0);
	
	Пока (СообщениеВрем <> Неопределено) Цикл
		
		Сообщение = СообщениеВрем;

		// Читаем последующие сообщения, если они присутствуют
		СообщениеВрем = Очередь.Receive(MQ_NO_TRANSACTION, , , 0);
		
	КонецЦикла;
	
	// Закрываем очередь
	Очередь.Close();
	
	// Если получили сообщение, разбираем его и передаем данные обмена 
	// дальше для обработки
	Если Сообщение <> Неопределено Тогда
		ИмяФайлаСообщения = Сообщение.Label;
		ФайлОбмена = Новый ЗаписьТекста(""c:\input.xml"");
		ФайлОбмена.Записать(Сообщение.Body);
		ФайлОбмена.Закрыть();
		Сообщить("" - Принят файл обмена данными "" + ИмяФайлаСообщения + "" из очереди "" + ОчередьОбменаMSMQ);
	КонецЕсли;
	
КонецПроцедуры
"}
},
{0,
{"Листинг 14.103. Пример размещения сообщения в очереди",0,0,"14.103","// Определяем флаг
MQOO_OUTPUT = 16;
	
// Указываем очередь в которую нужно поместить данные 
УдаленнаяОчередь = ""RemoteQueue"";
	
Попытка
		
	// Подключаемся к менеджеру очереди
	Сессия = Новый COMОбъект(""MQAX200.MQSession"");
	МенеджерОчереди = Сессия.AccessQueueManager("""");     
Исключение
	Сообщить("" - Ошибка доступа к очереди: "" + ОписаниеОшибки());
	Возврат;
КонецПопытки;
	
Попытка
		
	// Открываем очередь на запись
	Очередь = МенеджерОчереди.AccessQueue(УдаленнаяОчередь, MQOO_OUTPUT);
		
Исключение
	Сообщить("" - Ошибка открытия очереди: "" + ОписаниеОшибки());
	Возврат;
КонецПопытки;
	
Попытка
		
	// Создаем новое сообщение
    Сообщение = Сессия.AccessMessage();
		
	// Открываем файл с данными обмена
	ДанныеОбмена = Новый ЧтениеТекста;
	ДанныеОбмена.Открыть(""c:\out.xml"");
		
	// Считываем данные из файла в сообщение, 
	// которое затем помещается в очередь
    Сообщение.writeString(ДанныеОбмена.Прочитать());

	// Помещаем сообщение в очередь
	Очередь.Put(Сообщение);
	
Исключение
	Сообщить("" - Ошибка размещения сообщения в очереди: "" + ОписаниеОшибки());
	Возврат;
КонецПопытки;
Сообщить("" - Помещен файл в очередь "" + УдаленнаяОчередь);
ДанныеОбмена.Закрыть();
"}
},
{0,
{"Листинг 14.104. Пример чтения сообщения из очереди",0,0,"14.104","// Определяем флаг
MQOO_INPUT_AS_Q_DEF = 1;
	
//указываем локальную очередь из которую нужно прочитать данные 
ЛокальнаяОчередь = ""LocaleQueue"";
	
Попытка
		
	// Подключаемся к менеджеру очереди
	Сессия = Новый COMОбъект(""MQAX200.MQSession"");
	МенеджерОчереди = Сессия.AccessQueueManager("""");     
		
Исключение
	Сообщить("" - Ошибка доступа к очереди: "" + ОписаниеОшибки());
	Возврат;
КонецПопытки;
	
// Открываем очередь для чтения из неё данных обмена
Попытка
	Очередь = МенеджерОчереди.AccessQueue(ЛокальнаяОчередь, MQOO_INPUT_AS_Q_DEF);
Исключение
	Сообщить("" - Ошибка открытия очереди: "" + ОписаниеОшибки());
	Возврат;
КонецПопытки;

Попытка
		
	// Создаем сообщение
    Сообщение = Сессия.AccessMessage();

	// получаем сообщение
   	Очередь.Get(Сообщение);
		
Исключение
	Сообщить("" - Ошибка чтения данных из очереди: "" + ОписаниеОшибки());
	Возврат;
КонецПопытки;

	// Читаем из сообщения данные обмена и сохраняем их в файл
   Данные = Сообщение.ReadString(Сообщение.MessageLength);
	
ФайлОбмена = Новый ЗаписьТекста(""c:\input.xml"");
ФайлОбмена.Записать(Данные);
ФайлОбмена.Закрыть();
	
Сообщить("" - Принят файл обмена данными из очереди "" + ЛокальнаяОчередь);
"}
},
{0,
{"Листинг 14.105. Пример чтения данных из листа Excel",0,0,"14.105","Sub OLE()
	Dim trade As Object
	Dim Элемент As Object

	Set trade = CreateObject(""V8.Application"")
	trade.Connect (""File=""""c:\InfoBases\Trade"""";Usr=""""Director"""";"")
    
	Rem создаем документ
	Set Документ = trade.Документы.Приходная.СоздатьДокумент()
        
	Rem получаем данные из листа
	Set Контрагент = trade.Справочники.Контрагенты.НайтиПоНаименованию(Application.Cells(1, 2).Value)
	НомерДокумента = Application.Cells(2, 2).Value
	Дата = Application.Cells(3, 2).Value
    
	Rem записываем полученные данные в документ
	Документ.Контрагент = Контрагент
	Документ.Дата = Дата
	Документ.Номер = НомерДокумента
    
	Номер = 6   'Первая строка табличной части
	НомерСтроки = Application.Cells(Номер, 1).Value
    
	Rem в последней строке табличной части будет символ #
	While НомерСтроки <> ""#""
    
		Rem получаем данные из листа
		Set Номенклатура = trade.Справочники.Номенклатура.НайтиПоНаименованию(Application.Cells(Номер, 2).Value)
		Количество = Application.Cells(Номер, 5).Value
		Цена = Application.Cells(Номер, 6).Value
		Сумма = Application.Cells(Номер, 7).Value
        
		Rem записываем полученные данные в строку табличной части
		Set Строка = Документ.Товары.Добавить()
		Строка.Номенклатура = Номенклатура
		Строка.Количество = Количество
		Строка.Цена = Цена
		Строка.Сумма = Сумма
		Номер = Номер + 1
		НомерСтроки = Application.Cells(Номер, 1).Value
	Wend
	Документ.Записать
    
	Документ.ПолучитьФорму.ОткрытьМодально
End Sub
"}
},
{0,
{"Листинг 14.106. Пример использования системы 1С:Предприятие в качестве Automation Client",0,0,"14.106","V8 = Новый COMОбъект(""V8.Application"");
Попытка
	Открытие = V8.Connect(""File="" + Путь + "";Usr=""""Usr1"""";Pwd="" + Пароль + "";"");
Исключение
	Предупреждение(""База данных не открыта!!!"");
	Возврат;
КонецПопытки;	
МенеджерНоменклатуры = V8.Справочники.Номенклатура;
НовыйЭлемент = МенеджерНоменклатуры.СоздатьЭлемент();       
НовыйЭлемент.Наименование = ""Созданный"";
НовыйЭлемент.Записать();
Фрм = НовыйЭлемент.ПолучитьФорму();
Фрм.ОткрытьМодально();
"}
},
{0,
{"Листинг 14.107. Пример работы с книгой Excel",0,0,"14.107","Путь= ""с\"";
Документ = ПолучитьCOMОбъект(Путь + ""документ.xls"");
	
НомерЛиста = 1;
Контрагент = Документ.Sheets(НомерЛиста).Cells(1, 1).Value;

// дальнейшая обработка данных шапки документа

НомерСтроки=3;
Номер=Документ.Sheets(мНом).Cells(НомерСтроки, 1).Value;
	
Пока СокрЛП(Номер) <> ""#"" Цикл
	Номенклатура = Документ.Sheets(мНом).Cells(НомерСтроки, 2).Value;
	Цена = Документ.Sheets(мНом).Cells(НомерСтроки, 3).Value;

	// дальнейшая обработка данных табличной части документа
		
	НомерСтроки = НомерСтроки+1;
	Номер = Документ.Sheets(мНом).Cells(НомерСтроки, 1).Value;
КонецЦикла;	
	
// заверешение работы
Документ.Application.Quit();
"}
},
{0,
{"Листинг 14.108. Пример чтения данных из листа Excel ",0,0,"14.108","Sub COM()
	Dim trade As Object
	Dim Элемент As Object

	Set obj = CreateObject(""V8.ComConnector"")
	Set trade = obj.Connect (""File=""""c:\InfoBases\Trade"""";Usr=""""Director"""";"")
    
	Rem создаем документ
	Set Документ = trade.Документы.Приходная.СоздатьДокумент()
        
	Rem получаем данные из листа
	Set Контрагент = trade.Справочники.Контрагенты.НайтиПоНаименованию(Application.Cells(1, 2).Value)
	НомерДокумента = Application.Cells(2, 2).Value
	Дата = Application.Cells(3, 2).Value
    
	Rem записываем полученные данные в документ
	Документ.Контрагент = Контрагент
	Документ.Дата = Дата
	Документ.Номер = НомерДокумента
    
	Номер = 6   'Первая строка табличной части
	НомерСтроки = Application.Cells(Номер, 1).Value
    
	Rem в последней строке табличной части будет символ #
	While НомерСтроки <> ""#""
    
		Rem получаем данные из листа
		Set Номенклатура = trade.Справочники.Номенклатура.НайтиПоНаименованию(Application.Cells(Номер, 2).Value)
		Количество = Application.Cells(Номер, 5).Value
		Цена = Application.Cells(Номер, 6).Value
		Сумма = Application.Cells(Номер, 7).Value
        
		Rem записываем полученные данные в строку табличной части
		Set Строка = Документ.Товары.Добавить()
		Строка.Номенклатура = Номенклатура
		Строка.Количество = Количество
		Строка.Цена = Цена
		Строка.Сумма = Сумма
		Номер = Номер + 1
		НомерСтроки = Application.Cells(Номер, 1).Value
	Wend
	Документ.Записать
    
End Sub
"}
},
{0,
{"Листинг 14.109. Пример обращения к другой информационной базе 1С:Предприятия",0,0,"14.109","V8 = Новый COMОбъект(""V8.ComConnector"");
Попытка
	Открытие = V8.Connect(""File="" + Путь + "";Usr=""""Usr1"""";Pwd="" + Пароль + "";"");
Исключение
	Предупреждение(""База данных не открыта!!!"");
	Возврат;
КонецПопытки;

МенеджерНоменклатуры=Открытие.Справочники.Номенклатура;
НовыйЭлемент = МенеджерНоменклатуры.СоздатьЭлемент();       
НовыйЭлемент.Наименование = ""Добавлен"";
НовыйЭлемент.Записать();
"}
},
{0,
{"Листинг 14.110. Документ default.asp",0,0,"14.110","<%@ Language=javascript %>
<html>
	<head>
		<title>Наш web site</title>
		<meta name=""GENERATOR"" content=""Microsoft FrontPage 4.0"">
		<meta http-equiv=""Content-Type"" content=""text/html"">
		<script id=""clientEventHandlersJS"" language=""javascript"">
		function bbut_click()
		{
			alert(""Dont strike this button!"");
		}
		</script>
	</head>
	<body BGCOLOR=""#99ffff"" TEXT=""#990033"">
		<form ID=""Form1"">
			<h1 align=""center"">Демонстрация WEB-сервера на базе внешнего соединения 1С:Предприятия.</h1>
			<p align=""center"">
				<a href=""reflist.asp"">
					<font size=""5"">Справочники</font>
				</a>
			</p>
		</form>
	</body>
</html>
"}
},
{0,
{"Листинг 14.111. Файл reflist.asp",0,0,"14.111","<%@ Language=javascript %>
<%
	entConn = new ActiveXObject(""v8.comconnector"");
	conn = entConn.connect(""file=c:/demo/democonfig"");
	conn.КаталогXSLПреобразований = ""c:/demo/xsl"";
	Response.Write(conn.getRefList());
%>
"}
},
{0,
{"Листинг 14.112. Фрагмент модуля внешнего соединения",0,0,"14.112","Перем КаталогXSLПреобразований Экспорт;

// Получить список справочников в формате XML и преобразовать его к HTML
// при помощи XSL-трансформации.
Функция getRefList() Экспорт
	
	РезультатXML = """";
	Писатель = Новый XMLWriter;
	Писатель.УстановитьСтроку();
	Писатель.ЗаписатьОбъявлениеXML();
	Писатель.ЗаписатьНачалоЭлемента(""references"");
	Счетчик = 1;
	Для Каждого Спр Из Метаданные.Справочники Цикл
		Писатель.ЗаписатьНачалоЭлемента(""reference"");
		Писатель.ЗаписатьНачалоЭлемента(""number"");
		Писатель.ЗаписатьТекст("""" + Нум);
		Писатель.ЗаписатьКонецЭлемента();
		Писатель.ЗаписатьНачалоЭлемента(""name"");
		Писатель.ЗаписатьТекст("""" + Спр);
		Писатель.ЗаписатьКонецЭлемента();
		Писатель.ЗаписатьКонецЭлемента();
		Счетчик = Счетчик + 1;
	КонецЦикла;
	Писатель.ЗаписатьКонецЭлемента();
	РезультатXML = Писатель.Закрыть();

	Трансформатор = Новый ПреобразованиеXSL;
	Трансформатор.ЗагрузитьИзФайла(КаталогXSLПреобразований + ""/reflist.xsl"");
	РезультатHTML = Трансформатор.ПреобразоватьИзСтроки(РезультатXML);

	Возврат РезультатHTML;
	
КонецФункции
"}
},
{0,
{"Листинг 14.113. Файл reflist.xsl",0,0,"14.113","<?xml version=""1.0""?>
<xsl:stylesheet xmlns:xsl=""http://www.w3.org/1999/XSL/Transform"" version=""1.0"">
	<xsl:template match=""references"">
		<html>
			<head>
				<meta name=""GENERATOR"" content=""1C:Enterprise"" charset=""windows-1251"" />
				<meta http-equiv=""Content-Type"" content=""text/html"" />
				<title>Список справочников.</title>
			</head>
			<body  BGCOLOR=""#FFFFFF"" TEXT=""#000000"">
				<form ID=""Form1"">
					<H1 align=""center"">Справочники информационной базы.</H1>
					<table width=""100%"" border=""1"" cellpadding=""0"" cellspacing=""1"">
						<tr align=""center"">
							<td>
								<font size=""5"">Наименование справочника</font>
							</td>
						</tr>
						<xsl:apply-templates select=""reference""/>
					</table>
				</form>
			</body>
		</html>
	</xsl:template>
	<xsl:template match=""reference"">
		<tr align=""center"">
			<td>
				<a href=""refone.asp?key={number}"">
					<xsl:value-of select=""name""/>
				</a>
			</td>
		</tr>
	</xsl:template>
</xsl:stylesheet>
"}
},
{0,
{"Листинг 14.114. Пример XML-документа",0,0,"14.114","<?xml version=""1.0""?>
<references>
	<reference>
		<number>1</number>
		<name>Номенклатура</name>
	</reference>
	<reference>
		<number>2</number>
		<name>Склады</name>
	</reference>
	<reference>
		<number>3</number>
		<name>Контрагенты</name>
	</reference>
	<reference>
		<number>4</number>
		<name>Типы цен</name>
	</reference>
</references>
"}
},
{0,
{"Листинг 14.115. Шаблон для корневого элемента XML-документа",0,0,"14.115","<html>
	<head>
		<meta name=""GENERATOR"" content=""1C:Enterprise"" charset=""windows-1251"" />
		<meta http-equiv=""Content-Type"" content=""text/html"" />
		<title>Список справочников.</title>
	</head>
	<body  BGCOLOR=""#FFFFFF"" TEXT=""#000000"">
		<form ID=""Form1"">
			<H1 align=""center"">Справочники информационной базы.</H1>
			<table width=""100%"" border=""1"" cellpadding=""0"" cellspacing=""1"">
				<tr align=""center"">
					<td><font size=""5"">Наименование справочника</font></td>
				</tr>
				<xsl:apply-templates select=""reference""/>
			</table>
		</form>
	</body>
</html>
"}
},
{0,
{"Листинг 14.116. Результат после записи шаблона",0,0,"14.116","<html>
	<head>
		<meta name=""GENERATOR"" content=""1C:Enterprise"" charset=""windows-1251"" />
		<meta http-equiv=""Content-Type"" content=""text/html"" />
		<title>Список справочников.</title>
	</head>
	<body  BGCOLOR=""#FFFFFF"" TEXT=""#000000"">
		<form ID=""Form1"">
			<H1 align=""center"">Справочники информационной базы.</H1>
			<table width=""100%"" border=""1"" cellpadding=""0"" cellspacing=""1"">
				<tr align=""center"">
					<td>
						<font size=""5"">Наименование справочника</font>
					</td>
				</tr>
				<tr align=""center"">
					<td>
						<a href=""refone.asp?key={number}""><xsl:value-of select=""name""/></a>
					</td>
				</tr>
				<tr align=""center"">
					<td>
						<a href=""refone.asp?key={number}""><xsl:value-of select=""name""/></a>
					</td>
				</tr>
				<tr align=""center"">
					<td>
						<a href=""refone.asp?key={number}""><xsl:value-of select=""name""/></a>
					</td>
				</tr>
				<tr align=""center"">
					<td>
						<a href=""refone.asp?key={number}""><xsl:value-of select=""name""/></a>
					</td>
				</tr>
			</table>
		</form>
	</body>
</html>
"}
},
{0,
{"Листинг 14.117. Конечный HTML-документ",0,0,"14.117","<html>
	<head>
		<meta name=""GENERATOR"" content=""1C:Enterprise"" charset=""windows-1251"" />
		<meta http-equiv=""Content-Type"" content=""text/html"" />
		<title>Список справочников.</title>
	</head>
	<body  BGCOLOR=""#FFFFFF"" TEXT=""#000000"">
		<form ID=""Form1"">
			<H1 align=""center"">Справочники информационной базы.</H1>
			<table width=""100%"" border=""1"" cellpadding=""0"" cellspacing=""1"">
				<tr align=""center"">
					<td>
						<font size=""5"">Наименование справочника</font>
					</td>
				</tr>
				<tr align=""center"">
					<td>
						<a href=""refone.asp?key=1"">Номенклатура</a>
					</td>
				</tr>
				<tr align=""center"">
					<td>
						<a href=""refone.asp?key=2"">Склады</a>
					</td>
				</tr>
				<tr align=""center"">
					<td>
						<a href=""refone.asp?key=3"">Контрагенты</a>
					</td>
				</tr>
				<tr align=""center"">
					<td>
						<a href=""refone.asp?key=4"">Типы цен</a>
					</td>
				</tr>
			</table>
		</form>
	</body>
</html>
"}
},
{0,
{"Листинг 14.118. Файл refone.asp",0,0,"14.118","<%@ Language=javascript %>
<%
	entConn = new ActiveXObject(""v8.comconnector"");
	conn = entConn.connect(""file=c:/demo/democonfig"");
	conn.КаталогXSLПреобразований = ""c:/demo/xsl"";
	grVal = Request.QueryString(""group"");
	if (grVal.Count == 0)
	{
		var empty;
		Response.Write(conn.getRefOne(Request.QueryString(""key"")(1), empty));
	}
    else
		Response.Write(conn.getRefOne(Request.QueryString(""key"")(1), grVal(1)));
%>
"}
},
{0,
{"Листинг 14.119. Функция getRefOne",0,0,"14.119","// Получить список элементов справочника по текстовому представлению
// ссылки на родительский элемент.
Функция getRefOne(НомерСправочника, СсылкаНаЗапись) Экспорт

	СтрокаСоСсылкой = ""{""""#"""","" + СсылкаНаЗапись + ""}"";
	МдСпр = Метаданные.Справочники[Число(НомерСправочника) - 1];
	Спр = Справочники[МдСпр.Имя];
	Если СсылкаНаЗапись = Неопределено ИЛИ СсылкаНаЗапись = """" Тогда
		Выборка = Спр.выбрать(Спр.ПустаяСсылка());
	Иначе
		Выборка = Спр.выбрать(ЗначениеИзСтрокиВнутр(СтрокаСоСсылкой));
	КонецЕсли;

	РезультатXML = """";
	Писатель = Новый XMLWriter;
	Писатель.УстановитьСтроку();
	Писатель.ЗаписатьОбъявлениеXML();
	Писатель.ЗаписатьНачалоЭлемента(""reference"");
	Писатель.ЗаписатьНачалоЭлемента(""name"");
	Писатель.ЗаписатьТекст("""" + МдСпр);
	Писатель.ЗаписатьКонецЭлемента();
	Писатель.ЗаписатьНачалоЭлемента(""code"");
	Писатель.ЗаписатьТекст("""" + НомерСправочника);
	Писатель.ЗаписатьКонецЭлемента();
	Пока Выборка.Следующий() Цикл
		Если Выборка.ЭтоГруппа Тогда
			Писатель.ЗаписатьНачалоЭлемента(""group"");
		Иначе
			Писатель.ЗаписатьНачалоЭлемента(""item"");
		КонецЕсли;
		Писатель.ЗаписатьНачалоЭлемента(""id"");
		СтрокаСоСсылкой = ЗначениеВСтрокуВнутр(Выборка.ссылка);
		Писатель.ЗаписатьТекст(Сред(СтрокаСоСсылкой, 6, СтрДлина(СтрокаСоСсылкой) - 6));
		Писатель.ЗаписатьКонецЭлемента();
		Писатель.ЗаписатьНачалоЭлемента(""code"");
		Писатель.ЗаписатьТекст("""" + Выборка.Код);
		Писатель.ЗаписатьКонецЭлемента();
		Писатель.ЗаписатьНачалоЭлемента(""description"");
		Писатель.ЗаписатьТекст(Выборка.Наименование);
		Писатель.ЗаписатьКонецЭлемента();
		Писатель.ЗаписатьКонецЭлемента();
	КонецЦикла;
	Писатель.ЗаписатьКонецЭлемента();
	РезультатXML = Писатель.Закрыть();

	Трансформатор = Новый ПреобразованиеXSL;
	Трансформатор.ЗагрузитьИзФайла(КаталогXSLПреобразований + ""/refone.xsl"");
	РезультатHTML = Трансформатор.ПреобразоватьИзСтроки(РезультатXML);

	Возврат РезультатHTML;
	
КонецФункции
"}
},
{0,
{"Листинг 14.120. Файл стиля refone.xsl ",0,0,"14.120","<?xml version=""1.0""?>
<xsl:stylesheet xmlns:xsl=""http://www.w3.org/1999/XSL/Transform"" version=""1.0"">
	<xsl:template match=""reference"">
		<html>
			<head>
				<meta name=""GENERATOR"" content=""1C:Enterprise"" charset=""windows-1251"" />
				<meta http-equiv=""Content-Type"" content=""text/html"" />
				<title>Содержимое справочника.</title>
			</head>
			<body BGCOLOR=""#FFFFFF"" TEXT=""#000000"">
				<form ID=""Form1"">
					<xsl:apply-templates select=""name""/>
					<table width=""100%"" border=""1"" cellpadding=""0"" cellspacing=""1"">
						<tr align=""center"">
							<td><font size=""5"">Код</font></td>
							<td><font size=""5"">Наименование</font></td>
						</tr>
						<xsl:apply-templates select=""group""/>
						<xsl:apply-templates select=""item""/>
					</table>
				</form>
			</body>
		</html>
	</xsl:template>
	<xsl:template match=""name"">
		<H1 align=""center"">Справочник: <xsl:value-of select="".""/></H1>
	</xsl:template>
	<xsl:template match=""group"">
		<tr align=""center"">
			<td>
				<a href=""refone.asp?key={../code}&amp;group={id}"">
					<font size=""4""><xsl:value-of select=""code""/></font>
				</a>
			</td>
			<td>
				<a href=""refone.asp?key={../code}&amp;group={id}"">
					<font size=""4"">
						<xsl:value-of select=""description""/>
					</font>
				</a>
			</td>
		</tr>
	</xsl:template>
	<xsl:template match=""item"">
		<tr align=""center"">
			<td>
				<a href=""refitem.asp?key={../code}&amp;item={id}"">
					<xsl:value-of select=""code""/>
				</a>
			</td>
			<td>
				<a href=""refitem.asp?key={../code}&amp;item={id}"">
					<xsl:value-of select=""description""/>
				</a>
			</td>
		</tr>
	</xsl:template>
</xsl:stylesheet>
"}
},
{0,
{"Листинг 14.121. Пример использования ActiveX элемента управления",0,0,"14.121","Режим = РежимДиалогаВыбораФайла.Открытие;
ДиалогВыбораФайла = Новый ДиалогВыбораФайла(Режим);
ДиалогВыбораФайла.Фильтр = ""Все файлы (все)|*.*"";	
ДиалогВыбораФайла.Заголовок = ""Выберите медиа файл"";

Если ДиалогВыбораФайла.Выбрать()Тогда
	ПутьКМедиаФайлу = ДиалогВыбораФайла.ПолноеИмяФайла;

	// В зависимости от варианта объекта запись полного пути к файлу
	// производится либо в свойство FileName, либо в свойство URL.
	Попытка
		ЭлементыФормы.WMP.FileName = ПутьКМедиаФайлу;
	Исключение	
		ЭлементыФормы.WMP.URL = ПутьКМедиаФайлу;
	КонецПопытки;	
КонецЕсли;
"}
},
{0,
{"Листинг 14.122. Пример использования макета Active Document",0,0,"14.122","Договор = ПолучитьМакет(""Договор"");

// Получить объект из макета.
MSWord = Договор.Получить();
	
НаименованиеКонтрагента = ""ООО Торгуем всем"";

Попытка
	Документ = MSWord.Application.Documents(1);
	Документ.Activate();

	// Получить объект, который будем использовать для поиска и замены.
	Замена = Документ.Content.Find;

	// Заменить заранее определенные ключевые конструкции 
	// на требуемый текст.
	Замена.Execute(""<НазваниеКомпании>"", Ложь, Истина, Ложь, , , Истина, , Ложь, НаименованиеКонтрагента);

	// Далее аналогично для остальных ключевых конструкций.
      ...

	// Делаем видимым приложение и активизируем его.
	MSWord.Application.Visible = Истина;
	MSWord.Activate();

Исключение

	// Если произойдет ошибка выводятся данные об ошибке 
	// и объект закрывается.
	Сообщить (ОписаниеОшибки());
	MSWord.Application.Quit();
КонецПопытки;
"}
}
},
{80,
{"Глава 15. Создание распределенных информационных систем",1,0,"",""},
{0,
{"Листинг 15.1. Пример обработчика события ПередЗаписью",0,0,"15.1","Процедура ПередЗаписью()

	Узел = ПланыОбмена.УдаленныеСклады.НайтиПоКоду(""Особый"");
	ОбменДанными.Получатели.Удалить(Узел);

КонецПроцедуры
"}
},
{0,
{"Листинг 15.2. Пример изменения свойства Автозаполнение",0,0,"15.2","Узел = ПланыОбмена.УдаленныеСклады.НайтиПоКоду(""Оптовый"");
Объект.ОбменДанными.Получатели.Автозаполнение = Ложь;
Объект.ОбменДанными.Получатели.Добавить(Узел);
Объект.Записать();
"}
},
{0,
{"Листинг 15.3. Пример заполнения списка узлов",0,0,"15.3","Узел = ПланыОбмена.УдаленныеСклады.НайтиПоКоду(""Оптовый"");
Объект.ОбменДанными.Получатели.Добавить(Узел);
Объект.Записать();
"}
},
{0,
{"Листинг 15.4. Пример обработчика события ПередЗаписью",0,0,"15.4","Процедура ПередЗаписью(Отказ)
	
	Если ОбменДанными.Получатели.Автозаполнение Тогда
		ВключитьРегистрацию(ОбменДанными, Склад);

		// Проверка что изменился склад 
		Если Не ЭтоНовый() Тогда
			Запрос = Новый Запрос(""
			|ВЫБРАТЬ 
			|	Склад 
			|ИЗ 
			|	Документ.РасходнаяНакладная 
			|ГДЕ 
			|Ссылка = &ТекСсылка"");
			Запрос.УстановитьПараметр(""ТекСсылка"", Ссылка);

			Выборка = Запрос.Выполнить().Выбрать();
			Выборка.Следующий();
			Если Выборка.Склад <> Склад Тогда 
				ВключитьРегистрацию(ОбменДанными, Выборка.Склад);
			КонецЕсли;	
		КонецЕсли;	
	КонецЕсли;	
	
	// Выводим диагностическое сообщение о регистрации изменений
	ВывестиРегистрацию(ЭтотОбъект);
	
КонецПроцедуры
"}
},
{0,
{"Листинг 15.5. Процедура ВключитьРегистрацию",0,0,"15.5","Процедура ВключитьРегистрацию(ОбменДанными, Склад) Экспорт
	
	//Получение узлов для конкретного склада 
	Запрос = Новый Запрос;
	Запрос.Текст = ""ВЫБРАТЬ
				   |		УдаленныеСклады.Ссылка
				   |ИЗ
				   |		ПланОбмена.УдаленныеСклады КАК УдаленныеСклады
				   |ГДЕ
				   |		(УдаленныеСклады.Склад = &Склад ИЛИ 	УдаленныеСклады.Склад = &ПустойСклад) И УдаленныеСклады.Ссылка <> &ЭтотУзел"";
	  
	Запрос.УстановитьПараметр(""Склад"", Склад);  
	Запрос.УстановитьПараметр(""ПустойСклад"", Справочники.Склады.ПустаяСсылка());  
	Запрос.УстановитьПараметр(""ЭтотУзел"", ПланыОбмена.УдаленныеСклады.ЭтотУзел());  
	Выборка = Запрос.Выполнить().Выбрать();

	// Регистрация изменений для выбранных узлов
	Пока Выборка.Следующий() Цикл
		ОбменДанными.Получатели.Добавить(Выборка.Ссылка);
	КонецЦикла;
	
КонецПроцедуры
"}
},
{0,
{"Листинг 15.6. Регистрация изменений данных для указанного узла",0,0,"15.6","Узел = ПланыОбмена.УдаленныеСклады.НайтиПоКоду(""Новый"");
ПланыОбмена.ЗарегистрироватьИзменения(Узел);
"}
},
{0,
{"Листинг 15.7. Регистрация изменений элемента данных для указанных узлов",0,0,"15.7","Узлы = Новый Массив(2);
Узлы[0] = ПланыОбмена.УдаленныеСклады.НайтиПоКоду(""Оптовый"");
Узлы[1] = ПланыОбмена.УдаленныеСклады.НайтиПоКоду(""Розничный"");
Данные = Справочники.Номенклатура.НайтиПоКоду(""14"");
ПланыОбмена.ЗарегистрироватьИзменения(Узлы, Данные);
"}
},
{0,
{"Листинг 15.8. Регистрация изменений данных, относящихся к объекту метаданных",0,0,"15.8","Узлы = Новый Массив(2);
Узлы[0] = ПланыОбмена.УдаленныеСклады.НайтиПоКоду(""Оптовый"");
Узлы[1] = ПланыОбмена.УдаленныеСклады.НайтиПоКоду(""Розничный"");
ПланыОбмена.ЗарегистрироватьИзменения(Узлы, Метаданные.Справочники.Номенклатура);
"}
},
{0,
{"Листинг 15.9. Пример удаления записей таблицы регистрации",0,0,"15.9","ЧтениеXML = Новый ЧтениеXML;
ЧтениеXML.ОткрытьФайл(ИмяФайла);

// Загрузка из найденного файла
ЧтениеСообщения = ПланыОбмена.СоздатьЧтениеСообщения();
ЧтениеСообщения.НачатьЧтение(ЧтениеXML);

// Считаем что получен номер сообщения равный 2
НомерПринятого = ЧтениеСообщения.НомерПринятого;
ПланыОбмена.УдалитьРегистрациюИзменений(Узел, НомерПринятого);
"}
},
{0,
{"Листинг 15.10. Пример удаления записей таблицы регистрации",0,0,"15.10","Узел = ПланыОбмена.УдаленныеСклады.НайтиПоКоду(""Склад1"");
ПланыОбмена.УдалитьРегистрациюИзменений(Узел);
"}
},
{0,
{"Листинг 15.11. Пример удаления записей таблицы регистрации",0,0,"5.11","Узлы = Новый Массив(2);
Узлы[0] = ПланыОбмена.УдаленныеСклады.НайтиПоКоду(""Оптовый"");
Узлы[1] = ПланыОбмена.УдаленныеСклады.НайтиПоКоду(""Розничный"");
Данные = Справочники.Номенклатура.НайтиПоКоду(""14"");
ПланыОбмена.УдалитьРегистрациюИзменений(Узлы, Данные);
"}
},
{0,
{"Листинг 15.12. Пример удаления записей таблицы регистрации",0,0,"5.12","Узлы = Новый Массив(2);
Узлы[0] = ПланыОбмена.УдаленныеСклады.НайтиПоКоду(""Склад1"");
Узлы[1] = ПланыОбмена.УдаленныеСклады.НайтиПоКоду(""Склад2"");
ПланыОбмена.УдалитьРегистрациюИзменений(Узлы, Метаданные.Справочники.Номенклатура);
"}
},
{0,
{"Листинг 15.13. Пример сообщения обмена",0,0,"15.13","<v8msg:Message xmlns:v8msg=""http://v8.1c.ru/messages"">
	<v8msg:Header>
		<v8msg:ExchangePlan>УдаленныеСклады</v8msg:ExchangePlan>
		<v8msg:To>Склад1</v8msg:To>
		<v8msg:From>Офис</v8msg:From>
		<v8msg:MessageNo>20</v8msg:MessageNo>
		<v8msg:ReceivedNo>15</v8msg:ReceivedNo>
	</v8msg:Header>
	<v8msg:Body>
		<!— Тело сообщения -->
	</v8msg:Body>
</v8msg:Message>
"}
},
{0,
{"Листинг 15.14. Пример сообщения для выгрузки данных",0,0,"15.14","ЗаписьXML = Новый ЗаписьXML();
ЗаписьXML.ОткрытьФайл(""c:\выгрузка.xml"");
Узел = ПланыОбмена.УдаленныеСклады.НайтиПоКоду(""Оптовый"");

// Создаем объект «ЗаписьСообщенияОбмена»
ЗаписьСообщения = ПланыОбмена.СоздатьЗаписьСообщения();
ЗаписьСообщения.НачатьЗапись(ЗаписьXML, Узел);

// Запись тела сообщения
ЗаписьСообщения.ЗакончитьЗапись();
ЗаписьXML.Закрыть();
"}
},
{0,
{"Листинг 15.15. Пример чтения сообщения обмена",0,0,"15.15","// Создаем объект «ЧтениеСообщенияОбмена»
ЧтениеСообщения = ПланыОбмена.СоздатьЧтениеСообщения();
ЧтениеСообщения.НачатьЧтение(ЧтениеXML, ДопустимыйНомерСообщения.Больший);

// Чтение тела сообщения
ЧтениеСообщения.ЗакончитьЧтение();
ЧтениеXML.Закрыть();
"}
},
{0,
{"Листинг 15.16. Пример выгрузки данных",0,0,"15.16","ЗаписьXML = Новый ЗаписьXML()
ЗаписьXML.ОткрытьФайл(ИмяФайлаСообщения);
Узел = ПланыОбмена.УдаленныеСклады.НайтиПоКоду(КодУзла);
ЗаписьСообщения = ПланыОбмена.СоздатьЗаписьСообщения();
ЗаписьСообщения.НачатьЗапись(ЗаписьXML, Узел);
Выборка = ПланыОбмена.ВыбратьИзменения(Узел, ЗаписьСообщения.НомерСообщения);
Пока Выборка.Следующий() Цикл
	Данные = Выборка.Получить();
	ЗаписатьXML(ЗаписьXML, Данные);
КонецЦикла;
ЗаписьСообщения.ЗакончитьЗапись();
"}
},
{0,
{"Листинг 15.17. Удаление регистрации изменений при гарантированной доставке",0,0,"15.17","ПланыОбмена.УдалитьРегистрациюИзменений(Узел, НомерСообщения);"}
},
{0,
{"Листинг 15.18. Пример чтения сообщения обмена",0,0,"15.18","ЧтениеXML = Новый ЧтениеXML()
ЧтениеXML.ОткрытьФайл(ИмяФайлаСообщения);
ЧтениеСообщения = ПланыОбмена.СоздатьЧтениеСообщения();
ЧтениеСообщения.НачатьЧтение(ЧтениеXML);
ПланыОбмена.УдалитьРегистрациюИзменений(ЧтениеСообщения.Отправитель, ЧтениеСообщения.НомерСообщения);
Пока ВозможностьЧтенияXML(ЧтениеXML) Цикл
	Данные = ПрочитатьXML(ЧтениеXML);
	Данные.ОбменДанными.Отправитель = ЧтениеСообщения.Отправитель;
	Данные.ОбменДанными.Загрузка = Истина;
	Данные.Записать();
КонецЦикла;
ЧтениеСообщения.ЗакончитьЧтение();
"}
},
{0,
{"Листинг 15.19. Пример реализации стратегии главный - подчиненный",0,0,"15.19","ЧтениеXML = Новый ЧтениеXML()
ЧтениеXML.ОткрытьФайл(ИмяФайлаСообщения);
ЧтениеСообщения = ПланыОбмена.СоздатьЧтениеСообщения();
ЧтениеСообщения.НачатьЧтение(ЧтениеXML);
ПланыОбмена.УдалитьРегистрациюИзменений(ЧтениеСообщения.Отправитель, ЧтениеСообщения.НомерПринятого);
Отправитель = ЧтениеСообщения.Отправитель;
Главный = Отправитель.Главный;
Пока ВозможностьЧтенияXML(ЧтениеXML) Цикл
	Данные = ПрочитатьXML(ЧтениеXML);
	Если Главный ИЛИ (Не ПланыОбмена.ИзменениеЗарегистрировано(Отправитель, Данные)) Тогда
		Данные.ОбменДанными.Отправитель = ЧтениеСообщения.Отправитель;
		Данные.ОбменДанными.Загрузка = Истина;
		Данные.Записать();
	КонецЕсли;
КонецЦикла;
ЧтениеСообщения.ЗакончитьЧтение();
"}
},
{0,
{"Листинг 15.20. Обработчик события ПередЗаписью документа РасходнаяНакладная",0,0,"15.20","Процедура ПередЗаписью(Отказ)
	
	Если ОбменДанными.Получатели.Автозаполнение Тогда
		ВключитьРегистрацию(ОбменДанными, Склад);

		// Проверка что изменился склад 
		Если Не ЭтоНовый() Тогда
			
			Запрос = Новый Запрос(""
					|ВЫБРАТЬ 
					|	Склад 
					|ИЗ 
					|	Документ.РасходнаяНакладная 
					|ГДЕ 
					|	Ссылка = &ТекСсылка"");
			Запрос.УстановитьПараметр(""ТекСсылка"", Ссылка);
			Выборка = Запрос.Выполнить().Выбрать();
			Выборка.Следующий();
			Если Выборка.Склад <> Склад Тогда 
				ВключитьРегистрацию(ОбменДанными, Выборка.Склад);
			КонецЕсли;	
		КонецЕсли;	
	КонецЕсли;	
	
	// Выводим диагностическое сообщение о регистрации изменений
	ВывестиРегистрацию(ЭтотОбъект);
	
КонецПроцедуры 
"}
},
{0,
{"Листинг 15.21. Обработчик события ПередЗаписью набора записей регистра УчетНоменклатуры",0,0,"15.21","Процедура ПередЗаписью(Отказ)
	
	Если ОбменДанными.Получатели.Автозаполнение Тогда
		СкладНабора = Неопределено;

		// Для каждой записи набора
		Для Каждого Запись Из ЭтотОбъект  Цикл
			Если СкладНабора = Неопределено ИЛИ Запись.Склад <> СкладНабора Тогда
				ВключитьРегистрацию(ОбменДанными, Запись.Склад);
			КонецЕсли;	
			СкладНабора = Запись.Склад;
		КонецЦикла;
		
		// Проверка что изменился склад 
		Запрос = Новый Запрос;
		Запрос.Текст = ""ВЫБРАТЬ Различные 
						|	Склад 
						|ИЗ 
						|	РегистрНакопления.УчетНоменклатуры 
						|ГДЕ 
						|	Регистратор = &ТекСсылка"";
		Запрос.УстановитьПараметр(""ТекСсылка"", Отбор.Регистратор.Значение);
		Выборка = Запрос.Выполнить().Выбрать();
		Пока Выборка.Следующий() Цикл
			
			// Включаем регистрацию изменений для 
			ВключитьРегистрацию(ОбменДанными, Выборка.Склад);
			
		КонецЦикла;	
	КонецЕсли;	
	
	// Выводим диагностическую информацию по набору записей
	ВывестиРегистрацию(ЭтотОбъект);
		
КонецПроцедуры 
"}
},
{0,
{"Листинг 15.22. Процедура ВывестиРегистрацию",0,0,"15.22","Процедура ВывестиРегистрацию(Данные) Экспорт
	
	ОбменДанными = Данные.ОбменДанными;
	Сообщить("" - Регистрация "" + Данные.Метаданные() + "": "" + Строка(Данные));

	//Вывод списка узлов куда будет выполняться регистрация
	Для Каждого Получатель Из ОбменДанными.Получатели Цикл
		Если Не ОбменДанными.Отправитель = Получатель Тогда 
			Сообщить("" - "" + Получатель);
		КонецЕсли;	
	КонецЦикла;
	
КонецПроцедуры
"}
},
{0,
{"Листинг 15.23. Процедура ВключитьРегистрацию",0,0,"15.23","Процедура ВключитьРегистрацию(ОбменДанными, Склад) Экспорт
	
	//Получение узлов для конкретного склада 
	Запрос = Новый Запрос;
	Запрос.Текст = ""ВЫБРАТЬ
				   |		УдаленныеСклады.Ссылка
				   |ИЗ
				   |		ПланОбмена.УдаленныеСклады КАК УдаленныеСклады
				   |
				   |ГДЕ
				   |		(УдаленныеСклады.Склад = &Склад ИЛИ	УдаленныеСклады.Склад = &ПустойСклад) И УдаленныеСклады.Ссылка <> &ЭтотУзел"";
	  
	Запрос.УстановитьПараметр(""Склад"", Склад);  
	Запрос.УстановитьПараметр(""ПустойСклад"", Справочники.Склады.ПустаяСсылка());  
	Запрос.УстановитьПараметр(""ЭтотУзел"", ПланыОбмена.УдаленныеСклады.ЭтотУзел());  
	Выборка = Запрос.Выполнить().Выбрать();

	// Регистрация изменений для выбранных узлов
	Пока Выборка.Следующий() Цикл
		ОбменДанными.Получатели.Добавить(Выборка.Ссылка);
	КонецЦикла;
	
КонецПроцедуры
"}
},
{0,
{"Листинг 15.24. Полная регистрация изменений для узла",0,0,"15.24","Процедура ПолнаяРегистрацияДанныхПоУзлу(Узел, РегистрироватьВсе) Экспорт
	
	// Регистрация изменений всех данных для узла производится в случае
	// значения параметра РегистрироватьВсе = Истина или
	// значение склада в узле не установлено
	Если РегистрироватьВсе Или Узел.Склад.Пустая() Тогда
		Сообщить(""Регистрация всех данных по узлу "" + Узел);
		ПланыОбмена.ЗарегистрироватьИзменения(Узел);  
	Иначе
		Сообщить(""Регистрация данных по узлу "" + Узел + "" -----------"");
		ПланОбмена = Узел.Метаданные();
		Состав = ПланОбмена.Состав;
		Для Каждого ЭлементСостава Из Состав Цикл
			Сообщить(""   Регистрация данных "" + ЭлементСостава.Метаданные + "" по узлу "" + Узел);
			Если ЭлементСостава.Метаданные = Метаданные.Документы.РасходнаяНакладная Тогда
				
				// Для документов РасходнаяНакладная регистрация изменений 
				// для узла производится только при совпадении складов узла
				// и накладной
				// Выбираем документы РасходнаяНакладная по складу узла
				Запрос = Новый Запрос(""ВЫБРАТЬ 
									|	Ссылка 
									|ИЗ 
									|	Документ.РасходнаяНакладная
									|ГДЕ 
									|	Склад = &Склад"");
				Запрос.УстановитьПараметр(""Склад"", Узел.Склад);
				Выборка = Запрос.Выполнить().Выбрать();
				Пока Выборка.Следующий() Цикл
					
					// регистрируем изменение документа для узла
					ПланыОбмена.ЗарегистрироватьИзменения(Узел, Выборка.Ссылка);  
				КонецЦикла;
			ИначеЕсли ЭлементСостава.Метаданные = Метаданные.РегистрыНакопления.УчетНоменклатуры Тогда
				
				// Выбираем всех различных регистраторов регистра
				Запрос = Новый Запрос(""ВЫБРАТЬ РАЗЛИЧНЫЕ 
									|	Регистратор 
									|ИЗ 
									|	РегистрНакопления.УчетНоменклатуры
									|ГДЕ 
									|	Склад = &Склад"");
				Запрос.УстановитьПараметр(""Склад"", Узел.Склад);
				Выборка = Запрос.Выполнить().Выбрать();
				Пока Выборка.Следующий() Цикл
					
					// Создаем набор записей регистра с отбором 
					// по регистратору
					НаборЗаписей = РегистрыНакопления.УчетНоменклатуры.СоздатьНаборЗаписей();
					НаборЗаписей.Отбор.Регистратор.Установить(Выборка.Регистратор);

					// регистрируем изменения набора записей для узла
					ПланыОбмена.ЗарегистрироватьИзменения(Узел, НаборЗаписей);
				КонецЦикла;
			Иначе	
				
			// Регистрация изменений всех данных объекта для узла
			ПланыОбмена.ЗарегистрироватьИзменения(Узел, ЭлементСостава.Метаданные);  
			КонецЕсли;	
		КонецЦикла; // обход состава плана обмена
	КонецЕсли;	
	
КонецПроцедуры
"}
},
{0,
{"Листинг 15.25. Удаление регистрации изменений для узла",0,0,"15.25","Процедура ПолноеУдалениеРегистрацииДанныхПоУзлу(Узел) Экспорт
	
	Сообщить(""Удаление регистрации всех данных по узлу "" + Узел);
	ПланыОбмена.УдалитьРегистрациюИзменений(Узел);  
	
КонецПроцедуры 
"}
},
{0,
{"Листинг 15.26. Процедура, инициирующая выгрузку данных",0,0,"15.26","Процедура ВыполнитьВыгрузкуНажатие(Элемент)
	
	// Получаем объект узла обмена
	УзелОбмена = Узел.ПолучитьОбъект();

	// Записываем новое сообщение обмена
	УзелОбмена.ЗаписатьСообщениеСИзменениями();
	
КонецПроцедуры 
"}
},
{0,
{"Листинг 15.27. Процедура ЗаписатьСообщениеСИзменениями",0,0,"15.27","Процедура ЗаписатьСообщениеСИзменениями() Экспорт
	
	// Формируем имя временного файла
	ИмяФайла = КаталогВременныхФайлов() + ""\"" + ПолучитьИмяФайлаОбмена(ПланыОбмена.УдаленныеСклады.ЭтотУзел(), Ссылка, ""_W"");
	Сообщить(""-------- Выгрузка в узел "" + Строка(ЭтотОбъект) + "" ------------"");
	
	// Записываем новое сообщение обмена в файл
	НомерСообщения = ЗаписатьНовоеСообщение(ИмяФайла);
	
	// Публикуем файл с сообщением обмена
	ОпубликоватьФайлОбмена(ИмяФайла, НомерСообщения);
		
	Попытка

		// Удаляем файл с сообщением обмена
		УдалитьФайлы(ИмяФайла);
	Исключение
	КонецПопытки;	
	Сообщить(""-------- Конец выгрузки------------"");
	
КонецПроцедуры 
"}
},
{0,
{"Листинг 15.28. Функция ПолучитьИмяФайлаОбмена",0,0,"15.28","Функция ПолучитьИмяФайлаОбмена(УзелИсточник, УзелПриемник, Постфикс = """") Экспорт
	
	// формируем имя файла, исходя из кодов источника и приемника
	// сообщения обмена
	Возврат ""Message"" + СокрЛП(УзелИсточник.Код) + ""_"" + СокрЛП(УзелПриемник.Код) + СокрЛП(Постфикс) + "".xml"";
	
КонецФункции 
"}
},
{0,
{"Листинг 15.29. Функция ЗаписатьНовоеСообщение",0,0,"15.29","Функция ЗаписатьНовоеСообщение(ИмяФайла)
	
	НомерСообщения = 0;

	// Создаем объект записи XML
	ЗаписьXML = Новый ЗаписьXML;
	ЗаписьXML.ОткрытьФайл(ИмяФайла);
	ЗаписьXML.ЗаписатьОбъявлениеXML();
	
	// Создаем новое сообщение
	ЗаписьСообщения = ПланыОбмена.СоздатьЗаписьСообщения();
	ЗаписьСообщения.НачатьЗапись(ЗаписьXML, Ссылка);
	
	// Для сокращения размера файла сообщения записываем 
	// соответствие пространств имен
	ЗаписьXML.ЗаписатьСоответствиеПространстваИмен(""xsd"", ""http://www.w3.org/2001/XMLSchema"");
	ЗаписьXML.ЗаписатьСоответствиеПространстваИмен(""xsi"", ""http://www.w3.org/2001/XMLSchema-instance"");
	ЗаписьXML.ЗаписатьСоответствиеПространстваИмен(""v8"", ""http://v8.1c.ru/data"");
	
	НомерСообщения = ЗаписьСообщения.НомерСообщения;
	Сообщить(""    Номер сообщения: "" + НомерСообщения);
	
	// Получаем выборку изменённых данных
	Счетчик = 0;
	ВыборкаИзменений = ПланыОбмена.ВыбратьИзменения(ЗаписьСообщения.Получатель, НомерСообщения);
	Пока ВыборкаИзменений.Следующий() Цикл
		Данные = ВыборкаИзменений.Получить();
#Если Клиент Тогда
		Счетчик = Счетчик + 1;
		Состояние(""Выгрузка данных: "" + Строка(Счетчик));
#КонецЕсли

		// Если перенос данных не нужен, то, возможно, 
		// необходимо записать удаление данных
		Если Не НуженПереносДанных(Данные) Тогда
			
			// Получаем значение с возможным удалением данных
			УдалениеДанных(Данные); 
		КонецЕсли;	
		
		// Записываем данные в сообщение
		ЗаписатьДанные(ЗаписьXML, Данные);
#Если Клиент Тогда

		// Выводим диагностическое сообщение о записанных данных
		ВывестиДанные(Данные);

#КонецЕсли
	КонецЦикла;
	
	// Завершаем запись сообщения
	ЗаписьСообщения.ЗакончитьЗапись();
	ЗаписьXML.Закрыть();
	Возврат НомерСообщения;
	
КонецФункции
"}
},
{0,
{"Листинг 15.30. Функция НуженПереносДанных",0,0,"15.30","Функция НуженПереносДанных(Данные)
	
	Перенос = Истина;
	Если ТипЗнч(Данные) = Тип(""ДокументОбъект.ПриходнаяНакладная"") ИЛИ ТипЗнч(Данные) = Тип(""ДокументОбъект.РасходнаяНакладная"") Тогда
		
		// Проверяем, что у документов склад совпадает  
		Если Не Склад.Пустая() И Данные.Склад <> Склад Тогда
			Перенос = Ложь;
		КонецЕсли;	
	ИначеЕсли ТипЗнч(Данные) = Тип(""РегистрНакопленияНаборЗаписей.УчетНоменклатуры"") Тогда
		
		// Проверяем, что у записей набора склад совпадает
		СкладНабора = Неопределено;
		Для Каждого Запись Из Данные  Цикл
			Если СкладНабора <> Неопределено И Запись.Склад <> СкладНабора Тогда
				ВызватьИсключение ""Склад должен быть 
									| одинаковый для всех записей"";
			КонецЕсли;	
			СкладНабора = Запись.Склад;
		КонецЦикла;
		Если Не Склад.Пустая() И СкладНабора <> Склад Тогда
			Перенос = Ложь;
		КонецЕсли;	
	КонецЕсли;
	Возврат Перенос;
	
КонецФункции
"}
},
{0,
{"Листинг 15.31. Процедура ЗаписатьДанные",0,0,"15.31","Процедура ЗаписатьДанные(ЗаписьXML, Данные)
	
	Удаление = ?(ТипЗнч(Данные) = Тип(""УдалениеОбъекта""), Истина, Ложь);

	// Получаем объект описания метаданного, соответствующий данным
	ОбъектМетаданных = ?(Удаление, Данные.Ссылка.Метаданные(), Данные.Метаданные());
	
	// Если выгружаемыми данными является Справочник.Номенклатура, 
	// то его выгружаем вручную
	Если Не Удаление И ОбъектМетаданных = Метаданные.Справочники.Номенклатура Тогда
		
		// Записываем элемент справочника вручную
		НоменклатураЗаписатьXML(ЗаписьXML, Данные);
	Иначе
		
		// Записываем данные с помощью стандартного метода
		ЗаписатьXML(ЗаписьXML, Данные);
		
	КонецЕсли
	
КонецПроцедуры
"}
},
{0,
{"Листинг 15.32. Процедура ВывестиДанные",0,0,"15.32","Процедура ВывестиДанные(Данные)
	
	Перем Представление;
	Если ТипЗнч(Данные) = Тип(""УдалениеОбъекта"") Тогда
		Представление = ""Удаление объекта: "" + Строка(Данные.Ссылка.Метаданные()) + "": "" + Строка(Данные.Ссылка);
	Иначе					
		Представление = Строка(Данные.Метаданные()) + "": "" + Строка(Данные);		
	КонецЕсли;
	Сообщить(""- "" + Представление);
	
КонецПроцедуры
"}
},
{0,
{"Листинг 15.33. Процедура УдалениеДанных",0,0,"15.33","Процедура УдалениеДанных(Данные) 
	
	// Получаем объект описания метаданного, соответствующий данным
	ОбъектМетаданных = ?(ТипЗнч(Данные) = Тип(""УдалениеОбъекта""), Данные.Ссылка.Метаданные(), Данные.Метаданные());
	Если Метаданные.Справочники.Содержит(ОбъектМетаданных) ИЛИ Метаданные.Документы.Содержит(ОбъектМетаданных) ИЛИ Метаданные.ПланыСчетов.Содержит(ОбъектМетаданных) ИЛИ Метаданные.ПланыВидовРасчета.Содержит(ОбъектМетаданных) ИЛИ Метаданные.ПланыВидовХарактеристик.Содержит(ОбъектМетаданных) Тогда
		
		// Перенос удаления объекта для объектных
		Данные = Новый УдалениеОбъекта(Данные.Ссылка);
		
	ИначеЕсли Метаданные.РегистрыСведений.Содержит(ОбъектМетаданных) ИЛИ Метаданные.РегистрыНакопления.Содержит(ОбъектМетаданных) ИЛИ Метаданные.РегистрыБухгалтерии.Содержит(ОбъектМетаданных) ИЛИ Метаданные.РегистрыРасчета.Содержит(ОбъектМетаданных) ИЛИ Метаданные.РегистрыРасчета.Содержит(ОбъектМетаданных.Родитель) ИЛИ Метаданные.Последовательности.Содержит(ОбъектМетаданных) Тогда
		
		// Очищаем данные
		Данные.Очистить();
		
	КонецЕсли;	
	
КонецПроцедуры
"}
},
{0,
{"Листинг 15.34. Процедура ОпубликоватьФайлОбмена",0,0,"15.34","Процедура ОпубликоватьФайлОбмена(ИмяФайла, НомерСообщения)
	
	ИмяФайлаСообщения = ПолучитьИмяФайлаОбмена(ПланыОбмена.УдаленныеСклады.ЭтотУзел(), Ссылка, Формат(НомерСообщения, ""ЧЦ=10; ЧВН=; ЧГ=0""));
	Путь = СтрЗаменить(АдресОбмена, ""\"", ""/"");

	// Копируем файл в каталог, определенный для данного узла
	Попытка
		КопироватьФайл(ИмяФайла, Путь + ?(Прав(Путь, 1) = ""/"", """", ""/"") + ИмяФайлаСообщения);
	Исключение
		Сообщить("" - Ошибка публикации файла: "" + ИмяФайлаСообщения);
		Сообщить(ОписаниеОшибки());
		Возврат;
	КонецПопытки;
	Сообщить("" - Опубликован файл: "" + ИмяФайлаСообщения);
	
КонецПроцедуры 
"}
},
{0,
{"Листинг 15.35. Процедура, инициирующая загрузку данных",0,0,"15.35","Процедура ВыполнитьЗагрузкуНажатие(Элемент)
	
	// Получаем объект узла обмена
	УзелОбмена = Узел.ПолучитьОбъект();

	// Читаем новое сообщение обмена
	УзелОбмена.ПрочитатьСообщениеСИзменениями();
	
КонецПроцедуры 
"}
},
{0,
{"Листинг 15.36. Процедура ПрочитатьСообщениеСИзменениями",0,0,"15.36","Процедура ПрочитатьСообщениеСИзменениями() Экспорт
	
	Перем НомерСообщения;	// Номер принимаемого сообщения
	
	// Формируем имя временного файла
	ИмяФайла = КаталогВременныхФайлов() + ""\"" + ПолучитьИмяФайлаОбмена(ПланыОбмена.УдаленныеСклады.ЭтотУзел(), Ссылка, ""_R"");
	Сообщить(""-------- Загрузка из "" + Строка(ЭтотОбъект) + ""------------"");
	
	// Получаем копию файла обмена с новым сообщением во временный файл
	ФайлПолучен = ПолучитьФайлОбмена(ИмяФайла);
		
	Если ФайлПолучен Тогда
		Попытка
			
			// Читаем полученное сообщение из файла	
			НомерСообщения = ПрочитатьНовоеСообщение(ИмяФайла);
			
		Исключение
			Сообщить(""    "" + ОписаниеОшибки());
		КонецПопытки;
		Если НомерСообщения <> Неопределено Тогда
			
			// Удаляем файлы со старыми сообщениями обмена
			УдалитьФайлыОбмена(НомерСообщения);
		КонецЕсли;
	КонецЕсли;
	Попытка
		
		// Удаляем файл с сообщением обмена
		УдалитьФайлы(ИмяФайла);
		
	Исключение
	КонецПопытки;
	Сообщить(""-------- Конец загрузки------------"");
	
КонецПроцедуры 
"}
},
{0,
{"Листинг 15.37. Функция ПолучитьФайлОбмена",0,0,"15.37","Функция ПолучитьФайлОбмена(ИмяФайла)
	
	// Получаем маску для поиска файлов с сообщениями обмена
	МаскаФайлов = ПолучитьИмяФайлаОбмена(Ссылка, ПланыОбмена.УдаленныеСклады.ЭтотУзел(), ""??????????"");
	ИмяФайлаСообщения = """";

	// Ищем файлы по маске в каталоге загрузки
	Файлы = НайтиФайлы(АдресОбмена, МаскаФайлов);

	// Отбираем файл с максимальным номером в имени
	Для Каждого Файл Из Файлы Цикл
		Если ПустаяСтрока(ИмяФайлаСообщения) ИЛИ Файл.ПолноеИмя > ИмяФайлаСообщения Тогда
			ИмяФайлаСообщения = Файл.ПолноеИмя;
		КонецЕсли;	
	КонецЦикла;
	Если Не ПустаяСтрока(ИмяФайлаСообщения) Тогда
		Сообщить("" - Считывается файл "" + ИмяФайлаСообщения);
		Попытка
			
			// Копируем файл с сообщением обмена в указанный файл
			КопироватьФайл(ИмяФайлаСообщения, ИмяФайла);
			
		Исключение
			Сообщить(""   "" + ОписаниеОшибки());
			Возврат Ложь;
		КонецПопытки;
		
		// Файл с сообщением обмена получен успешно
		Возврат Истина;
		
	КонецЕсли;	
	Возврат Ложь;
	
КонецФункции 
"}
},
{0,
{"Листинг 15.38. Функция ПрочитатьНовоеСообщение",0,0,"15.38","Функция ПрочитатьНовоеСообщение(ИмяФайла)
	
	// Создаем объект чтения XML
	ЧтениеXML = Новый ЧтениеXML;
	ЧтениеXML.ОткрытьФайл(ИмяФайла);
	
	// Загрузка из найденного файла
	ЧтениеСообщения = ПланыОбмена.СоздатьЧтениеСообщения();
	ЧтениеСообщения.НачатьЧтение(ЧтениеXML);
	НомерСообщения = ЧтениеСообщения.НомерСообщения;
	Если ЧтениеСообщения.Отправитель <> Ссылка Тогда
		
		// Сообщение предназначено не для этого узла
		ВызватьИсключение ""Неверный узел"";
	КонецЕсли;
	
	// Удаляем регистрацию изменений для узла отправителя сообщения
	// по номеру принятого сообщения, полученного из сообщения
	ПланыОбмена.УдалитьРегистрациюИзменений(ЧтениеСообщения.Отправитель, ЧтениеСообщения.НомерПринятого);
	
	// Читаем данные из сообщения пока это возможно
	Счетчик = 0;
	Пока ВозможностьЧтенияДанных(ЧтениеXML) Цикл
		
		// Читаем очередное значение
		Данные = ПрочитатьДанные(ЧтениеXML);
#Если Клиент Тогда
		Счетчик = Счетчик + 1;
		Состояние(""Загрузка данных: "" + Строка(Счетчик));
#КонецЕсли		

		// Разрешение коллизий при одновременном изменении в обоих узлах
		Если Не ЧтениеСообщения.Отправитель.Главный И ПланыОбмена.ИзменениеЗарегистрировано(ЧтениеСообщения.Отправитель, Данные) Тогда
			Сообщить(""- Изменения отклонены:"");
#Если Клиент Тогда
			ВывестиДанные(Данные);
#КонецЕсли		
			Продолжить;
		КонецЕсли;
		
		// Вывод диагностического сообщения о загружаемых данных
		ВывестиДанные(Данные);

		// Устанавливаем отправителя, чтобы для него при записи 
		// не было бы зарегистрировано изменение
		Данные.ОбменДанными.Отправитель = ЧтениеСообщения.Отправитель;

		// Включает режим Загрузка, так как данные могут загружаться
		// в произвольном порядке и нужно отключить такой контроль данных,
		// как проверка уникальности номеров
		Данные.ОбменДанными.Загрузка = Истина;

		// Запись перенесенных данных
		Данные.Записать();
		
	КонецЦикла;
	ЧтениеСообщения.ЗакончитьЧтение();
	ЧтениеXML.Закрыть();
	Возврат НомерСообщения;
	
КонецФункции
"}
},
{0,
{"Листинг 15.39. Функция ВозможностьЧтенияДанных",0,0,"15.39","Функция ВозможностьЧтенияДанных(ЧтениеXML)
	
	// Получаем тип данных XML, который может быть считан в данный момент
	ТипXML = ПолучитьXMLТип(ЧтениеXML);

	Если ТипXML = Неопределено Тогда
		Возврат Ложь;
	КонецЕсли;
	Если ТипXML.ИмяТипа = ""CatalogObject.Номенклатура.Вручную"" И ТипXML.URIПространстваИмен = """" Тогда
		Возврат Истина;
	КонецЕсли;
	Возврат ВозможностьЧтенияXML(ЧтениеXML);
	
КонецФункции
"}
},
{0,
{"Листинг 15.40. Функция ПрочитатьДанные",0,0,"15.40","Функция ПрочитатьДанные(ЧтениеXML)
	
	ТипXML = ПолучитьXMLТип(ЧтениеXML);
	Если ТипXML = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	Если ТипXML.ИмяТипа = ""CatalogObject.Номенклатура.Вручную"" И ТипXML.URIПространстваИмен = """" Тогда
		
		// Пытаемся прочесть значение справочника Номеклатура
		Возврат НомеклатураПрочитатьXML(ЧтениеXML);
		
	КонецЕсли;
	
	// Пытаемся прочесть значение из объекта ЧтениеXML стандартным образом
	Возврат ПрочитатьXML(ЧтениеXML);
	
КонецФункции
"}
},
{0,
{"Листинг 15.41. Процедура УдалитьФайлыОбмена",0,0,"15.41","Процедура УдалитьФайлыОбмена(НомерСообщения)
	
	// Получаем имя файла с номером сообщения
	МаксИмяФайла = ПолучитьИмяФайлаОбмена(Ссылка, ПланыОбмена.УдаленныеСклады.ЭтотУзел(), Формат(НомерСообщения, ""ЧЦ=10; ЧВН=; ЧГ=0"")); 

	// Получаем маску для поиска файлов с сообщениями обмена
	МаскаФайлов = ПолучитьИмяФайлаОбмена(Ссылка, ПланыОбмена.УдаленныеСклады.ЭтотУзел(), ""??????????"");
	
	// Ищем файлы по маске в каталоге загрузки
	Файлы = НайтиФайлы(АдресОбмена, МаскаФайлов);

	// Удаление файлов со старыми сообщениями обмена
	Для Каждого Файл Из Файлы Цикл
		
		// Удаляем только файлы, имена которых меньше или равны
		// имени файла с указанным номером сообщения
		Если Файл.Имя <= МаксИмяФайла Тогда
			Попытка
				
				// Пытаемся удалить файл
				УдалитьФайлы(Файл.ПолноеИмя);
				
			Исключение
			КонецПопытки;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры
"}
},
{0,
{"Листинг 15.42. Процедура ЗарегистрироватьПриходные",0,0,"15.42","Процедура ЗарегистрироватьПриходные(Узлы)

	Выборка = Документы.ПриходнаяНакладная.Выбрать();
	Пока Выборка.Следующий() Цикл
		Объект = Выборка.ПолучитьОбъект();

		// заполняем набор узлов-получателей
		Объект.ОбменДанными.Получатели.АвтоЗаполнение = Ложь;
		ЗаполнитьНаборУзлов(Объект.ОбменДанными.Получатели, Узлы);

		// записываем элемент данных
		Объект.Записать();
		
	КонецЦикла;
КонецПроцедуры
"}
},
{0,
{"Листинг 15.43. Процедура ЗаполнитьНаборУзлов",0,0,"15.43","Процедура ЗаполнитьНаборУзлов(Набор, Список)

	Набор.Очистить();
	Для каждого Элемент Из Список Цикл
		Набор.Добавить(Элемент);
	КонецЦикла;    

КонецПроцедуры
"}
},
{0,
{"Листинг 15.44. Процедура ЗарегистрироватьПриходные",0,0,"15.44","Процедура ЗарегистрироватьПриходные(Узлы)

	Выборка = Документы.РасходнаяНакладная.Выбрать();
	Пока Выборка.Следующий() Цикл
		Объект = Выборка.ПолучитьОбъект();

		// набор узлов-получателей заполнится автоматически
		Объект.ОбменДанными.Получатели.АвтоЗаполнение = Истина;

		// записываем элемент данных
		Объект.Записать();
		
	КонецЦикла;

КонецПроцедуры
"}
},
{0,
{"Листинг 15.45. Пример вызова метода ЗаписатьИзменения()",0,0,"15.45","ПланыОбмена.ЗаписатьИзменения(ЗаписьСообщения, 0);"}
},
{0,
{"Листинг 15.46. Пример вызова метода ПрочитатьИзменения",0,0,"15.46","ПланыОбмена.ПрочитатьИзменения(ЧтениеСообщения);"}
},
{0,
{"Листинг 15.47. Пример структуры сообщения обмена",0,0,"15.47","<v8msg:Message xmlns:v8msg=""http://v8.1c.ru/messages"">
	<v8msg:Header>
		<v8msg:ExchangePlan>УдаленныеСклады</v8msg:ExchangePlan>
		<v8msg:To>Склад1</v8msg:To>
		<v8msg:From>Офис</v8msg:From>
		<v8msg:MessageNo>20</v8msg:MessageNo>
		<v8msg:ReceivedNo>15</v8msg:ReceivedNo>
	</v8msg:Header>
	<v8msg:Body>
		<v8de:Changes xmlns:v8de=""http://v8.1c.ru/dataexchange"">
			<v8de:Signature>7b4d5320-f69c-4a7b-9273-ff56607fc8ab</v8de:Signature>
			<v8de:Config xmlns:v8md=""http://v8.1c.ru/metadata"">
				<!— Измененные объекты конфигурации -->
				<v8de:Digest1>88d3f3a6ba3f4df03c7ec00f154837fc</v8de:Digest1>
				<v8de:Digest2>00cf636b02a488103a64c7a2cf81069e</v8de:Digest2>
			</v8de:Config>
			<v8de:Nodes>
				<v8de:Node>
					<!— Данные главного узла -->
				</v8de:Node>
				<v8de:Node>
					<!— Данные подчиненного узла -->
				</v8de:Node>
			</v8de:Nodes>
			<v8de:Data>
				<!— Измененные элементы данных -->
			</v8de:Data>
		</v8de:Changes>
	</v8msg:Body>
</v8msg:Message>
"}
},
{0,
{"Листинг 15.48. Пример использования метода СоздатьНачальныйОбраз()",0,0,"15.48","ПланыОбмена.СоздатьНачальныйОбраз(Узел, СтрокаСоединения);"}
},
{0,
{"Листинг 15.49. Пример создания начального образа",0,0,"15.49","Узел = ПланыОбмена.Магазины.НайтиПоКоду(""Оптовый"");
ПланыОбмена.СоздатьНачальныйОбраз(Узел, СтрокаСоединения);
"}
},
{0,
{"Листинг 15.50. Установка главного узла",0,0,"15.40","ГлавныйУзел = ПланыОбмена.Магазины.НайтиПоКоду(""ЦентрОфис"");
ПланыОбмена.УстановитьГлавныйУзел(ГлавныйУзел);
"}
},
{0,
{"Листинг 15.51. Пример регистрации изменений данных для узла",0,0,"15.51","Узел = ПланыОбмена.Магазины.НайтиПоКоду(""Магазин"");
ПланыОбмена.ЗарегистрироватьИзменения(Узел, Неопределено);
"}
},
{0,
{"Листинг 15.52. Установка главного узла",0,0,"15.52","ГлавныйУзел=ПланыОбмена.Магазины.НайтиПоКоду(""ЦентрОфис"");
ПланыОбмена.УстановитьГлавныйУзел(ГлавныйУзел);
"}
},
{0,
{"Листинг 15.53. Пример записи сообщения обмена",0,0,"15.53","ЗаписьXML.ОткрытьФайл(""c:\out.xml"");
ЗаписьXML.ЗаписатьОбъявлениеXML();
	
// Создаем новое сообщение
Узел = ПланыОбмена.Магазины.НайтиПоКоду(""Магазин"");
ЗаписьСообщения = ПланыОбмена.СоздатьЗаписьСообщения();
ЗаписьСообщения.НачатьЗапись(ЗаписьXML, Узел);
	
// Пишем изменения
ПланыОбмена.ЗаписатьИзменения(ЗаписьСообщения, 1000);
	
ЗаписьСообщения.ЗакончитьЗапись();
ЗаписьXML.Закрыть();
"}
},
{0,
{"Листинг 15.54. Пример чтения сообщения обмена",0,0,"15.54","// Создаем объект чтения XML
ЧтениеXML = Новый ЧтениеXML;
ЧтениеXML.ОткрытьФайл(""c:\out.xml"");
	
// Загрузка из найденного файла
ЧтениеСообщения = ПланыОбмена.СоздатьЧтениеСообщения();
ЧтениеСообщения.НачатьЧтение(ЧтениеXML);
	
// Читаем изменения
ПланыОбмена.ПрочитатьИзменения(ЧтениеСообщения,1000);
	
ЧтениеСообщения.ЗакончитьЧтение();
ЧтениеXML.Закрыть();
"}
},
{0,
{"Листинг 15.55. Пример назначения префикса",0,0,"15.55","Процедура ПриУстановкеНовогоКода(СтандартнаяОбработка, Префикс)

	Префикс = Константы.ПрефиксНомеров.Получить();

КонецПроцедуры 
"}
},
{0,
{"Листинг 15.56. Процедура ПриОтправкеДанныхПодчиненному",0,0,"15.56","Процедура ПриОтправкеДанныхПодчиненному(ЭлементДанных, ОтправкаЭлемента)

	ТипДанных = ТипЗнч(ЭлементДанных);
	Если ТипДанных = Тип(""ДокументОбъект.РасходнаяНакладная"") Тогда
		Если ЭлементДанных.Склад <> Склад Тогда
			ОтправкаЭлемента = ОтправкаЭлементаДанных.Удалить;
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры
"}
},
{0,
{"Листинг 15.57. Процедура ПриПолученииДанныхОтПодчиненного",0,0,"15.57","Процедура ПриПолученииДанныхОтПодчиненного(ЭлементДанных,ПолучениеЭлемента, ОтправкаНазад)

	ТипДанных = ТипЗнч(ЭлементДанных);
	Если ТипДанных = Тип(""ДокументОбъект.РасходнаяНакладная"") Тогда
		Если ЭлементДанных.Склад <> Склад Тогда
			ОтправкаНазад = Истина;
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры
"}
},
{0,
{"Листинг 15.58. Процедура ПриПолученииДанныхОтПодчиненного",0,0,"15.58","Процедура ПриПолученииДанныхОтПодчиненного(ЭлементДанных,  ПолучениеЭлемента, ОтправкаНазад)

	ТипДанных = ТипЗнч(ЭлементДанных);
	Если ТипДанных = Тип(""ДокументОбъект.РасходнаяНакладная"") Тогда
		ПолучениеЭлемента = ПолучениеЭлементаДанных.Принять;
	КонецЕсли;

КонецПроцедуры
"}
},
{0,
{"Листинг 15.59. Процедура ПриПолученииДанныхОтГлавного",0,0,"15.59","Процедура ПриПолученииДанныхОтГлавного(ЭлементДанных, ПолучениеЭлемента, ОтправкаНазад)

	ТипДанных = ТипЗнч(ЭлементДанных);
	Если ТипДанных = Тип(""ДокументОбъект.РасходнаяНакладная"") Тогда
		Если ПланыОбмена.ИзменениеЗарегистрировано(Ссылка, ЭлементДанных) Тогда
			ПолучениеЭлемента = ПолучениеЭлементаДанных.Игнорировать;
		КонецЕсли
	КонецЕсли;

КонецПроцедуры
"}
},
{0,
{"Листинг 15.60. Установка свойства ГлавныйУзел",0,0,"15.60","ГлавныйУзел = ПланыОбмена.УдаленныеСклады.НайтиПоКоду(""ЦентрОфис"");
ПланыОбмена.УстановитьГлавныйУзел(ГлавныйУзел);
"}
},
{0,
{"Листинг 15.61. Регистрация изменений для узла",0,0,"15.61","Узел = ПланыОбмена.УдаленныеСклады.НайтиПоКоду(""Оптовый"");
ПланыОбмена.ЗарегистрироватьИзменения(Узел, Неопределено);
"}
},
{0,
{"Листинг 15.62. Пример очистки набора записей регистрации документа в последовательности",0,0,"15.62","Если Узел<>ПланыОбмена.Расходные.ЭтотУзел().Код Тогда
	Для Каждого НаборПоследовательности Из ПринадлежностьПоследовательностям Цикл
		НаборПоследовательности.Очистить();
	КонецЦикла;	
КонецЕсли;
"}
},
{0,
{"Листинг 15.63. Пример использования транзакций",0,0,"15.63","НачатьТранзакцию();

// обработка данных
// …

ЗафиксироватьТранзакцию();
"}
},
{0,
{"Листинг 15.64. Пример использования метода ЗаписатьИзменения()",0,0,"15.64","ПланыОбмена.ЗаписатьИзменения(ЗаписьСообщения, 0);"}
},
{0,
{"Листинг 15.65. Пример использования нескольких транзакций при выгрузке данных",0,0,"15.65","Счетчик = 0;
НачатьТранзакцию();

// обработка данных
//…

Если Счетчик = 1000 Тогда
	Счетчик = 0;
	ЗафиксироватьТранзакцию();
	НачатьТранзакцию();
КонецЕсли;

// обработка данных
// …
ЗафиксироватьТранзакцию();
"}
},
{0,
{"Листинг 15.66. Пример указания количества элементов, записываемых в одной транзакции",0,0,"15.66","ПланыОбмена.ЗаписатьИзменения(ЗаписьСообщения, 1000);"}
},
{0,
{"Листинг 15.67. Пример записи служебной информации",0,0,"15.67","ЗаписьXML.ЗаписатьНачалоЭлемента(""info"");
ЗаписьXML.ЗаписатьАтрибут(""содержание"", ""Дополнительная информация"");
ЗаписьXML.ЗаписатьТекст(""передаваемая информация"");
ЗаписьXML.ЗаписатьКонецЭлемента();
"}
},
{0,
{"Листинг 15.68. Пример чтения служебной информации",0,0,"15.68","Если ЧтениеXML.Имя=""info"" Тогда

	// Читаем текст  xml элемента
	ЧтениеXML.Прочитать();

	// Читаем конец элемента info
	ЧтениеXML.Прочитать();

	// Позиционируемся на начале элемента v8de:Changes
	ЧтениеXML.Прочитать();

КонецЕсли;
"}
},
{0,
{"Листинг 15.69. Пример передачи дополнительной информации в сообщении распределенной информационной базы",0,0,"15.69","// Создаем объект записи XML
ЗаписьXML = Новый ЗаписьXML;
ЗаписьXML.ОткрытьФайл(""c:\out.xml"");
ЗаписьXML.ЗаписатьОбъявлениеXML();
	
// Создаем новое сообщение
Узел=ПланыОбмена.Магазины.НайтиПоКоду(""Магазин"");
ЗаписьСообщения = ПланыОбмена.СоздатьЗаписьСообщения();
ЗаписьСообщения.НачатьЗапись(ЗаписьXML, Узел);
	
//Пишем дополнительную информацию
ЗаписьXML.ЗаписатьНачалоЭлемента(""info"");
ЗаписьXML.ЗаписатьАтрибут(""содержание"", ""Код"");
ВключитьСтроку=""
|Событие=Документы.Событие.СоздатьДокумент();
|Событие.Дата=РабочаяДата;
|Событие.ОписаниеСобытия=""""Сформировать внутренние заказы"""";
|//заполнение других реквизитов документа
|Событие.Записать(); "";
ЗаписьXML.ЗаписатьТекст(ВключитьСтроку);
ЗаписьXML.ЗаписатьКонецЭлемента();
	
//Пишем изменения
ПланыОбмена.ЗаписатьИзменения(ЗаписьСообщения, 0);
	
ЗаписьСообщения.ЗакончитьЗапись();
ЗаписьXML.Закрыть();
"}
},
{0,
{"Листинг 15.70. Фрагмент сообщения обмена",0,0,"15.70","<?xml version=""1.0""?>
<v8msg:Message xmlns:v8msg=""http://v8.1c.ru/messages"">
	<v8msg:Header>
		<v8msg:ExchangePlan>Магазины</v8msg:ExchangePlan>
		<v8msg:To>Магазин</v8msg:To>
		<v8msg:From>ЦентрОфис</v8msg:From>
		<v8msg:MessageNo>1</v8msg:MessageNo>
		<v8msg:ReceivedNo>0</v8msg:ReceivedNo>
	</v8msg:Header>
	<v8msg:Body xmlns:xsd=""http://www.w3.org/2001/XMLSchema"" xmlns:xsi=""http://www.w3.org/2001/XMLSchema-instance"" xmlns:v8=""http://v8.1c.ru/data"">
		<info содержание=""Код"">
			Событие=Документы.Событие.СоздатьДокумент();
			Событие.Дата=РабочаяДата;
			Событие.ОписаниеСобытия=""Сформировать внутренние заказы"";
			//заполнение других реквизитов документа
			Событие.Записать(); "";
		</info>
		<v8de:Changes xmlns:v8de=""http://v8.1c.ru/dataexchange/2005/02"">
			<v8de:Signature>033c1f1a-8430-40bb-93fb-44b68fec09b6</v8de:Signature>
"}
},
{0,
{"Листинг 15.71. Пример чтения сообщения обмена",0,0,"15.71","// Создаем объект чтения XML
ЧтениеXML = Новый ЧтениеXML;
ЧтениеXML.ОткрытьФайл(""c:\out.xml"");
	
// Загрузка из найденного файла
ЧтениеСообщения = ПланыОбмена.СоздатьЧтениеСообщения();
ЧтениеСообщения.НачатьЧтение(ЧтениеXML);
	
// Читаем текст элемента xml 
ЧтениеXML.Прочитать();

// Читаем конец элемента info
ЧтениеXML.Прочитать();

// Позиционируемся на начале элемента v8de:Changes
ЧтениеXML.Прочитать();
	
// Читаем изменения
ПланыОбмена.ПрочитатьИзменения(ЧтениеСообщения);
	
ЧтениеСообщения.ЗакончитьЧтение();
ЧтениеXML.Закрыть();
"}
},
{0,
{"Листинг 15.72. Пример удаления регистрации изменений",0,0,"15.72","Узел = ПланыОбмена.Магазины.НайтиПоКоду(""Магазин"");
ПланыОбмена.УдалитьРегистрациюИзменений(Узел);  
"}
},
{0,
{"Листинг 15.73. Процедура ПриОтправкеДанныхПодчиненному",0,0,"15.73","// В зависимости от направления можно использовать либо 
// событие ПриОтправкеДанныхПодчиненному, либо ПриОтправкеДанныхГлавному
Процедура ПриОтправкеДанныхПодчиненному(ЭлементДанных, ОтправкаЭлемента)

	ОтправкаЭлемента = ОтправкаЭлементаДанных.Удалить;

КонецПроцедуры
"}
},
{0,
{"Листинг 15.74. Пример записи сообщения обмена",0,0,"15.74","ЗаписьXML = Новый ЗаписьXML;
ЗаписьXML.ОткрытьФайл(""c:\out.xml"");
ЗаписьXML.ЗаписатьОбъявлениеXML();
	
// Создаем новое сообщение
Узел=ПланыОбмена.Магазины.НайтиПоКоду(""Магазин"");
ЗаписьСообщения = ПланыОбмена.СоздатьЗаписьСообщения();
ЗаписьСообщения.НачатьЗапись(ЗаписьXML, Узел);
ЗаписьСообщения.ЗакончитьЗапись();
ЗаписьXML.Закрыть();
"}
},
{0,
{"Листинг 15.75. Фрагмент сообщения обмена",0,0,"15.75","<?xml version=""1.0""?>
<v8msg:Message xmlns:v8msg=""http://v8.1c.ru/messages"">
	<v8msg:Header>
		<v8msg:ExchangePlan>Магазины</v8msg:ExchangePlan>
		<v8msg:To>Магазин</v8msg:To>
		<v8msg:From>ЦентрОфис</v8msg:From>
		<v8msg:MessageNo>6</v8msg:MessageNo>
		<v8msg:ReceivedNo>0</v8msg:ReceivedNo>
	</v8msg:Header>
	<v8msg:Body/>
</v8msg:Message>
"}
},
{0,
{"Листинг 15.76. Пример файла, содержащего строку запуска",0,0,"15.76","/Fd:\DemoExchange
/C ""<Commands>
	<ReadChanges>
		<ExchangePlan>УдаленныеСклады</ExchangePlan>
		<Node>Оптовый</Node>
	</ReadChanges>
	<WriteChanges>
		<ExchangePlan>УдаленныеСклады</ExchangePlan>
		<Node>Оптовый</Node>
	</WriteChanges>
</Commands>""
/Out c:\exchange.log	
"}
},
{0,
{"Листинг 15.77. Процедура ПередНачаломРаботыСистемы",0,0,"15.77","Процедура ПередНачаломРаботыСистемы(Отказ)
	
	Если ПараметрЗапуска <> """" Тогда
		Попытка 
			ВыполнитьКомандыЗапуска(ПараметрЗапуска);
		Исключение
			Сообщить(ОписаниеОшибки());
		КонецПопытки;
		
		// если вызов был сделан с параметром - завершаем работу
		Отказ = Истина;
		
	КонецЕсли;
	
КонецПроцедуры
"}
},
{0,
{"Листинг 15.78. Процедура ВыполнитьКомандыЗапуска",0,0,"15.78","Процедура ВыполнитьКомандыЗапуска(Параметр)
	
	ПотокXML = Новый ЧтениеXML;
	ПотокXML.УстановитьСтроку(ПараметрЗапуска);

	// Выполняем разбор параметра запуска
	ПотокXML.Прочитать();
	Если ПотокXML.ТипУзла <> ТипУзлаXML.НачалоЭлемента ИЛИ ПотокXML.Имя <> ""Commands"" Тогда
		ВызватьИсключение ""Ошибка разбора списка команд: 
							|ожидается элемент 'Commands'"";
	КонецЕсли;
	
	// Читаем последовательно команды и исполняем их
	Пока ПотокXML.Прочитать() Цикл
		Если ПотокXML.ТипУзла = ТипУзлаXML.КонецЭлемента И ПотокXML.Имя = ""Commands"" Тогда
			
			// список команд закончился, прерываем цикл
			Прервать;
		КонецЕсли;
		Если ПотокXML.ТипУзла <> ТипУзлаXML.НачалоЭлемента Тогда
			ВызватьИсключение ""Ошибка разбора списка команд: 
								|очередная команда не обнаружена."";
		КонецЕсли;
		Если ПотокXML.Имя = ""ReadChanges"" ИЛИ ПотокXML.Имя = ""WriteChanges"" Тогда
			Команда = ПотокXML.Имя;

			// Читаем параметры команды обмена данными
			ПотокXML.Прочитать();

			// Имя плана обмена
			Если ПотокXML.ТипУзла <> ТипУзлаXML.НачалоЭлемента ИЛИ ПотокXML.Имя <> ""ExchangePlan"" Тогда
				ВызватьИсключение ""Ошибка разбора списка команд: 
								|ожидается элемент 'ExchangePlan'"";
			КонецЕсли;

			// Читаем значение
			ИмяПланаОбмена = ПрочитатьXML(ПотокXML, Тип(""Строка""));

	    	// Получаем менеджер плана обмена
			Если Метаданные.НайтиПоПолномуИмени(""ПланОбмена."" + ИмяПланаОбмена) =	Неопределено Тогда
				ВызватьИсключение ""План обмена '"" + ИмяПланаОбмена + ""' не обнаружен."";
			КонецЕсли;
			ПланОбмена = ПланыОбмена[ИмяПланаОбмена];
			
			// Для ПланаОбмена ""Магазины"" данные команды не поддерживаем
			Если Метаданные.ПланыОбмена[ИмяПланаОбмена] = Метаданные.ПланыОбмена.Магазины Тогда
	
				ВызватьИсключение ""Автоматический обмен для плана обмена '"" + ИмяПланаОбмена + ""' не поддерживается."";
			КонецЕсли;
			
			// Код узла плана обмена
			Если ПотокXML.ТипУзла <> ТипУзлаXML.НачалоЭлемента ИЛИ ПотокXML.Имя <> ""Node"" Тогда
				ВызватьИсключение ""Ошибка разбора списка команд: 
								|ожидается элемент 'Node'"";
			КонецЕсли;

			// Читаем значение
			КодУзла = ПрочитатьXML(ПотокXML, Тип(""Строка""));

	    	// Ищем узел плана обмена
			УзелСсылка = ПланОбмена.НайтиПоКоду(КодУзла);
			Если УзелСсылка.Пустая() Тогда
					ВызватьИсключение ""Узел план обмена '"" + ИмяПланаОбмена + ""' не обнаружен: "" + КодУзла;
			КонецЕсли;
			Узел = УзелСсылка.ПолучитьОбъект();

			// Производим вызов команды
			Если Команда = ""ReadChanges"" Тогда
				
				// Выполняем чтение сообщения для указанного узла
				Узел.ПрочитатьСообщениеСИзменениями();
			Иначе
				
					// Выполняем запись сообщения для указанного узла
					Узел.ЗаписатьСообщениеСИзменениями();
				
			КонецЕсли;
		Иначе	
			ВызватьИсключение ""Ошибка разбора списка команд, 
							|неизвестная команда '"" + ПотокXML.Имя +  ""'"";
		КонецЕсли;
	КонецЦикла;
	
	// все команды выполнены - завершаем работу
	Отказ = Истина;	
		
КонецПроцедуры
"}
},
{0,
{"Листинг 15.79. Пример процедуры обмена",0,0,"15.79","Dim connector = CreateObject(""V8.COMConnector"")
Dim connection = connector.connect(""file=d:\DemoExchange"")
Dim nodeRef = connection.ПланыОбмена.УдаленныеСклады.НайтиПоКоду(""Оптовый"")
If (Not nodeRef.Пустая()) Then
	Dim node = nodeRef.ПолучитьОбъект()
	node.ПрочитатьСообщениеСИзменениями()
	node.ЗаписатьСообщениеСИзменениями()
End If
"}
},
{0,
{"Листинг 15.80. Пример постановки задания в очередь",0,0,"15.80","<%@ Language=javascript %>
<%
	entConn = new ActiveXObject(""v8.ComConnector"");
	conn = entConn.connect(""file=d:\DemoExchange"");
	nodeRef = conn.ПланыОбмена.УдаленныеСклады.НайтиПоКоду(""Оптовый"");
	if (nodeRef.Пустая() == false)
	{
		node = nodeRef.ПолучитьОбъект();
		node.ПрочитатьСообщениеСИзменениями();
		node.ЗаписатьСообщениеСИзменениями();
	}	
%>
"}
}
},
{69,
{"Глава 16. Web-расширение",1,0,"",""},
{0,
{"Листинг 16.1. HTML-код созданной страницы",0,0,"16.1","<%@ Page language=""c#"" Codebehind=""LoginForm.aspx.cs"" AutoEventWireup=""false"" Inherits=""V8WebBook.LoginForm"" %>
<!DOCTYPE HTML PUBLIC ""-//W3C//DTD HTML 4.0 Transitional//EN"" >
<HTML>
	<HEAD>
		<title>LoginForm</title>
		<meta name=""GENERATOR"" Content=""Microsoft Visual Studio .NET 7.1"">
		<meta name=""CODE_LANGUAGE"" Content=""C#"">
		<meta name=""vs_defaultClientScript"" content=""JavaScript"">
		<meta name=""vs_targetSchema"" content=""http://schemas.microsoft.com/intellisense/ie5"">
	</HEAD>
	<body MS_POSITIONING=""GridLayout"">
		<form id=""Form1"" method=""post"" runat=""server"">
			<asp:TextBox id=""TextBox1"" runat=""server""></asp:TextBox>
			<asp:Button id=""Button2"" runat=""server"" Text=""Очистить""></asp:Button>
			<asp:Button id=""Button1"" runat=""server"" Text=""Ок""></asp:Button>
			<asp:Label id=""Label4"" runat=""server"">Пароль</asp:Label>
			<asp:Label id=""Label3"" runat=""server"">Серия </asp:Label>
			<asp:Label id=""Label2"" runat=""server"">№ паспорта</asp:Label>
			<asp:Label id=""Label1"" runat=""server"">Логин</asp:Label>
			<asp:TextBox id=""TextBox4"" runat=""server""></asp:TextBox>
			<asp:TextBox id=""TextBox3"" runat=""server""></asp:TextBox>
			<asp:TextBox id=""TextBox2"" runat=""server""></asp:TextBox>
		</form>
	</body>
</HTML>
"}
},
{0,
{"Листинг 16.2. Фрагмент HTML-кода созданной страницы",0,0,"16.2","<form id=""Form1"" method=""post"" runat=""server"">"}
},
{0,
{"Листинг 16.3. Фрагмент HTML-кода созданной страницы",0,0,"16.3","<asp:TextBox id=""TextBox1"" runat=""server""></asp:TextBox>"}
},
{0,
{"Листинг 16.4. Исходный код страницы",0,0,"16.4","<!DOCTYPE HTML PUBLIC ""-//W3C//DTD HTML 4.0 Transitional//EN"" >
<HTML>
	<HEAD>
		<title>LoginForm</title>
		<meta name=""GENERATOR"" Content=""Microsoft Visual Studio .NET 7.1"">
		<meta name=""CODE_LANGUAGE"" Content=""C#"">
		<meta name=""vs_defaultClientScript"" content=""JavaScript"">
		<meta name=""vs_targetSchema"" content=""http://schemas.microsoft.com/intellisense/ie5"">
	</HEAD>
	<body MS_POSITIONING=""GridLayout"">
		<form name=""Form1"" method=""post"" action=""LoginForm.aspx"" id=""Form1"">
			<input type=""hidden"" name=""__VIEWSTATE"" value=""dDwzMzkwMzkzMTY7Oz5XREZClCJcq6Ogjr2NGMikVs3uQ==""/>
			<input name=""TextBox1"" type=""text"" id=""TextBox1""/>
			<input type=""submit"" name=""Button2"" value=""Очистить"" id=""Button2""/>
			<input type=""submit"" name=""Button1"" value=""Ок"" id=""Button1"" />
			<span id=""Label4"">Пароль</span>
			<span id=""Label3"">Серия </span>
			<span id=""Label2"">№ паспорта</span>
			<span id=""Label1"">Логин</span>
			<input name=""TextBox4"" type=""text"" id=""TextBox4""/>
			<input name=""TextBox3"" type=""text"" id=""TextBox3""/>
			<input name=""TextBox2"" type=""text"" id=""TextBox2""/>
		</form>
	</body>
</HTML>
"}
},
{0,
{"Листинг 16.5. Программный код формы",0,0,"16.5","using System;
using System.Collections;
using System.ComponentModel;
using System.Data;
using System.Drawing;
using System.Web;
using System.Web.SessionState;
using System.Web.UI;
using System.Web.UI.WebControls;
using System.Web.UI.HtmlControls;

// новое пространство имен, совпадающее с именем проекта
namespace V8WebBook
{
	/// <summary>
	/// Summary description for LoginForm.
	/// </summary>
	public class LoginForm : System.Web.UI.Page
	{
		protected System.Web.UI.WebControls.TextBox TextBox1;
		protected System.Web.UI.WebControls.TextBox TextBox2;
		protected System.Web.UI.WebControls.TextBox TextBox3;
		protected System.Web.UI.WebControls.TextBox TextBox4;
		protected System.Web.UI.WebControls.Label Label1;
		protected System.Web.UI.WebControls.Label Label2;
		protected System.Web.UI.WebControls.Label Label3;
		protected System.Web.UI.WebControls.Label Label4;
		protected System.Web.UI.WebControls.Button Button1;
		protected System.Web.UI.WebControls.Button Button2;
	
		private void Page_Load(object sender, System.EventArgs e)
		{
			// Put user code to initialize the page here
		}

		#region Web Form Designer generated code
		override protected void OnInit(EventArgs e)
		{
			//
			// CODEGEN: This call is required by the 
			// ASP.NET Web Form Designer.
			//
			InitializeComponent();
			base.OnInit(e);
		}
		
		/// <summary>
		/// Required method for Designer support - do not modify
		/// the contents of this method with the code editor.
		/// </summary>
		private void InitializeComponent()
		{    
			this.Button2.Click += new System.EventHandler(this.Button2_Click);
			this.Load += new System.EventHandler(this.Page_Load);

		}
		#endregion

		private void Button2_Click(object sender, System.EventArgs e)
		{
			this.TextBox1.Text="""";		
			this.TextBox2.Text="""";		
			this.TextBox3.Text="""";		
			this.TextBox4.Text="""";	
		}
	}
}
"}
},
{0,
{"Листинг 16.6. Пример определения функции",0,0,"16.6","private void Page_Load(object sender, System.EventArgs e)"}
},
{0,
{"Листинг 16.7. Пример обработчика события TextBox1_TextChanged",0,0,"16.7","private void TextBox1_TextChanged(object sender, System.EventArgs e)
{
	this.TextBox2.Text = ""неизвестен"";		
	this.TextBox3.Text = ""неизвестен"";		
}
"}
},
{0,
{"Листинг 16.8. Объявление функции InitializeComponent() ",0,0,"16.8","private void InitializeComponent()
{    
	this.TextBox1.TextChanged += new System.EventHandler(this.TextBox1_TextChanged);
	this.Button2.Click += new System.EventHandler(this.Button2_Click);
	this.Load += new System.EventHandler(this.Page_Load);
}
"}
},
{0,
{"Листинг 16.9. Фрагмент кода",0,0,"16.9","<input type=""submit"" name=""Button1"" value=""Ок"" id=""Button1"" />"}
},
{0,
{"Листинг 16.10. Фрагмент кода",0,0,"16.10","<form name=""Form1"" method=""post"" action=""LoginForm.aspx"" id=""Form1"">"}
},
{0,
{"Листинг 16.11. Фрагмент кода",0,0,"16.11","<asp:TextBox id=""TextBox1"" runat=""server"" AutoPostBack=""True""></asp:TextBox>"}
},
{0,
{"Листинг 16.12. Сценарий, выполняемый на стороне клиента",0,0,"16.12","<script language=""javascript"">
<!--
	function __doPostBack(eventTarget, eventArgument) 
	{
		var theform;
		if (window.navigator.appName.toLowerCase().indexOf(""netscape"") > -1) 
		{
			theform = document.forms[""Form1""];
		}
		else 
		{
			theform = document.Form1;
		}
		theform.__EVENTTARGET.value = eventTarget.split(""$"").join("":"");
		theform.__EVENTARGUMENT.value = eventArgument;
		theform.submit();
	}
// -->
</script>
"}
},
{0,
{"Листинг 16.13. Фрагмент кода",0,0,"16.13","<input name=""TextBox1"" type=""text"" onchange=""__doPostBack('TextBox1', '')"" language=""javascript"" id=""TextBox1""/>
"}
},
{0,
{"Листинг 16.14. Пример для браузера Netscape",0,0,"16.14","theform = document.forms[""Form1""];"}
},
{0,
{"Листинг 16.15. Пример для браузеров Microsoft, Opera",0,0,"16.15","theform = document.Form1;"}
},
{0,
{"Листинг 16.16. Содержимое файла TableFormMap.xml",0,0,"16.16","<?xml version=""1.0"" encoding=""utf-8""?>
<!--
Пример оформления
<TableFormMap xmlns=""http://tempuri.org/TableFormMap.xsd"">
	<table name=""Документ.ИнвентаризацияТоваровНаСкладе"">
		<form type=""Element"">Invent.aspx</form>
		<form type=""List"">InventList.aspx</form>
	</table>
</TableFormMap>
-->
<TableFormMap xmlns=""http://tempuri.org/TableFormMap.xsd"">
	<table name=""Справочник.Номенклатура"">
		<form type=""List"">nomenlist.aspx</form>
	</table>
</TableFormMap>
"}
},
{0,
{"Листинг 16.17 Код формы",0,0,"16.17","using System;
using System.Collections;
using System.ComponentModel;
using System.Data;
using System.Drawing;
using System.Web;
using System.Web.SessionState;
using System.Web.UI;
using System.Web.UI.WebControls;
using System.Web.UI.HtmlControls;
using _1C.V8.Data;
using _1C.V8.WebControls;

namespace MySite
{
	public class nomenlist : System.Web.UI.Page
	{
		/// Заголовок страницы.
		protected Literal Title;
		protected V8Grid Grid;

		/// Источник данных.
		protected V8ListDataSource ListDataSource;

		/// Командная панель.
		protected V8CommandPanel Panel;
        
		#region Web Form Designer generated code
		override protected void OnInit(EventArgs e)
		{
			InitializeComponent();
			base.OnInit(e);
		}
		
		/// Required method for Designer support - do not modify
		/// the contents of this method with the code editor.
		private void InitializeComponent()
		{    
			this.Load += new System.EventHandler(this.Page_Load);
			this.Init += new System.EventHandler(this.Page_Init);
		}
		#endregion

		private void Page_Init(object sender, System.EventArgs e)
		{
			// настройка командной панели
			string controlName = Request.Params[""ControlName""];
			if (controlName != null && controlName != string.Empty)
			{
				Grid.State = V8Grid.V8GridState.Select;

				// Если установлено имя ЭУ, значит список открыт для выбора
				// Добавляем колонку Представление, 
				// так как при выборе его нужно передавать в ЭУ
				ListDataSource.Fields.Add(ListDataSource.Metadata.TermString(WebConsts.kPresentationPropTermString), false, false);
				Grid.PresentationField = ListDataSource.Metadata.TermString(WebConsts.kPresentationPropTermString);
			}
			else
			{
				foreach (V8CommandButton btn in Panel.Buttons.GetButtonsByType(V8CommandButtonType.Choice))
					btn.Visible = false;
			}

			if (ListDataSource.CheckAccessRight(V8Rights.InteractiveDelete))
			{
				const int ActionsBtn = 10;
				// для объектов команду удаления добавляем
				// в подменю ""действия""
				V8CommandButton btn = new V8CommandButton();
				Panel.Buttons[ActionsBtn].SubMenu.Add(btn);
				btn.CommandType = V8CommandButtonType.Delete;
			}
			V8WebUtil.SetButtonsStateByRight(ListDataSource, Panel.Buttons, V8CommandButtonType.Insert, V8Rights.InteractiveInsert);
			V8WebUtil.SetButtonsStateByRight(ListDataSource, Panel.Buttons, V8CommandButtonType.InsertFolder, V8Rights.InteractiveInsert);
			V8WebUtil.SetButtonsStateByRight(ListDataSource, Panel.Buttons, V8CommandButtonType.Copy, V8Rights.InteractiveInsert);
			V8WebUtil.SetButtonsStateByRight(ListDataSource, Panel.Buttons, V8CommandButtonType.DeletionMark, V8Rights.InteractiveSetDeletionMark);
			V8WebUtil.SetButtonsStateByRight(ListDataSource, Panel.Buttons, V8CommandButtonType.Delete, V8Rights.InteractiveDelete);
		}

		private void Page_Load(object sender, System.EventArgs e)
		{
			// проверка прав на просмотр таблицы
			if (!ListDataSource.CheckAccessRight(V8Rights.View))
			{
				V8WebUtil.RegisterShowErrorScript( _1C.V8.Data.V8.GetString(""err_accessRightViolation""), this, true);
				Response.End();
				return;
			}

			if (!IsPostBack)
				Title.Text = ListDataSource.TableInfo.Presentation;
		}
	}
}
"}
},
{0,
{"Листинг 16.18. Программная реализация формы DefaultObjectForm",0,0,"16.18","using System;
using System.Collections;
using System.Collections.Specialized;
using System.ComponentModel;
using System.Data;
using System.Drawing;
using System.Web;
using System.Web.SessionState;
using System.Web.UI;
using System.Web.UI.WebControls;
using System.Web.UI.HtmlControls;
using System.IO;
using _1C.V8.Data;
using _1C.V8.WebControls;

namespace _1C.V8.Forms
{
	/// <summary>
	/// Форма объекта
	/// </summary>
	public class DefaultObjectForm : System.Web.UI.Page
	{
		protected _1C.V8.WebControls.V8CommandPanel menuPanel;
		protected _1C.V8.WebControls.V8CommandPanel mainPanel;
		protected System.Web.UI.WebControls.Table mainTableCtrl;
		protected Literal Title;
		protected _1C.V8.WebControls.V8ObjectDataSource objectDS;

		public const string CssLabelClass = ""labelItem"";
		public const string CssTextBoxClass = ""textbox"";

		private void DefaultObjectForm_Init(object sender, System.EventArgs e)
		{
			if (Session[""Culture""] != null)
				System.Threading.Thread.CurrentThread.CurrentCulture = new System.Globalization.CultureInfo((string)Session[""Culture""]);

			string IBAlias = (string)Request.Params[""IBAlias""];
			if (IBAlias == null)
				IBAlias = string.Empty;
			objectDS.IBAlias = IBAlias;
			V8Metadata metadata =  V8Metadata.GetMetadata(IBAlias);

			if (Request.Params[""KeyType""] != null)
			{
				objectDS.TableName = metadata.TableNameByTypeName(Request.Params[""KeyType""]);
			}
			else if (Request.Params[""TableName""] != null)
			{
				objectDS.TableName = Request.Params[""TableName""];
			}
			else if (Request.Params[""CopyKeyType""] != null)
			{
				objectDS.TableName = metadata.TableNameByTypeName(Request.Params[""CopyKeyType""]);
			}
			else
			{
				throw new Exception(_1C.V8.Data.V8.GetString(""err_WrongPageParameters""));
			}

			objectDS.CheckIsFolder(Request.Params[""IsFolder""], Request.Params[""KeyValue""], Request.Params[""CopyKeyValue""], Request.Params[""CopyKeyType""]);

			objectDS.SetTabularParts(objectDS.GetAllTabularParts());

			// Проверка на Redirect
			FormType formType = FormType.Element;
			if (objectDS.IsFolder)
				formType = FormType.ElementFolder;

			string url = V8Config.GetUrl(objectDS.IBAlias, objectDS.TableName, formType);
			if (url != string.Empty && url != WebConsts.DefaultForms.DefaultObjectFormName)
				Server.Transfer(url);

			Title.Text = objectDS.TableInfo.Presentation;
			ConstructForm();
		}

		private void DefaultObjectForm_Load(object sender, System.EventArgs e)
		{
			// проверка прав на просмотр таблицы
			if (!objectDS.CheckAccessRight(V8Rights.View))
			{
				V8WebUtil.RegisterShowErrorScript( _1C.V8.Data.V8.GetString(""err_accessRightViolation""), this, true);
				Response.End();
				return;
			}

			if (!IsPostBack)
			{
				RegisterResizeScript();
			}
		}

		#region Web Form Designer generated code
		override protected void OnInit(EventArgs e)
		{
			InitializeComponent();
			base.OnInit(e);
		}
		
		private void InitializeComponent()
		{    
			this.Load += new System.EventHandler(this.DefaultObjectForm_Load);
			this.Init += new System.EventHandler(this.DefaultObjectForm_Init);
			this.PreRender += new System.EventHandler(this.DefaultObjectForm_PreRender);
		}
		#endregion

		/// <summary>
		/// Создать элементы управления формы
		/// </summary>
		protected void ConstructForm()
		{
			bool enabled = objectDS.CheckAccessRight(V8Rights.Edit);
			objectDS.Enabled = enabled;

			menuPanel.Buttons[0].Text = V8.Data.V8.GetString(""menu_reRead"");

			string presentationName = objectDS.Metadata.TermString(WebConsts.kPresentationPropTermString);
			// создаем ЭУ для отображения и редактирования полей шапки
			V8ItemDSFieldCollection fields = objectDS.GetFields();
			foreach (V8ItemDSField field in fields)
			{
				if (!field.Visible)
					continue;
				V8FieldInfo fieldInfo = objectDS.TableInfo.FieldsInfo[field.Name];
				if (fieldInfo.ReadOnly)
					continue;
				// пропускаем хранилище значения
				if (fieldInfo.TypeDomain.Types.C	ount == 1 && string.Compare(fieldInfo.TypeDomain.Types[0], V8Consts.kValueStorageTypeString, true) == 0)
				{
					continue;
				}

				TableRow row = new TableRow();
				mainTableCtrl.Rows.Add(row);
				TableCell cell = new TableCell();
				row.Cells.Add(cell);

				Label labelCtrl = new Label();
				cell.Controls.Add(labelCtrl);
				labelCtrl.Text = fieldInfo.Presentation;
				labelCtrl.CssClass = CssLabelClass;

				cell = new TableCell();
				row.Cells.Add(cell);
				cell.Width = Unit.Percentage(100);
				V8TextBox textBoxCtrl = new V8TextBox();
				textBoxCtrl.IBAlias = objectDS.IBAlias;
				cell.Controls.Add(textBoxCtrl);
				if (fieldInfo.PresentationLength == 0 || fieldInfo.PresentationLength > 25)
					textBoxCtrl.Width = Unit.Percentage(100);
				else
					textBoxCtrl.Width = new Unit(27, UnitType.Ex);
				textBoxCtrl.ID = fieldInfo.Name;
				textBoxCtrl.CssClass = CssTextBoxClass;
				if (string.Equals(fieldInfo.Name, objectDS.TableInfo.ParentField))
					textBoxCtrl.ChoiceMode = ChoiceFoldersAndItems.Folders;

				textBoxCtrl.Type = fieldInfo.TypeDomain;
				if (fieldInfo.TypeDomain.Types.Count > 1)
					textBoxCtrl.ClearButton = true;

				bool existReference = fieldInfo.ReferenceExist;
				bool existEnum = fieldInfo.EnumExist || fieldInfo.BoolExist || fieldInfo.EnumRefExist;
				if (existReference)
				{
					textBoxCtrl.SelectButton = true;
					textBoxCtrl.OpenButton = true;
					textBoxCtrl.ClearButton = true;
				}
				else if (existEnum || fieldInfo.DateExist)
				{
					textBoxCtrl.SelectButton = true;
				}
				else if (fieldInfo.TypeDescriptionExist)
				{
					textBoxCtrl.SelectButton = true;
					textBoxCtrl.SelectURL = WebConsts.DefaultForms.DefaultTypeChoiceFormName;
					textBoxCtrl.AvailableTypes = fieldInfo.AvailableTypes;
				}
				textBoxCtrl.ItemDataSource = objectDS.UniqueID;
				textBoxCtrl.FieldName = fieldInfo.Name;
			}

			// создаем закладки для табличных частей
			V8ItemDSTabularPartCollection tabularParts = objectDS.GetAllTabularParts();
			if (tabularParts.Count > 0)
			{
				mainTableCtrl.Height = Unit.Percentage(100);

				TableRow row = new TableRow();
				mainTableCtrl.Rows.Add(row);
				TableCell cell = new TableCell();
				row.Cells.Add(cell);
				cell.ColumnSpan = 2;
				cell.Height = Unit.Percentage(100);

				V8TabControl tabControl = new V8TabControl();
				cell.Controls.Add(tabControl);

				tabControl.Width = Unit.Percentage(100);
				tabControl.Height = Unit.Percentage(100);

				// для каждой табличной части создаем таблицу
				foreach (V8ItemDSTabularPart tp in tabularParts)
				{
					V8Tab tab = new V8Tab();
					tabControl.Tabs.Add(tab);
					tab.Text = objectDS.Metadata.TablesInfo[objectDS.TableName + ""."" + tp.Name].Presentation;

					HtmlTable tabTable = new HtmlTable();
					tab.Controls.Add(tabTable);
					tabTable.Width = ""100%"";
					tabTable.Height = ""100%"";
					tabTable.CellSpacing = 0;
					tabTable.CellPadding = 0;
					HtmlTableRow tabRow = new HtmlTableRow();
					tabTable.Rows.Add(tabRow);
					HtmlTableCell tabCell = new HtmlTableCell();
					tabRow.Cells.Add(tabCell);
					tabCell.ColSpan = 2;
                                                            
					V8CommandPanel panel = new V8CommandPanel();
					tabCell.Controls.Add(panel);

					panel.LinkedControl = ""Table."" + tp.Name;
					panel.ID = tp.Name + ""Panel"";

					V8CommandButton btn = new V8CommandButton();
					btn.CommandType = V8CommandButtonType.InsertRow;
					panel.Buttons.Add(btn);

					btn = new V8CommandButton();
					btn.CommandType = V8CommandButtonType.CopyRow;
					panel.Buttons.Add(btn);

					btn = new V8CommandButton();
					btn.CommandType = V8CommandButtonType.DeleteRow;
					panel.Buttons.Add(btn);

					tabCell.Controls.Add(new LiteralControl(@""<div style='height:2px'><img src='"" +WebConsts.Images.EmptyImage +""' /></div>""));

					tabRow = new HtmlTableRow();
					tabTable.Rows.Add(tabRow);

					tabCell = new HtmlTableCell();
					tabRow.Cells.Add(tabCell);
					tabCell.Width = ""1px"";
					tabCell.Controls.Add(new LiteralControl(@""<div style='width:1px;height:80px'>"" +""<img src='"" + WebConsts.Images.EmptyImage + ""' /></div>""));

					tabCell = new HtmlTableCell();
					tabRow.Cells.Add(tabCell);
					tabCell.Height = ""100%"";
					tabCell.Width = ""100%"";

					Panel overPanel = new Panel();
					tabCell.Controls.Add(overPanel);
					overPanel.Width = Unit.Percentage(100);
					overPanel.Height = Unit.Percentage(100);
					overPanel.Style.Add(""overflow"", ""auto"");

					V8TableInfo subTableInfo = objectDS.Metadata.TablesInfo[objectDS.TableName + '.' + tp.Name];
					V8EditGrid editGridCtrl = new V8EditGrid();
					editGridCtrl.IBAlias = objectDS.IBAlias;
					editGridCtrl.ID = ""Table."" + tp.Name;
					overPanel.Controls.Add(editGridCtrl);

					editGridCtrl.GridLines = GridLines.Horizontal;
					editGridCtrl.BorderWidth = Unit.Pixel(1);
					editGridCtrl.BorderStyle = BorderStyle.Solid;
					editGridCtrl.BorderColor = Color.Gray;
					editGridCtrl.Width = Unit.Percentage(100);

					editGridCtrl.ItemDataSource = objectDS.UniqueID;
					editGridCtrl.DataMember = tp.Name;

					// создаем колонки по полям табличной части
					V8ItemDSFieldCollection tpFields = tp.GetFields();
					foreach (V8ItemDSField field in tpFields)
					{
						if (!field.Visible) // TODO переделать на 
											// невидимую колонку у грида
							continue;
						V8FieldInfo fieldInfo = subTableInfo.FieldsInfo[field.Name];
						if (fieldInfo.ReadOnly)
							continue;
						V8EditGridColumn column = new V8EditGridColumn();
						editGridCtrl.Columns.Add(column);
						column.FieldName = fieldInfo.Name;
						column.HeaderText = fieldInfo.Presentation;
						column.Type = fieldInfo.TypeDomain;

						if (field.Presentation)
							column.PresentationField = fieldInfo.Name + presentationName;
                        
						if (fieldInfo.TypeDomain.Types.Count > 1)
							column.ClearButton = true;

						bool existReference = fieldInfo.ReferenceExist;
						bool existEnum = fieldInfo.EnumExist || fieldInfo.BoolExist || fieldInfo.EnumRefExist;
						if (existReference)
						{
							column.ClearButton = true;
							column.OpenButton = true;
							column.SelectButton = true;
						}
						else if (existEnum || fieldInfo.DateExist)
						{
							column.SelectButton = true;
						}
						else if (fieldInfo.TypeDescriptionExist)
						{
							column.SelectButton = true;
							column.SelectURL = WebConsts.DefaultForms.DefaultTypeChoiceFormName;
							column.AvailableTypes = fieldInfo.AvailableTypes;
						}
					}
				}
			}

			// Добавить дополнительные команды
			if (enabled && objectDS.TableInfo.Helper != null && objectDS.TableInfo.Helper.Actions != null)
			{
				ArrayList actions = objectDS.TableInfo.Helper.Actions;
				int pos = mainPanel.Buttons.Count - 1;
				if (pos < 0)
					pos = 0;

				foreach (V8Action action in actions)
				{
					if (!action.Item)
						continue;
					V8CommandButton btn = new V8CommandButton();
					btn.CommandType = V8CommandButtonType.Custom;
					btn.CommandName = action.Name;
					btn.Text = action.Presentation;
					btn.Hint = action.Presentation;
					mainPanel.Buttons.Insert(pos, btn);
					pos++;
				}
			}
		}

		protected void RegisterResizeScript()
		{
			string s = ""<script>ResizeWindow(500, 350);</script>"";
			Page.RegisterStartupScript(""Resize"", s);
		}

		private void DefaultObjectForm_PreRender(object sender, System.EventArgs e)
		{
			switch (objectDS.FormMode)
			{
				case V8ItemDataSourceMode.New :
				menuPanel.Buttons[1].Text = V8.Data.V8.GetString(""V8ItemDataSourceMode.New"");
					break;
				case V8ItemDataSourceMode.Edit :
					menuPanel.Buttons[1].Text = V8.Data.V8.GetString(""V8ItemDataSourceMode.Edit"");
					break;
				case V8ItemDataSourceMode.Copy :
					menuPanel.Buttons[1].Text = V8.Data.V8.GetString(""V8ItemDataSourceMode.Copy"");
					break;
				case V8ItemDataSourceMode.InputOnBasis :
					menuPanel.Buttons[1].Text = V8.Data.V8.GetString(""V8ItemDataSourceMode.InputOnBasis"");
					break;
			}
		}
	}
}
"}
},
{0,
{"Листинг 16.19. Фрагмент кода",0,0,"16.19","string url = V8Config.GetUrl(objectDS.IBAlias, objectDS.TableName, formType);
if (url != string.Empty && url != WebConsts.DefaultForms.DefaultObjectFormName)
	Server.Transfer(url);
"}
},
{0,
{"Листинг 16.20. Функция InitializeComponent ",0,0,"16.20","private void InitializeComponent()
{    
	this.Grid.SelectedIndexChanged += new System.EventHandler(this.Grid_SelectedIndexChanged);
	this.Load += new System.EventHandler(this.Page_Load);
	this.Init += new System.EventHandler(this.Page_Init);
}
"}
},
{0,
{"Листинг 16.21. Функция Grid_SelectedIndexChanged ",0,0,"16.21","private void Grid_SelectedIndexChanged(object sender, System.EventArgs e)
{
	V8ListDataSource1.WhereParameters[0].Value = Grid.Items[Grid.SelectedIndex].KeyValues[0];
	V8ListDataSource1.First();
	V8Grid1.DataBind();
}
"}
},
{0,
{"Листинг 16.22. Обработчик события Page_Load ",0,0,"16.22","private void Page_Load(object sender, System.EventArgs e)
{
	// проверка прав на просмотр таблицы
	if (!ListDataSource.CheckAccessRight(V8Rights.View))
	{
		V8WebUtil.RegisterShowErrorScript( _1C.V8.Data.V8.GetString(""err_accessRightViolation""), this, true);
		Response.End();
		return;
	}

	if (!IsPostBack)
	{
		Title.Text = ListDataSource.TableInfo.Presentation;
		this.ListDataSource.First();
		this.Grid.DataBind();
		this.Grid_SelectedIndexChanged(Grid, null);
	}
}
"}
},
{0,
{"Листинг 16.23. Программная реализация веб-формы",0,0,"16.23","using System;
using System.Collections;
using System.ComponentModel;
using System.Data;
using System.Drawing;
using System.Web;
using System.Web.SessionState;
using System.Web.UI;
using System.Web.UI.WebControls;
using System.Web.UI.HtmlControls;
using _1C.V8.Data;
using _1C.V8.WebControls;

namespace MySite
{
	/// <summary>
	/// Summary description for docobj.
	/// </summary>
	public class docobj : System.Web.UI.Page
	{
		/// <summary>
		/// Заголовок страницы.
		/// </summary>
		protected Literal Title;

		/// <summary>
		/// Источник данных.
		/// </summary>
		protected V8ObjectDataSource ItemDataSource;

		/// <summary>
		/// Командная панель.
		/// </summary>
		protected _1C.V8.WebControls.V8CommandPanel menuPanel;

		/// <summary>
		/// Командная панель формы.
		/// </summary>
		protected _1C.V8.WebControls.V8CommandPanel mainPanel;

		/// <summary>
		/// Редактирование полей
		/// </summary>
		protected System.Web.UI.WebControls.Label LabelДата;
		protected V8TextBox Дата;
		protected System.Web.UI.WebControls.Label LabelНомер;
		protected V8TextBox Номер;
		protected System.Web.UI.WebControls.Label LabelКонтрагент;
		protected V8TextBox Контрагент;
		protected System.Web.UI.WebControls.Label LabelСклад;
		protected V8TextBox Склад;
		protected System.Web.UI.WebControls.Label LabelСсылка;
		protected V8TextBox Ссылка;
		protected System.Web.UI.WebControls.Label LabelПометкаУдаления;
		protected V8TextBox ПометкаУдаления;
		protected System.Web.UI.WebControls.Label LabelПроведен;

		/// <summary>
		/// Редактирование табличных частей
		/// </summary>
		protected V8TabControl V8TabControl1;
		// Состав
		protected V8Tab V8Tab1;
		protected V8EditGrid V8EditGrid1;
		protected _1C.V8.WebControls.V8CommandPanel V8CommandPanel3;

        
		#region Web Form Designer generated code
		override protected void OnInit(EventArgs e)
		{
			InitializeComponent();
			base.OnInit(e);
		}
		
		/// <summary>
		/// Required method for Designer support - do not modify
		/// the contents of this method with the code editor.
		/// </summary>
		private void InitializeComponent()
		{    
			this.Load += new System.EventHandler(this.Page_Load);
			this.PreRender += new System.EventHandler(this.Page_PreRender);

		}
		#endregion

		private void Page_Load(object sender, System.EventArgs e)
		{
			// проверка прав на просмотр таблицы
			if (!ItemDataSource.CheckAccessRight(V8Rights.View))
			{
				V8WebUtil.RegisterShowErrorScript( _1C.V8.Data.V8.GetString(""err_accessRightViolation""), this, true);
				Response.End();
				return;
			}

			if (!IsPostBack)
				Title.Text = ItemDataSource.TableInfo.Presentation;
		}

		private void Page_PreRender(object sender, System.EventArgs e)
		{
			switch (ItemDataSource.FormMode)
			{
				case V8ItemDataSourceMode.New :
					menuPanel.Buttons[1].Text = _1C.V8.Data.V8.GetString(""V8ItemDataSourceMode.New"");
					break;
				case V8ItemDataSourceMode.Edit :
					menuPanel.Buttons[1].Text = _1C.V8.Data.V8.GetString(""V8ItemDataSourceMode.Edit"");
					break;
				case V8ItemDataSourceMode.Copy :
					menuPanel.Buttons[1].Text = _1C.V8.Data.V8.GetString(""V8ItemDataSourceMode.Copy"");
					break;
				case V8ItemDataSourceMode.InputOnBasis :
					menuPanel.Buttons[1].Text = _1C.V8.Data.V8.GetString(""V8ItemDataSourceMode.InputOnBasis"");
					break;
			}
		}
	}
}
"}
},
{0,
{"Листинг 16.24. Программная реализация веб-формы",0,0,"16.24","using System;
using System.Collections;
using System.ComponentModel;
using System.Data;
using System.Drawing;
using System.Web;
using System.Web.SessionState;
using System.Web.UI;
using System.Web.UI.WebControls;
using System.Web.UI.HtmlControls;
using _1C.V8.Data;
using _1C.V8.WebControls;

namespace MySite
{
	/// <summary>
	/// Summary description for linedoc.
	/// </summary>
	public class linedoc : System.Web.UI.Page
	{
		protected _1C.V8.WebControls.V8TextBox V8TextBox1;
		protected _1C.V8.WebControls.V8TextBox V8TextBox2;
		protected _1C.V8.WebControls.V8TextBox V8TextBox3;
		protected _1C.V8.WebControls.V8LineDataSource lineDS;
		protected _1C.V8.WebControls.V8CommandPanel mainPanel;
		protected _1C.V8.WebControls.V8TextBox V8TextBox4;
	
		private void Page_Load(object sender, System.EventArgs e)
		{
			// получает список элементов
			this.lineDS.SetColumns();
		}

		#region Web Form Designer generated code
		override protected void OnInit(EventArgs e)
		{
			//
			// CODEGEN: This call is required by the 
			// ASP.NET Web Form Designer.
			//
			InitializeComponent();
			base.OnInit(e);
		}
		
		/// <summary>
		/// Required method for Designer support - do not modify
		/// the contents of this method with the code editor.
		/// </summary>
		private void InitializeComponent()
		{    
			this.V8TextBox2.ValueChanged += new _1C.V8.WebControls.ValueChangedHandler(this.V8TextBox2_ValueChanged);
			this.Load += new System.EventHandler(this.Page_Load);

		}
		#endregion

		private void V8TextBox2_ValueChanged(System.EventArgs eventArgs)
		{
			decimal Summa=0;
			Summa = Convert.ToDecimal(this.V8TextBox2.Value) * Convert.ToDecimal(this.V8TextBox3.Value);
			this.V8TextBox4.Value = Summa;
		}
	}
}
"}
},
{0,
{"Листинг 16.25. Запрос, используемый для создания отчета о движениях товара",0,0,"16.25","""ВЫБРАТЬ
|	Период,
|	Номенклатура,
|	Представление(Номенклатура) Как Товар,
|	КоличествоПриход Как Поступление,
|	КоличествоРасход Как Продажа
|ИЗ 
|	РегистрНакопления.УчетНоменклатуры.Обороты( , , Неделя)""
"}
},
{0,
{"Листинг 16.26. Фрагмент HTML кода",0,0,"16.26","<td class=""Cell Detail fldНоменклатура fldНоменклатура"">
	<div class=""pointer"" onclick=""doDetailsClick('ReportViewer', 'Товар', '5', '')"">Атлант МХМ 1704-00</div>
</td>
"}
},
{0,
{"Листинг 16.27. Фрагмент HTML кода",0,0,"16.27","<script language='javascript' src='/aspnet_client/1CV8/V8ReportViewer.js'></script>
"}
},
{0,
{"Листинг 16.28. Функция doDetailsClick",0,0,"16.28","function doDetailsClick(wcID, name, rowGroup, columnGroup)
{
	if (rowGroup == null || columnGroup == null || name == null)
		return;

	__doPostBack(wcID, ""Details;"" + name + "";"" + rowGroup + "";"" + columnGroup);
}
"}
},
{0,
{"Листинг 16.29. Фрагмент HTML кода",0,0,"16.29","<script language=""javascript"">
<!--
	function __doPostBack(eventTarget, eventArgument) 
	{
		var theform;
		if (window.navigator.appName.toLowerCase().indexOf(""netscape"") > -1) 
		{
			theform = document.forms[""Form1""];
		}
		else 
		{
			theform = document.Form1;
		}
		theform.__EVENTTARGET.value = eventTarget.split(""$"").join("":"");
		theform.__EVENTARGUMENT.value = eventArgument;
		theform.submit();
	}
// -->
</script>
"}
},
{0,
{"Листинг 16.30. Обработчик события Click",0,0,"16.30","private void Button1_Click(object sender, System.EventArgs e)
{
	V8DbConnection connection = new V8DbConnection();
	connection.Database = ""File=\""D:\\Конфигурации\\Типовые\\DemoExchange\"";"";
	connection.User = ""web"";
	connection.Password = ""1234"";

	V8DbSelectCommand cmd = new V8DbSelectCommand();
	cmd.CommandType = CommandType.Text;
	cmd.CommandText = @""ВыбратьПредставление(Номенклатура) Как Наименование,КоличествоОстаток Как Остаток Из РегистрНакопления.УчетНоменклатуры.Остатки"";

	cmd.Connection = connection;

	TableRow row;
	TableCell cell;

	row = new TableRow();
	cell = new TableCell(); 
	cell.Text = ""Номенклатура"";
	row.Cells.Add(cell);

	cell = new TableCell(); 
	cell.Text = ""Количество"";
	row.Cells.Add(cell);

	Table1.Rows.Add(row);

	connection.Open();
	try
	{
		using(V8DataReader reader = (V8DataReader)cmd.ExecuteReader())
		{
			while (reader.Read())
			{
				string номенклатура = reader.GetString(0);
				decimal количество = reader.GetDecimal(1);

				row = new TableRow();
				cell = new TableCell(); 
				cell.Text = номенклатура;
				row.Cells.Add(cell);

				cell = new TableCell(); 
				cell.Text = количество.ToString();
				row.Cells.Add(cell);

				Table1.Rows.Add(row);
			}
		}

	}
	finally
	{
		connection.Close();
	}
	Page.Controls.Add(Table1);
}
"}
},
{0,
{"Листинг 16.31. Обработчик события Click",0,0,"16.31","private void Button1_Click(object sender, System.EventArgs e)
{
	V8DbConnection connection = new V8DbConnection();
	connection.Database= ""File=\""D:\\Конфигурации\\Типовые\\DemoExchange\"";"";
	connection.User=Session[""UserName""].ToString();
	connection.Password=Session[""UserPassword""].ToString();

	V8DbSelectCommand cmd = new V8DbSelectCommand();
	cmd.CommandType = CommandType.TableDirect;
	cmd.CommandText = ""Документ.ПриходнаяНакладная"";
	cmd.Connection = connection;
	cmd.Fields = @""Номер, Представление(Контрагент), Состав.(Представление(Номенклатура), Количество)"";

	cmd.WhereClause	=	""Номер=&Номер"";
	cmd.Parameters.Add(""Номер"",	this.TextBox1.Text.ToString());

	string номер;
	string контрагент;

	TableRow row;
	TableCell cell;

	row = new TableRow();
	cell = new TableCell(); 
	cell.Text = ""Номер/Номенклатура"";
	row.Cells.Add(cell);

	cell = new TableCell(); 
	cell.Text = ""Контрагент/Количество"";
	row.Cells.Add(cell);

	Table1.Rows.Add(row);

	connection.Open();
	try
	{
		using(V8DataReader reader = (V8DataReader)cmd.ExecuteReader())
		{
			while (reader.Read())
			{
				номер = reader.GetString(0);
				контрагент = reader.GetString(1);

				row = new TableRow();
				cell = new TableCell(); 
				cell.Text = номер.ToString();
				row.Cells.Add(cell);

				cell = new TableCell(); 
				cell.Text = контрагент;
				row.Cells.Add(cell);

				Table1.Rows.Add(row);

				using(V8DataReader Товары = (V8DataReader)reader.GetData(2))
				{
					while (Товары.Read())
					{
						row = new TableRow();
						cell = new TableCell(); 

						cell.Text=Товары.GetString(0);
						row.Cells.Add(cell);

						cell = new TableCell(); 
						cell.Text = Товары.GetDecimal(1).ToString();
						row.Cells.Add(cell);

						Table1.Rows.Add(row);
					}
				}
			}
		}

	}
	finally
	{
		connection.Close();
	}
	Page.Controls.Add(Table1);
}
"}
},
{0,
{"Листинг 16.32. Обработчик события Click",0,0,"16.32","private void Button1_Click(object sender, System.EventArgs e)
{
	V8DbConnection connection = new V8DbConnection();
	connection.Database= ""File=\""D:\\Конфигурации\\Типовые\\DemoExchange\"";"";
	connection.User=Session[""UserName""].ToString();
	connection.Password=Session[""UserPassword""].ToString();

	V8DbInsertCommand updCmd = new V8DbInsertCommand();
	updCmd.CommandType = CommandType.TableDirect;
	updCmd.CommandText = ""Справочник.Номенклатура"";
	updCmd.Connection = connection;

	updCmd.Parameters.Add(""Код"", this.TextBox1.Text.ToString());
	updCmd.Parameters.Add(""Наименование"", this.TextBox2.Text.ToString());
	updCmd.Parameters.Add(""ЗакупочнаяЦена"",Convert.ToDecimal(this.TextBox3.Text.ToString()));

	connection.Open();
	try
	{
		updCmd.ExecuteNonQuery();
	}
	finally
	{
		connection.Close();
	}

	// очищаем элементы управления
	this.TextBox1.Text = """";
	this.TextBox2.Text = """";
	this.TextBox3.Text = """";
}
"}
},
{0,
{"Листинг 16.33. Обработчик события Click",0,0,"16.33","private void Button1_Click(object sender, System.EventArgs e)
{
	V8DbConnection connection = new V8DbConnection();
	connection.Database = ""File=\""D:\\Конфигурации\\Типовые\\DemoExchange\"";"";
	connection.User = ""web"";
	connection.Password = ""1234"";

	DataTable table = new DataTable();
	table.Columns.Add(""Период"", typeof(object));
	table.Columns.Add(""Номенклатура"", typeof(object));
	table.Columns.Add(""Склад"", typeof(object));
	table.Columns.Add(""Количество"", typeof(decimal));

	V8DbSelectCommand cmd = new V8DbSelectCommand();
	cmd.CommandType = CommandType.TableDirect;
	cmd.CommandText = ""РегистрНакопления.УчетНоменклатуры"";
	cmd.Connection = connection;
	cmd.Fields = @""Регистратор, Период, Номенклатура, Склад, Количество"";
	cmd.WhereClause = ""Регистратор.Номер=&Номер"";
	cmd.Parameters.Add(""Номер"", this.TextBox1.Text.ToString());

	ObjectRef регистратор = null;

	connection.Open();
	try
	{
		using(V8DataReader reader = (V8DataReader)cmd.ExecuteReader())
		{
			while (reader.Read())
			{
				регистратор = (ObjectRef)reader.GetValue(0);
				DataRow row = table.NewRow();
				row[""Период""] = reader.GetValue(1);
				row[""Номенклатура""] = reader.GetValue(2);
				row[""Склад""] = reader.GetValue(3);
				row[""Количество""] = 1;
				table.Rows.Add(row);
			}
		}
	}
	finally
	{
		connection.Close();
	}

	V8DbUpdateCommand updCmd = new V8DbUpdateCommand();
	updCmd.CommandType = CommandType.TableDirect;
	updCmd.CommandText = ""РегистрНакопления.УчетНоменклатуры"";
	updCmd.Connection = connection;
	updCmd.Parameters.Add(""Регистратор"", регистратор);
	updCmd.Parameters.Add(""DataSet"", table);

	connection.Open();
	try
	{
		updCmd.ExecuteNonQuery();
	}
	finally
	{
		connection.Close();
	}
}
"}
},
{0,
{"Листинг 16.34. Обработчик события Click",0,0,"16.34","private void Button1_Click(object sender, System.EventArgs e)
{
	V8DbConnection connection = new V8DbConnection();
	connection.Database= ""File=\""D:\\Конфигурации\\Типовые\\DemoExchange\"";"";
	connection.User = ""web"";
	connection.Password = ""1234"";

	ObjectRef refer;

	V8DbSelectCommand cmd = new V8DbSelectCommand();
	cmd.CommandType = CommandType.TableDirect;
	cmd.CommandText = ""Справочник.Номенклатура"";
	cmd.Connection = connection;
	cmd.Fields = ""Ссылка"";
	cmd.WhereClause = ""Код=&Код"";
	cmd.Parameters.Add(""Код"", this.TextBox1.Text);

	connection.Open();
	try
	{
		refer = (ObjectRef)cmd.ExecuteScalar();
	}

	V8DbDeleteCommand delCmd = new V8DbDeleteCommand();
	delCmd.Connection = connection;
	delCmd.CommandType = CommandType.TableDirect;
	delCmd.CommandText = ""Справочник.Номенклатура"";
	delCmd.Parameters.Add(""Ссылка"", refer);
	connection.Open();

	try
	{
		delCmd.ExecuteNonQuery();
	}
	finally
	{
		connection.Close();
	}

}
"}
},
{0,
{"Листинг 16.35. Пример файла Service1.asmx",0,0,"16.35","using System;
using System.Collections;
using System.ComponentModel;
using System.Data;
using System.Diagnostics;
using System.Web;
using System.Web.Services;
using _1C.V8.Data;

namespace MyService
{
	/// <summary>
	/// Summary description for Service1.
	/// </summary>
	public class Service1 : System.Web.Services.WebService
	{
		public Service1()
		{
			//CODEGEN: This call is required by the 
			// ASP.NET Web Services Designer
			InitializeComponent();
		}

		#region Component Designer generated code
		
		//Required by the Web Services Designer 
		private IContainer components = null;
				
		/// <summary>
		/// Required method for Designer support - do not modify
		/// the contents of this method with the code editor.
		/// </summary>
		private void InitializeComponent()
		{
		}

		/// <summary>
		/// Clean up any resources being used.
		/// </summary>
		protected override void Dispose( bool disposing )
		{
			if(disposing && components != null)
			{
				components.Dispose();
			}
			base.Dispose(disposing);		
		}
		
		#endregion

		[WebMethod]
		public string RublesInWords(decimal sum)
		{
			using (V8DbConnection conn = new V8DbConnection(System.Configuration.ConfigurationSettings.AppSettings[V8Consts.Database], Configuration.ConfigurationSettings.AppSettings[V8Consts.UserName], System.Configuration.ConfigurationSettings.AppSettings[V8Consts.UserPassword]))
			{
				conn.Open();
				string ret = (string)V8.Call(conn, conn.Connection, ""ЧислоПрописью"", new object[] { sum, ""L=ru_RU"", @""рубль, рубля, рублей, м, копейка, копейки, копеек, ж, 2"" });
				return ret;
			}
		}
	}
}
"}
},
{0,
{"Листинг 16.36. Метод GetKurs()",0,0,"16.36","public string GetKurs(int code)
{
	using (V8DbConnection conn = new V8DbConnection(System.Configuration.ConfigurationSettings.AppSettings[V8Consts.Database], System.Configuration.ConfigurationSettings.AppSettings[V8Consts.UserName], System.Configuration.ConfigurationSettings.AppSettings[V8Consts.UserPassword]))
	{
		conn.Open();
		string ret = (string)V8.Call(conn, conn.Connection, ""ПолучитьКурс"", code);
		return ret;
	}
}
"}
},
{0,
{"Листинг 16.37. Функция ПолучитьКурс()",0,0,"16.37","Функция ПолучитьКурс(КодВалюты) Экспорт
	
	Валюта = Справочники.Валюты.НайтиПоКоду(КодВалюты);
	Отбор = Новый Структура(""Валюта"", Валюта);
	Запись = РегистрыСведений.КурсыВалют.ПолучитьПоследнее( , Отбор);
	Возврат(Запись.Курс);
	
КонецФункции	
"}
},
{0,
{"Листинг 16.38. Определение пространства имен",0,0,"16.38","[WebService(Namespace = ""http://name.name/WWWService/"")]

public class Service1 : System.Web.Services.WebService
"}
},
{0,
{"Листинг 16.39. Пример обращения к веб-сервису",0,0,"16.39","private void Button1_Click(object sender, System.EventArgs e)
{
	WebReference.WWWService ms = new WebReference.WWWService();
	this.Label1.Text = ms.GetKurs(1);
}
"}
},
{0,
{"Листинг 16.40. Пример обращения к веб-сервису",0,0,"16.40","Сумма = 1001;
Сервис = Новый COMОбъект(""MSSOAP.SoapClient30"");
Сервис.MSSoapInit(""http://localhost/TestService/Service1.asmx?wsdl"");
СуммаПрописью = Сервис.RublesInWords(Сумма);
Сообщить(СуммаПрописью); 
"}
},
{0,
{"Листинг 16.41. Пример модуля внешнего соединения",0,0,"16.41","Перем глПользователь Экспорт;

Функция ПолучитьДанныеДляДок(Номенклатура, Цена) Экспорт 

	Запрос = Новый Запрос;
	Запрос.Текст = ""
	|ВЫБРАТЬ
	|	ЦеныНоменклатуры.Цена
	|ИЗ
	|	РегистрСведений.ЦеныНоменклатуры(	, Номенклатура = &Номен И ТипЦен = &ТипЦен) КАК ЦеныНоменклатуры"" ;
				  
	Запрос.УстановитьПараметр(""Номен"", Номенклатура);		  
	Запрос.УстановитьПараметр(""ТипЦен"", Справочники.ТипыЦен.НайтиПоКоду(1));		  
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		Цена = Выборка.Цена;
		Возврат(Истина);
	Иначе
		Цена = 0;
		Возврат(Ложь);
	КонецЕсли;
КонецФункции

Функция ВозвращаемСтроку()  Экспорт

	Возврат(""Строка возврата"");	

КонецФункции

глПользователь = ""Некоторая переменная"";
"}
},
{0,
{"Листинг 16.42. Подключение к информационной базе 1С:Предприятия",0,0,"16.42","V8DbConnection connection = new V8DbConnection();
connection.Database = ""File=\""D:\\Конфигурации\\Типовые\\DemoExchange\"";"";
connection.User = Session[""UserName""].ToString();
connection.Password = Session[""UserPassword""].ToString();

// осуществление подключения
connection.Open();
"}
},
{0,
{"Листинг 16.43. Установление соединения с информационной базой 1С:Предприятия",0,0,"16.43","protected V8ListDataSource ListDataSource;

// код формы
connection = ListDataSource.Connection;

// осуществление подключения
connection.Open();
"}
},
{0,
{"Листинг 16.44. Пример чтения значения переменной",0,0,"16.44","string currUser = (string)V8.Get(connection, connection.Connection, ""глПользователь"");
this.Label1.Text = currUser;
"}
},
{0,
{"Листинг 16.45. Пример обращения к функции",0,0,"16.45","object test = V8.Call(connection.Connection, ""ВозвращаемСтроку"");
this.Label2.Text = test.ToString();
"}
},
{0,
{"Листинг 16.46. Пример вызова функции с двумя параметрами",0,0,"16.46","object[] args = {V8.ConvertValueNetToV8(NomenRef, connection), null};
object test2 = V8.Call(connection.Connection, ""ПолучитьДанныеДляДок"", args);
object ed = V8.ConvertValueV8ToNet(args[1], connection);
this.Label2.Text = V8.ConvertValueV8ToNet(args[1], connection).ToString();
"}
},
{0,
{"Листинг 16.47. Обработчик события Page_Load",0,0,"16.47","private void Page_Load(object sender, System.EventArgs e)
{
	// проверка прав на просмотр таблицы
	if (!ItemDataSource.CheckAccessRight(V8Rights.View))
	{
		V8WebUtil.RegisterShowErrorScript( _1C.V8.Data.V8.GetString(""err_accessRightViolation""), this, true);
		Response.End();
		return;
	}

	if (!IsPostBack)
		Title.Text = ItemDataSource.TableInfo.Presentation;
}
"}
},
{0,
{"Листинг 16.48. Фрагмент файла Web.config",0,0,"16.48","<authentication mode=""Windows"" /> 

<authorization>
	<allow users=""*"" /> <!-- Allow all users -->
		<!--  
			<allow users=""[comma separated list of users]"" roles=""[comma separated list of roles]""/>
			<deny users=""[comma separated list of users]"" roles=""[comma separated list of roles]""/>
		-->
</authorization>
"}
},
{0,
{"Листинг 16.49. Фрагмент кода",0,0,"16.49","<appSettings>
	<add key=""Database"" value='File=""D:\Конфигурации\Типовые\DemoExchange"";' />
	<add key=""UserName"" value=""web"" />
	<add key=""UserPassword"" value=""1234"" />
	<add key=""PoolCapacity"" value=""2"" />
</appSettings>
"}
},
{0,
{"Листинг 16.50. Фрагмент кода",0,0,"16.50","<authentication mode=""Forms"">
	<forms loginUrl=""logon.aspx"" name=""AuthCookie"" timeout=""60""	path=""/"" />
</authentication>	 
"}
},
{0,
{"Листинг 16.51. Фрагмент кода",0,0,"16.51","<authorization>
	<deny users=""?""/>
</authorization>
"}
},
{0,
{"Листинг 16.52. Определение пространств имен",0,0,"16.52","using _1C.V8.WebControls;
using System.Web.Security;
using System.Security.Principal;
"}
},
{0,
{"Листинг 16.53. Обработчик события AuthenticateRequest",0,0,"16.53","protected void Application_AuthenticateRequest(Object sender, EventArgs e)
{
	string cookieName = FormsAuthentication.FormsCookieName;
	HttpCookie authCookie = Context.Request.Cookies[cookieName];
	if (authCookie == null)
	{
		return;
	}
	FormsAuthenticationTicket authTicket = null;
	try
	{
		authTicket = FormsAuthentication.Decrypt(authCookie.Value);
	}
	catch
	{
		return;
	}
	if (authTicket == null)
	{
		return;
	}
	FormsIdentity id = new FormsIdentity(authTicket);
	GenericPrincipal princ = new GenericPrincipal(id, null);
	Context.User = princ;
}
"}
},
{0,
{"Листинг 16.54. Обработчик события Click",0,0,"16.54","private void Button1_Click(object sender, System.EventArgs e)
{
	bool isLogin = false;
	using (V8DbConnection connection = new V8DbConnection(V8Metadata.GetDatabase(""""), Name.Text, Password.Text))
	{
		try 
		{
			connection.Open();
			Session[WebConsts.UserName] = Name.Text;
			Session[WebConsts.UserPassword] = Password.Text;
			isLogin = true;
		}
		catch
		{
		}
	}
	if (isLogin)
	{
		FormsAuthenticationTicket authTicket = new FormsAuthenticationTicket(1, Name.Text, System.DateTime.Now, System.DateTime.Now.AddMinutes(30), false, string.Empty);

		string encTicket = FormsAuthentication.Encrypt(authTicket);
		Response.Cookies.Add(new HttpCookie(FormsAuthentication.FormsCookieName, encTicket));
		Response.Redirect(FormsAuthentication.GetRedirectUrl(Name.Text,false));
	}
	else
	{
		this.LabelInfo.Text = ""Ошибка идентификации!"";
	}
}
"}
},
{0,
{"Листинг 16.55. Обработчик события Start",0,0,"16.55","protected void Session_Start(Object sender, EventArgs e)
{
	Session[WebConsts.UserName] = System.Configuration.ConfigurationSettings.AppSettings[V8Consts.UserName];
	Session[WebConsts.UserPassword] = System.Configuration.ConfigurationSettings.AppSettings[V8Consts.UserPassword];
}
"}
},
{0,
{"Листинг 16.56 Пример настройки пула соединений",0,0,"16.56","protected void Application_Start(Object sender, EventArgs e)
{
	V8Metadata.SetDatabase("""", System.Configuration.ConfigurationSettings.AppSettings[V8Consts.Database]);

	string poolCapacityStr = System.Configuration.ConfigurationSettings.AppSettings[V8Consts.PoolCapacity];

	if (poolCapacityStr != null)
	{
		try
		{
			int poolCapacity = int.Parse(poolCapacityStr, CultureInfo.InvariantCulture);
			V8DbConnection.PoolCapacity = poolCapacity;
		}
		catch (FormatException)
		{
		}
	}
	string poolTimeoutStr = System.Configuration.ConfigurationSettings.AppSettings[V8Consts.PoolTimeout];

	if (poolTimeoutStr != null)
	{
		try
		{
			int poolTimeout = int.Parse(poolTimeoutStr, CultureInfo.InvariantCulture);
			V8DbConnection.PoolTimeout = poolTimeout;
		}
		catch (FormatException)
		{
		}
	}

	string maxConnectionsStr = System.Configuration.ConfigurationSettings.AppSettings[V8Consts.MaxConnections];
	if (maxConnectionsStr != null)
	{
		try
		{
			int maxConnections = int.Parse(maxConnectionsStr, CultureInfo.InvariantCulture);
			V8DbConnection.MaxConnections = maxConnections;
		}
		catch (FormatException)
		{
		}
	}

	V8Config.SetConfig("""", V8Config.MapFileName);
}
"}
},
{0,
{"Листинг 16.57. Фрагмент файла Web.config",0,0,"16.57","<appSettings>
	<add key=""Database"" value='File=""D:\Конфигурации\Типовые\DemoExchange"";' />
	<add key=""UserName"" value=""web"" />
	<add key=""UserPassword"" value=""1234"" />
	<add key=""PoolCapacity"" value=""2"" />
</appSettings>
"}
},
{0,
{"Листинг 16.58. Пример использования метода Wtite()",0,0,"16.58","Response.Write(“<h1>Здравствуй мир!!!</h1>”);"}
},
{0,
{"Листинг 16.59. Пример запрета буферизации",0,0,"16.59","Response.Buffer = false;"}
},
{0,
{"Листинг 16.60. Методы, позволяющие управлять буферизацией",0,0,"16.60","// отсылает клиенту все что на данный момент буферизировано
Response.Flush();

// очищает все данные буфера
Response.Clear();

// отсылает содержимое буфера, прекращает выполнение формы, и
//нициирует событие окончания запроса
Response.End();
"}
},
{0,
{"Листинг 16.61. Пример перенаправления",0,0,"16.61","protected void Session_Start(Object sender, EventArgs e)
{
	Response.Redirect(url);
}
"}
},
{0,
{"Листинг 16.62. Пример использования cookie",0,0,"16.62","HttpCookie MyCookie = new HttpCookie(""LastVisit"");
DateTime now = DateTime.Now;

MyCookie.Value = now.ToString();
MyCookie.Expires = now.AddHours(1);

Response.Cookies.Add(MyCookie);
"}
},
{0,
{"Листинг 16.63. Приме чтения cookie",0,0,"16.63","ПоследнийВизит = Request.Cookies[""LastVisit""];"}
},
{0,
{"Листинг 16.64. Пример обращения к ресурсу",0,0,"16.64","Page.aspx?TableName = Справочник.Контрагенты"}
},
{0,
{"Листинг 16.65. Пример получения значения параметра",0,0,"16.65","ИмяТаблицы = Request.Params[""TableName ""];"}
},
{0,
{"Листинг 16.66. Пример завершения сессии",0,0,"16.66","Session.Abandon();"}
},
{0,
{"Листинг 16.67. Пример записи и чтения значения",0,0,"16.67","// Запись значения:
Session[“UserName”] = ”web”;

// Получение значения
Значение = Session[“UserName”];
"}
},
{0,
{"Листинг 16.68. Фрагмент HTML кода",0,0,"16.68","<TABLE id=""Table1"" style=""Z-INDEX: 102; LEFT: 1px; WIDTH: 182px; POSITION: absolute; TOP: 44px; HEIGHT: 108px; BACKGROUND-COLOR: yellow"" cellSpacing=""1"" cellPadding=""1"" width=""182"" border=""1"">
	<TR>
		<TD style=""HEIGHT: 13px"">
			<STRONG>Справочники</STRONG>
		</TD>
	</TR>
	<TR>
		<TD>
			<A href=""nomenlist.aspx"">Номенклатура</A>
		</TD>
	</TR>
	<TR>
		<TD>
			<A href=""DefaultListForm.aspx?TableName=Справочник.Контрагенты"">Контрагенты</A>
		</TD>
	</TR>
</TABLE>
"}
},
{0,
{"Листинг 16.69. Пример передачи параметров в автоформу",0,0,"16.69","webform.aspx?параметр1=ЗначениеПараметра&параметр2=ЗначениеПараметра"}
}
},
{4,
{"Глава 17. Поставка прикладных решений",1,0,"",""},
{0,
{"Листинг 17.1. Пример создания файла поставки",0,0,"17.1","/CreateDistributionFiles -cffile D:\Publishing.cf"}
},
{0,
{"Листинг 17.2. Пример создания файла обновления",0,0,"17.2","/CreateDistributionFiles -cfufile D:\Publishing.cfu -f D:\Distribute\1.4.2.1\1Cv8.cf
"}
},
{0,
{"Листинг 17.3. Пример создания файла обновления",0,0,"17.3","/CreateDistributionFiles -cfufile D:\Publishing.cfu -v 1.4.2.1"}
},
{0,
{"Листинг 17.4. Пример создания файлов поставки и обновления",0,0,"17.4","""С:\Program Files\1cv8\bin\1cv8.exe"" CONFIG /F ""C:\Documents and Settings\User\My Documents\InfoBase24"" /N Administrator /P Password /CreateDistributionFiles -cffile D:\Publishing.cf -cfufile D:\Publishing.cfu -f D:\Distribute\1.4.2.1\1Cv8.cf /Out D:\Report.txt
"}
}
},
{35,
{"Глава 18. Методология разработки",1,0,"",""},
{0,
{"Листинг 18.1. Сохранение версии конфигурации хранилища в файл",0,0,"18.1","/DepotDumpCfg D:\1\Publishing.cf -v 9"}
},
{0,
{"Листинг 18.2. Обновление конфигурации информационной базы из хранилища",0,0,"18.2","/DepotDumpCfg D:\1\Publishing.cf –revised"}
},
{0,
{"Листинг 18.3. Пример запроса",0,0,"18.3","""ВЫБРАТЬ
|	РегистрНакопленияОстатков.Период,
|	РегистрНакопленияОстатков.Регистратор,
|	РегистрНакопленияОстатков.ВидДвижения,
|	РегистрНакопленияОстатков.Номенклатура,
|	РегистрНакопленияОстатков.Остаток,
|	РегистрНакопленияОстатков.РеквизитДвижения
|ИЗ
|	РегистрНакопления.РегистрНакопленияОстатков КАК РегистрНакопленияОстатков
|ГДЕ
|	РегистрНакопленияОстатков.Склад = &ВыбранныйСклад""
"}
},
{0,
{"Листинг 18.4. Пример неоптимального запроса",0,0,"18.4","Для Каждого Номенклатура Из МассивНоменклатуры Цикл
	 
	Запрос = Новый Запрос;
	Запрос.Текст = ""
	|ВЫБРАТЬ
	|	РегистрНакопленияОстатковОстатки.Склад,
	|	РегистрНакопленияОстатковОстатки.ОстатокОстаток
	|ИЗ
	|	РегистрНакопления.РегистрНакопленияОстатков.Остатки( , Номенклатура = &ВыбраннаяНоменклатура) КАК РегистрНакопленияОстатковОстатки""

	Запрос.УстановитьПараметр(""ВыбраннаяНоменклатура"", Номенклатура);
	Результат = Запрос.Выполнить();
	
КонецЦикла;	
"}
},
{0,
{"Листинг 18.5. Пример оптимального запроса",0,0,"18.5","Запрос = Новый Запрос;
Запрос.Текст = ""
|ВЫБРАТЬ
|	РегистрНакопленияОстатковОстатки.Склад,
|	РегистрНакопленияОстатковОстатки.ОстатокОстаток
|ИЗ
|	РегистрНакопления.РегистрНакопленияОстатков.Остатки( , Номенклатура В (&МассивНоменклатуры)) КАК РегистрНакопленияОстатковОстатки""

Запрос.УстановитьПараметр(""МассивНоменклатуры"", МассивНоменклатуры);
Результат = Запрос.Выполнить();
"}
},
{0,
{"Листинг 18.6. Пример запроса",0,0,"18.6","Запрос = Новый Запрос;
Запрос.Текст = ""
|ВЫБРАТЬ
|	РегистрНакопленияОстатковОстатки.Склад,
|	РегистрНакопленияОстатковОстатки.ОстатокОстаток
|ИЗ
|	РегистрНакопления.РегистрНакопленияОстатков.Остатки( , Номенклатура = &ВыбраннаяНоменклатура) КАК РегистрНакопленияОстатковОстатки""

Для Каждого Номенклатура Из МассивНоменклатуры Цикл
	 
	Запрос.УстановитьПараметр(""ВыбраннаяНоменклатура"", Номенклатура);
	Результат = Запрос.Выполнить();
	
КонецЦикла;	
"}
},
{0,
{"Листинг 18.7. Пример неоптимального запроса",0,0,"18.7","""ВЫБРАТЬ 
|	Номенклатура, КоличествоОстаток
|ИЗ 
|	РегистрНакопления.ТоварыНаСкладах.Остатки()
|ГДЕ 
|	Номенклатура = &Номенклатура""
"}
},
{0,
{"Листинг 18.8. Пример оптимального запроса",0,0,"18.8","""ВЫБРАТЬ 
|	Номенклатура, КоличествоОстаток
|ИЗ 
|	РегистрНакопления.ТоварыНаСкладах.Остатки(,Номенклатура = &Номенклатура)""
"}
},
{0,
{"Листинг 18.9. Пример запроса",0,0,"18.9","""ВЫБРАТЬ
|	Валюта, Курс
|ИЗ
|	РегистрСведений.КурсыВалют.СрезПоследних()
|ГДЕ
|	Источник = &ВыбранныйИсточник""
"}
},
{0,
{"Листинг 18.10. Пример запроса",0,0,"18.10","""ВЫБРАТЬ
|	Валюта, Курс
|ИЗ
|	РегистрСведений.КурсыВалют.СрезПоследних( , Источник = & ВыбранныйИсточник)""
"}
},
{0,
{"Листинг 18.11. Пример неоптимального запроса",0,0,"","""ВЫБРАТЬ 
|	РасходнаяНакладная.Дата, 
|	РасходнаяНакладная.Номер 
|ИЗ 
|	Документ.РасходнаяНакладная КАК РасходнаяНакладная 
|ГДЕ 
|	РасходнаяНакладная.Контрагент.Ссылка = &Контрагент""
"}
},
{0,
{"Листинг 18.12. Пример оптимального запроса",0,0,"18.12","""ВЫБРАТЬ 
|	РасходнаяНакладная.Дата, 
|	РасходнаяНакладная.Номер 
|ИЗ 
|	Документ.РасходнаяНакладная КАК РасходнаяНакладная 
|ГДЕ 
|	РасходнаяНакладная.Контрагент = &Контрагент""
"}
},
{0,
{"Листинг 18.13. Пример оптимального запроса",0,0,"18.13","""ВЫБРАТЬ
|	ВЫРАЗИТЬ (Продажи.Регистратор КАК Документ.РасходнаяНакладная).Номер,
|	ВЫРАЗИТЬ (Продажи.Регистратор КАК Документ.РасходнаяНакладная).Дата,
|	Продажи.Контрагент,
|	Продажи.Сумма
|ИЗ
|	РегистрНакопления.Продажи КАК Продажи
|
|ГДЕ
|	Продажи.Регистратор ССЫЛКА Документ.РасходнаяНакладная""
"}
},
{0,
{"Листинг 18.14. Пример запроса",0,0,"18.14","""ВЫБРАТЬ  
|	ПродажиКомпанииОбороты.Номенклатура КАК Номенклатура,  
|	ПродажиКомпанииОбороты.Номенклатура.Представление КАК НоменклатураПредставление,  
|	ПродажиКомпанииОбороты.ДокументПродажи.Контрагент КАК ДокументПродажиКонтрагент,
|	ПродажиКомпанииОбороты.ДокументПродажи.Контрагент.Представление КАК КонтрагентПредставление,  
|	ПродажиКомпанииОбороты.КоличествоОборот КАК КоличествоОборот,  
|	ПродажиКомпанииОбороты.СуммаПродажиОборот КАК СуммаПродажиОборот 
|ИЗ  
|	РегистрНакопления.ПродажиКомпании.Обороты КАК ПродажиКомпанииОбороты 
|ИТОГИ 
|	СУММА(КоличествоОборот), СУММА(СуммаПродажиОборот) 
|ПО  
|	ОБЩИЕ,  
|	Номенклатура,  
|	ДокументПродажиКонтрагент""
"}
},
{0,
{"Листинг 18.15. Пример неоптимального использования",0,0,"18.15","Если ВалютаДокумента <> Константы.ВалютаРегламентированногоУчета.Получить() Тогда 
"}
},
{0,
{"Листинг 18.16. Пример оптимального использования",0,0,"18.16","Если ВалютаДокумента <> мВалютаРегламентированногоУчета Тогда"}
},
{0,
{"Листинг 18.17. Пример использования события ПриПолученииДанных",0,0,"18.17","Процедура СписокНоменклатураПриПолученииДанных(Элемент, ОформленияСтрок) 

	Запрос = Новый Запрос(""ВЫБРАТЬ 
	|	ТоварыНаСкладахОстатки.КоличествоОстаток КАК Остаток, 
	|	ТоварыНаСкладахОстатки.Номенклатура КАК Товар 
	|ИЗ 
	|	РегистрНакопления.ТоварыНаСкладах.Остатки( , Номенклатура В (&МассивТоваров)) КАК ТоварыНаСкладахОстатки""); 

	МассивНоменклатуры = Новый Массив; // для передачи в параметр запроса 
	Соответствие = Новый Соответствие; // для заполнения остатков в строках табличного поля 

	Для Каждого Строка из ОформленияСтрок Цикл 
		МассивНоменклатуры.Добавить(Строка.ДанныеСтроки.Ссылка); 
		Соответствие.Вставить(Строка.ДанныеСтроки.Ссылка, Строка); 
	КонецЦикла; 

	Запрос.УстановитьПараметр(""МассивТоваров"", МассивНоменклатуры); 

	Выборка = Запрос.Выполнить().Выбрать(); 

	// Вывести остаток в строку, найденную в соответствии по номенклатуре из запроса. 
	Пока Выборка.Следующий() Цикл 
		Соответствие.Получить(Выборка.Товар).Ячейки.Остаток.Значение = Выборка.Остаток; 
	КонецЦикла; 

КонецПроцедуры 
"}
},
{0,
{"Листинг 18.18. Переиндексация и дефрагментация",0,0,"18.18","CREATE PROCEDURE DBReindex AS
SET NOCOUNT ON
DECLARE @TableName char(32)
DECLARE SysCur CURSOR FOR SELECT name FROM sysobjects WHERE type='U'
OPEN SysCur
FETCH NEXT FROM SysCur INTO @TableName
WHILE @@FETCH_STATUS=0 BEGIN
	DBCC DBREINDEX(@TableName)
	FETCH NEXT FROM SysCur INTO @TableName
END
CLOSE SysCur
DEALLOCATE SysCur
"}
},
{0,
{"Листинг 18.19. Пример использования подзапроса",0,0,"18.19","ВЫБРАТЬ … 
ИЗ 
	(ВЫБРАТЬ … 
	ИЗ …
	ГДЕ …
	СГРУППИРОВАТЬ ПО …
	) 
СГРУППИРОВАТЬ ПО…
"}
},
{0,
{"Листинг 18.20. Запрос, транслированный в язык Transact-SQL",0,0,"18.20","SELECT … 
FROM 
	(SELECT … 
	FROM …
	WHERE …
	GROUP BY …
	) 
GROUP BY…
"}
},
{0,
{"Листинг 18.21. Более сложное использование подзапроса",0,0,"18.21","ВЫБРАТЬ … 
ИЗ 
	(ВЫБРАТЬ … 
	ИЗ …
	ГДЕ …
	СГРУППИРОВАТЬ ПО …
	) 
СГРУППИРОВАТЬ ПО…

	ЛЕВОЕ СОЕДИНЕНИЕ

		ВЫБРАТЬ … 
		ИЗ 
			(ВЫБРАТЬ … 
			ИЗ …
			ГДЕ …
			СГРУППИРОВАТЬ ПО …
			) 
		СГРУППИРОВАТЬ ПО…
	ПО…
"}
},
{0,
{"Листинг 18.22. Уменьшение степени вложенности подзапросов",0,0,"18.22","ВЫБРАТЬ … 
ИЗ …
	ЛЕВОЕ СОЕДИНЕНИЕ
		ВЫБРАТЬ … 
		ИЗ …
ГДЕ …
СГРУППИРОВАТЬ ПО…
"}
},
{0,
{"Листинг 18.23. Параметры записей об ошибках",0,0,"18.23","Event Type: Error 
Event Source: Application Hang 
Description: Hanging application 1cv8.exe … 
"}
},
{0,
{"Листинг 18.24. Сокращение журнала регистрации",0,0,"18.24","""C:\Program Files\1cv8\bin\1cv8.exe"" CONFIG /F""C:\Documents and Settings\user\My Documents\1C\DemoTrd2"" /N""Федоров (администратор)"" /P"""" /OutD:\my\log.txt /ReduceEventLogSize 2004-12-26 -saveAsC:\OldLog.elf 
"}
},
{0,
{"Листинг 18.25. Пример последовательности запросов",0,0,"18.25","drop table #tt1
drop table #tt2
…
go
"}
},
{0,
{"Листинг 18.26. Реиндексация, обновление статистики и очистка процедурного кэша",0,0,"18.26","sp_msforeachtable N'DBCC DBREINDEX (''?'')'
exec sp_msforeachtable N'UPDATE STATISTICS ?'
DBCC FREEPROCCACHE
"}
},
{0,
{"Листинг 18.27. Пример объединения подзапросов",0,0,"18.27","ВЫБРАТЬ	… 
ИЗ 
	(ВЫБРАТЬ … 
	ИЗ …
	ГДЕ	…
	СГРУППИРОВАТЬ ПО …
	) 
СГРУППИРОВАТЬ ПО …

	ЛЕВОЕ СОЕДИНЕНИЕ

		ВЫБРАТЬ … 
		ИЗ 
			(ВЫБРАТЬ … 
			ИЗ …
			ГДЕ 	…
			СГРУППИРОВАТЬ ПО …
			) 
		СГРУППИРОВАТЬ ПО …
	ПО…
"}
},
{0,
{"Листинг 18.28. Получение списка активных пользователей",0,0,"18.28","Соединения = ПолучитьСоединенияИнформационнойБазы();
Для Каждого Соединение из Соединения Цикл
	Пользователь =  Соединение.Пользователь.Имя;
	Приложение = ПредставлениеПриложения(Соединение.ИмяПриложения);
	Сообщить(Пользователь + "" - "" + Приложение);
КонецЦикла;
"}
},
{0,
{"Листинг 18.29. Пример использования функции НСтр()",0,0,"18.29","Текст = ""ru = """"Добрый вечер!"""" en = """"Good Evening!"""""";
Сообщить(НСтр(Текст, ""en""));
"}
},
{0,
{"Листинг 18.30. Пример использования функции ПредставлениеПериода()",0,0,"18.30","Начало = '20041101000000';
Конец = КонецМесяца( '20041101000000');
Результат = ПредставлениеПериода(Начало, Конец, ""L = bg_BG"");
Сообщить(Результат);
"}
},
{0,
{"Листинг 18.31. Пример использования функции ПредставлениеПериода()",0,0,"18.31","Начало = '20040401000000';
Конец  =КонецМесяца( '20040601000000');
Результат = ПредставлениеПериода(Начало, Конец, ""L = fi_FI"");
Сообщить(Результат);
"}
},
{0,
{"Листинг 18.32. Пример использования функции ПредставлениеПериода()",0,0,"18.32","Начало = НачалоМесяца('20040101000000');
Конец  = КонецМесяца('20040901000000');
Результат  = ПредставлениеПериода(Начало, Конец, ""L = ka_GE; ФП = Истина"");
Сообщить(Результат);
"}
},
{0,
{"Листинг 18.33. Пример использования функции ЧислоПрописью()",0,0,"18.33","Сообщить(ЧислоПрописью(1457.25, ""L = de_DE; FS = Истина"", ""EURO, EURO, M, Cent, Cent, M, 2""));
"}
},
{0,
{"Листинг 18.34. Неправильное использование вызовов функции НСтр()",0,0,"18.34","НСтр(""ru='Документ'"") + "" "" + НСтр(""ru='Накладная'"");"}
},
{0,
{"Листинг 18.35. Правильное использование вызовов функции НСтр()",0,0,"18.35","НСтр(""ru='Документ'"") + "" "" + 
НСтр(""ru='Накладная'"");
"}
}
}
}
}
}